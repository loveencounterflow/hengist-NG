{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\nTMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@intertype_tasks =\n\n  #---------------------------------------------------------------------------------------------------------\n  module_exports: ->\n    EFFSTRING = require '../../../apps/effstring'\n    #.....................................................................................................\n    # @throws ( Ωfstr___1 = -> create_typespace() ), /declaration for type 'wholenumber' contains forward reference to type 'integer'/\n    @eq ( Ωfstr___2 = -> typeof EFFSTRING   ), 'object'\n    @eq ( Ωfstr___3 = -> typeof EFFSTRING.f ), 'function'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  re_matches: ->\n    { _fmtspec_re } = require '../../../apps/effstring'\n    #.....................................................................................................\n    @eq ( Ωfstr___4 = ->  ( ( \":5;)\"        ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '5',      tail: ')'       }\n    @eq ( Ωfstr___5 = ->  ( ( \":>5;)\"       ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '>5',     tail: ')'       }\n    @eq ( Ωfstr___6 = ->  ( ( \":<5;)\"       ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '<5',     tail: ')'       }\n    @eq ( Ωfstr___7 = ->  ( ( \":>5.2;)\"     ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '>5.2',   tail: ')'       }\n    @eq ( Ωfstr___8 = ->  ( ( \":\\\\;<5;)\"    ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '\\\\',     tail: '<5;)'    }\n    @eq ( Ωfstr___9 = ->  ( ( \":\\\\;<5;);\"   ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '\\\\',     tail: '<5;);'   }\n    @eq ( Ωfstr__10 = ->  ( ( \":\\\\;<5;)\\\\;\" ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '\\\\',     tail: '<5;)\\\\;' }\n    @eq ( Ωfstr__11 = ->  ( ( \":\\\\;>15;)\"   ).match _fmtspec_re )?.groups ? null ), { fmt_spec: '\\\\',     tail: '>15;)'   }\n    @eq ( Ωfstr__12 = ->  ( ( \":;>15;)\"     ).match _fmtspec_re )?.groups ? null ), { fmt_spec: ';>15',   tail: ')'       }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  basic_functionality: ->\n    { f, } = require '../../../apps/effstring'\n    #.....................................................................................................\n    @eq ( Ωfstr__13 = -> f''                                                  ), ''\n    @eq ( Ωfstr__14 = -> f'helo'                                              ), 'helo'\n    @eq ( Ωfstr__15 = -> f'(#{123})'                                          ), '(#{123})'\n    @eq ( Ωfstr__16 = -> f'(#{123}\\;)'                                        ), '(#{123};)'\n    @eq ( Ωfstr__17 = -> f'(#{123}\\\\;)'                                       ), '(#{123}\\\\;)'\n    @eq ( Ωfstr__18 = -> f\"(#{123})\"                                          ), '(123)'\n    @eq ( Ωfstr__19 = -> f\"(#{123}:5;)\"                                       ), '(  123)'\n    @eq ( Ωfstr__20 = -> f\"(#{123}:>5;)\"                                      ), '(  123)'\n    @eq ( Ωfstr__21 = -> f\"(#{123}:<5;)\"                                      ), '(123  )'\n    @eq ( Ωfstr__22 = -> f\"(#{123.456}:>5.2;)\"                                ), '(1.2e+2)'\n    @eq ( Ωfstr__23 = -> f\"(#{123}:;>15;)\"                                    ), '(;;;;;;;;;;;;123)'\n    @eq ( Ωfstr__24 = -> f\"(#{123}:;<15;)\"                                    ), '(123;;;;;;;;;;;;)'\n    @eq ( Ωfstr__25 = -> f\"(#{123}:>>15;)\"                                    ), '(>>>>>>>>>>>>123)'\n    @eq ( Ωfstr__26 = -> f\"(#{123}:<>15;)\"                                    ), '(<<<<<<<<<<<<123)'\n    @eq ( Ωfstr__27 = -> f\"(#{123}:;<7;)\"                                     ), '(123;;;;)'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  malformed_formats: ->\n    { f\n      Effstring_error\n      Effstring_syntax_error\n      Effstring_lib_syntax_error } = require '../../../apps/effstring'\n    #.......................................................................................................\n    @throws ( Ωfstr__28 = -> f\"(#{123}:;>15)\"       ), /illegal format specifier/\n    @throws ( Ωfstr__29 = -> f\"(#{123}:)\"           ), /illegal format specifier/\n    @throws ( Ωfstr__30 = -> f\"(#{123}:;)\"          ), /illegal format specifier/\n    @throws ( Ωfstr__31 = -> f\"(#{123}:--->3f;)\"    ), /illegal format specifier/\n    @eq ( Ωfstr__32 = -> try f\"(#{123}:;)\"        catch e then e instanceof Effstring_error   ), true\n    @eq ( Ωfstr__33 = -> try f\"(#{123}:;)\"        catch e then e instanceof Effstring_syntax_error   ), true\n    @eq ( Ωfstr__34 = -> try f\"(#{123}:;)\"        catch e then e instanceof Effstring_lib_syntax_error   ), false\n    @eq ( Ωfstr__35 = -> try f\"(#{123}:--->3f;)\"  catch e then e instanceof Effstring_error   ), true\n    @eq ( Ωfstr__36 = -> try f\"(#{123}:--->3f;)\"  catch e then e instanceof Effstring_syntax_error   ), true\n    @eq ( Ωfstr__37 = -> try f\"(#{123}:--->3f;)\"  catch e then e instanceof Effstring_lib_syntax_error   ), true\n    @throws ( Ωfstr__38 = -> f\"(#{123}:\\\\;<5;)\"    ), /illegal format specifier/\n    @throws ( Ωfstr__39 = -> f\"(#{123}:\\\\;<5;);\"   ), /illegal format specifier/\n    @throws ( Ωfstr__40 = -> f\"(#{123}:\\\\;<5;)\\\\;\" ), /illegal format specifier/\n    @throws ( Ωfstr__41 = -> f\"(#{123}:\\\\;>15;)\"   ), /illegal format specifier/\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  fixed_point_notation: ->\n    { f, } = require '../../../apps/effstring'\n    #.....................................................................................................\n    @eq ( Ωfstr__42 = -> f\"(#{123.456}:>5.2f;)\"                               ), '(123.46)'\n    @eq ( Ωfstr__43 = -> f\"(#{123.456}:>15.2f;)\"                              ), '(         123.46)'\n    @eq ( Ωfstr__44 = -> f\"(#{123.456}:<15.2f;)\"                              ), '(123.46         )'\n    @eq ( Ωfstr__45 = -> f\"(#{1234.567}:>15.2f;)\"                             ), '(        1234.57)'\n    @eq ( Ωfstr__46 = -> f\"(#{1234.567}:<15.2f;)\"                             ), '(1234.57        )'\n    @eq ( Ωfstr__47 = -> f\"(#{1234.567}:=>15.2f;)\"                            ), '(========1234.57)'\n    @eq ( Ωfstr__48 = -> f\"(#{1234.567}:=<15.2f;)\"                            ), '(1234.57========)'\n    @eq ( Ωfstr__49 = -> f\"(#{1234.567}:=>15,.2f;)\"                           ), '(=======1,234.57)'\n    @eq ( Ωfstr__50 = -> f\"(#{1234.567}:=<15,.2f;)\"                           ), '(1,234.57=======)'\n    #.......................................................................................................\n    @eq ( Ωfstr__51 = -> f\"(#{-1234.567}:_>15,.2f;)\"                          ), '(______−1,234.57)'\n    @eq ( Ωfstr__52 = -> f\"(#{+1234.567}:_>-15,.2f;)\"                         ), '(_______1,234.57)'\n    @eq ( Ωfstr__53 = -> f\"(#{-1234.567}:_>-15,.2f;)\"                         ), '(______−1,234.57)'\n    @eq ( Ωfstr__54 = -> f\"(#{+1234.567}:_>+15,.2f;)\"                         ), '(______+1,234.57)'\n    @eq ( Ωfstr__55 = -> f\"(#{-1234.567}:_>+15,.2f;)\"                         ), '(______−1,234.57)'\n    @eq ( Ωfstr__56 = -> f\"(#{+1234.567}:_=+15,.2f;)\"                         ), '(+______1,234.57)'\n    @eq ( Ωfstr__57 = -> f\"(#{-1234.567}:_=+15,.2f;)\"                         ), '(−______1,234.57)'\n    @eq ( Ωfstr__58 = -> f\"(#{-1234.567}:_=+015,.2f;)\"                        ), '(−0,000,001,234.57)'\n    @eq ( Ωfstr__59 = -> f\"(#{-1234.567}:=+015,.2f;)\"                         ), '(−0,000,001,234.57)'\n    @eq ( Ωfstr__60 = -> f\"(#{+1234.567}:_=015,.2f;)\"                         ), '(0,000,001,234.57)'\n    @eq ( Ωfstr__61 = -> f\"(#{+1234.567}:=015,.2f;)\"                          ), '(0,000,001,234.57)'\n    @eq ( Ωfstr__62 = -> f\"(#{+1234.567}:_=015.2f;)\"                          ), '(000000001234.57)'\n    @eq ( Ωfstr__63 = -> f\"(#{+1234.567}:=015.2f;)\"                           ), '(000000001234.57)'\n    @eq ( Ωfstr__64 = -> f\"(#{-1234.567}:_=015.2f;)\"                          ), '(−00000001234.57)'\n    @eq ( Ωfstr__65 = -> f\"(#{-1234.567}:=015.2f;)\"                           ), '(−00000001234.57)'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  from_the_docs: ->\n    { f, } = require '../../../apps/effstring'\n    ### TAINT check with `$` format will rely on locale setting of the machine the tests are running on ###\n    #.....................................................................................................\n    @eq ( Ωfstr__66 = -> f\"#{0.123}:.0%;\"   ), '12%'                  # rounded percentage, \"12%\"\n    @eq ( Ωfstr__67 = -> f\"#{-3.5}:($.2f;\"  ), '($3.50)'              # localized fixed-point currency, \"(£3.50)\"\n    # @eq ( Ωfstr__68 = -> f\"#{-3.5}:($.2f;\"  ), '(£3.50)'              # localized fixed-point currency, \"(£3.50)\"\n    @eq ( Ωfstr__69 = -> f\"#{42}:+20;\"      ), '                 +42' # space-filled and signed, \"                 +42\"\n    @eq ( Ωfstr__70 = -> f\"#{42}:.^20;\"     ), '.........42.........' # dot-filled and centered, \".........42.........\"\n    @eq ( Ωfstr__71 = -> f\"#{42e6}:.2s;\"    ), '42M'                  # SI-prefix with two significant digits, \"42M\"\n    @eq ( Ωfstr__72 = -> f\"#{48879}:#x;\"    ), '0xbeef'               # prefixed lowercase hexadecimal, \"0xbeef\"\n    @eq ( Ωfstr__73 = -> f\"#{4223}:,.2r;\"   ), '4,200'                # grouped thousands with two significant digits, \"4,200\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  effstring_format_test_js: ->\n    { f, } = require '../../../apps/effstring'\n    ### TAINT check with `$` format will rely on locale setting of the machine the tests are running on ###\n    #.....................................................................................................\n    @throws ( Ωfstr__74 = -> f\"#{0}:foo;\"   ), /illegal format specifier/\n    @throws ( Ωfstr__75 = -> f\"#{0}:.-2s;\"  ), /illegal format specifier/\n    @throws ( Ωfstr__76 = -> f\"#{0}:.f;\"    ), /illegal format specifier/\n    @eq ( Ωfstr__77 = -> f\"#{0}:.30f;\"              ), \"0.00000000000000000000\"\n    @eq ( Ωfstr__78 = -> f\"#{1}:.0g;\"               ), \"1\"\n    @eq ( Ωfstr__79 = -> f\"#{Number.MIN_VALUE}:s;\"  ), \"0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005y\"\n    @eq ( Ωfstr__80 = -> f\"#{Number.MAX_VALUE}:s;\"  ), \"179769000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000Y\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  defaultlocale_test_js: ->\n    { f, } = require '../../../apps/effstring'\n    {format, formatPrefix, formatDefaultLocale} = require '../../../apps/effstring/node_modules/d3-format'\n    debug 'Ωfstr__81', format\n    debug 'Ωfstr__82', formatPrefix\n    debug 'Ωfstr__83', formatDefaultLocale\n    #.......................................................................................................\n    en_US =\n      decimal:    '.',\n      thousands:  ',',\n      grouping:   [ 3, ],\n      currency:   [ '$', '', ]\n    fr_FR =\n      decimal:    ',',\n      thousands:  '.',\n      grouping:   [ 3, ],\n      currency:   [ '', '\\u00a0€', ],\n      percent:    '\\u202f%'\n    #.......................................................................................................\n    do =>\n      locale = formatDefaultLocale fr_FR\n      try\n        @eq ( Ωfstr__84 = -> ( locale.format \"$,.2f\" ) 12345678.90 ), \"12.345.678,90\\u00a0€\"\n        @eq ( Ωfstr__85 = -> ( locale.format \",.0%\"  ) 12345678.90 ), \"1.234.567.890\\u202f%\" # narrow no-break space\n      finally\n        formatDefaultLocale en_US\n      return null\n    #.......................................................................................................\n    do =>\n      locale = formatDefaultLocale fr_FR\n      try\n        @eq ( Ωfstr__86 = -> formatPrefix ), locale.formatPrefix\n        # @eq ( Ωfstr__87 = -> ( formatPrefix \",.2\", 1e3 ) 12345678.90 ), \"12.345,68k\"\n        @eq ( Ωfstr__88 = -> ( locale.formatPrefix \",.2\", 1e3 ) 12345678.90 ), \"12.345,68k\"\n      finally\n        formatDefaultLocale en_US\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  format_type_c_test_js: ->\n    { f, } = require '../../../apps/effstring'\n    #.......................................................................................................\n    @eq ( Ωfstr__89 = -> f\"#{'☃'}:c;\"         ), \"☃\"\n    @eq ( Ωfstr__90 = -> f\"#{'☃'}:020c;\"      ),  \"0000000000000000000☃\"\n    @eq ( Ωfstr__91 = -> f\"#{'☃'}: ^20c;\"     ), '         ☃         '\n    @eq ( Ωfstr__92 = -> f\"#{'経済'}: ^20c;\"   ), '        経済        '\n    @eq ( Ωfstr__93 = -> f\"#{'abcd'}: ^20c;\"   ), '        abcd        '\n    @eq ( Ωfstr__94 = -> f\"#{'☃'}:$c;\"        ), \"$☃\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  locale_internals: ->\n    { f\n      new_ftag\n      _default_locale\n      _d3_format\n      _locale_cfg_from_bcp47\n      _locale_cfg_from_hints\n      _hint_as_locale_cfg              } = require '../../../apps/effstring'\n    #.......................................................................................................\n    @eq ( Ωfstr__95 = -> _d3_format?              and ( ( typeof _d3_format             ) is 'object'   ) ), true\n    @eq ( Ωfstr__96 = -> _locale_cfg_from_bcp47?  and ( ( typeof _locale_cfg_from_bcp47 ) is 'function' ) ), true\n    @eq ( Ωfstr__97 = -> _locale_cfg_from_hints?  and ( ( typeof _locale_cfg_from_hints ) is 'function' ) ), true\n    @eq ( Ωfstr__98 = -> _hint_as_locale_cfg?     and ( ( typeof _hint_as_locale_cfg    ) is 'function' ) ), true\n    #.......................................................................................................\n    @eq ( Ωfstr__99 = -> _default_locale                ), { decimal: '.', thousands: ',', grouping: [ 3 ], currency: [ '$', '' ], numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: '%', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_100 = -> _locale_cfg_from_bcp47 'ar-AE' ), { decimal: '٫', thousands: '٬', grouping: [ 3 ], currency: [ '', ' د.إ.' ], numerals: [ '٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩' ] }\n    @eq ( Ωfstr_101 = -> _locale_cfg_from_bcp47 'en-US' ), { decimal: '.', thousands: ',', grouping: [ 3 ], currency: [ '$', '' ] }\n    @eq ( Ωfstr_102 = -> _locale_cfg_from_bcp47 'de-DE' ), { decimal: ',', thousands: '.', grouping: [ 3 ], currency: [ '', ' €' ] }\n    @eq ( Ωfstr_103 = -> _locale_cfg_from_bcp47 'en-IN' ), { decimal: '.', thousands: ',', grouping: [ 3, 2, 2, 2, 2, 2, 2, 2, 2, 2 ], currency: [ '₹', '' ] }\n    #.......................................................................................................\n    @eq ( Ωfstr_104 = -> _hint_as_locale_cfg 'ar-AE'    ), { decimal: '٫', thousands: '٬', grouping: [ 3 ], currency: [ '', ' د.إ.' ], numerals: [ '٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩' ] }\n    @eq ( Ωfstr_105 = -> _hint_as_locale_cfg 'en-US'    ), { decimal: '.', thousands: ',', grouping: [ 3 ], currency: [ '$', '' ] }\n    @eq ( Ωfstr_106 = -> _hint_as_locale_cfg 'de-DE'    ), { decimal: ',', thousands: '.', grouping: [ 3 ], currency: [ '', ' €' ] }\n    @eq ( Ωfstr_107 = -> _hint_as_locale_cfg 'en-IN'    ), { decimal: '.', thousands: ',', grouping: [ 3, 2, 2, 2, 2, 2, 2, 2, 2, 2 ], currency: [ '₹', '' ] }\n    @eq ( Ωfstr_108 = -> _hint_as_locale_cfg {}         ), {}\n    #.......................................................................................................\n    @eq ( Ωfstr_109 = -> _locale_cfg_from_hints 'ar-AE'                                                 ), { decimal: '٫', thousands: '٬',  grouping: [ 3 ], currency: [ '', ' د.إ.' ], numerals: [ '٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩' ], percent: '%', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_110 = -> _locale_cfg_from_hints 'en-US'                                                 ), { decimal: '.', thousands: ',', grouping: [ 3 ], currency: [ '$', '' ],      numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: '%', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_111 = -> _locale_cfg_from_hints 'de-DE'                                                 ), { decimal: ',', thousands: '.', grouping: [ 3 ], currency: [ '', ' €' ],     numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: '%', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_112 = -> _locale_cfg_from_hints          { percent: '\\xa0v.Hd.', }                      ), { decimal: '.', thousands: ',', grouping: [ 3 ], currency: [ '$', '' ],      numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: ' v.Hd.', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_113 = -> _locale_cfg_from_hints 'de-DE', { percent: '\\xa0v.Hd.', }                      ), { decimal: ',', thousands: '.', grouping: [ 3 ], currency: [ '', ' €' ],     numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: ' v.Hd.', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_114 = -> _locale_cfg_from_hints 'de-DE', { percent: '\\xa0v.Hd.', }, { thousands: \"'\", } ), { decimal: ',', thousands: \"'\", grouping: [ 3 ], currency: [ '', ' €' ],     numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: ' v.Hd.', minus: '−', nan: 'NaN', fullwidth: true, }\n    @eq ( Ωfstr_115 = -> _locale_cfg_from_hints {}                                                      ), { decimal: '.', thousands: ',', grouping: [ 3 ], currency: [ '$', '' ],      numerals: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' ], percent: '%', minus: '−', nan: 'NaN', fullwidth: true, }\n    #.......................................................................................................\n    do =>\n      locale_cfg  = _locale_cfg_from_hints 'de-DE'\n      locale      = _d3_format.formatLocale locale_cfg\n      @eq ( Ωfstr_116 = -> ( locale.format '_>17,.5%' ) 0.754321    ), '________75,43210%'\n      @eq ( Ωfstr_117 = -> ( locale.format '_>17,.5f' ) 1234567890  ), '1.234.567.890,00000'\n      return null\n    #.......................................................................................................\n    do =>\n      locale_cfg  = _locale_cfg_from_hints 'de-DE', { numerals: [ '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹', ], percent: ' v.H.', }\n      locale      = _d3_format.formatLocale locale_cfg\n      @eq ( Ωfstr_118 = -> ( locale.format '_>17,.5%' ) 0.754321    ), '____⁷⁵,⁴³²¹⁰ v.H.'\n      @eq ( Ωfstr_119 = -> ( locale.format '_>17,.5f' ) 1234567890  ), '¹.²³⁴.⁵⁶⁷.⁸⁹⁰,⁰⁰⁰⁰⁰'\n      return null\n    #.......................................................................................................\n    do ( f ) =>\n      f = new_ftag 'de-DE', { numerals: [ '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹', ], percent: ' v.H.', }\n      @eq ( Ωfstr_120 = -> ( f\"#{0.754321}:_>17.5%;\" )    ), '____⁷⁵,⁴³²¹⁰ v.H.'\n      return null\n    #.......................................................................................................\n    @eq ( Ωfstr_121 = -> ( new_ftag 'en-US' )\"#{123456789123456789.75}:_>37,.5f;\" ), '________123,456,789,123,456,784.00000'\n    @eq ( Ωfstr_122 = -> ( new_ftag { grouping: [ 4, ], } )\"#{123456789123456789.75}:_>37,.5f;\" ), '_________12,3456,7891,2345,6784.00000'\n    @eq ( Ωfstr_123 = -> ( new_ftag()       )\"#{1.23}:$03.2f;[#{1234567890.123456}:20,.4f;]\" ), '$1.23[  1,234,567,890.1235]'\n    @eq ( Ωfstr_124 = -> ( new_ftag {}      )\"#{1.23}:$03.2f;[#{1234567890.123456}:20,.4f;]\" ), '$1.23[  1,234,567,890.1235]'\n    @eq ( Ωfstr_125 = -> ( new_ftag 'de-DE' )\"#{1.23}:$03.2f;[#{1234567890.123456}:20,.4f;]\" ), '1,23 €[  1.234.567.890,1235]'\n    @eq ( Ωfstr_126 = -> ( new_ftag 'en-US' )\"#{1.23}:$03.2f;[#{1234567890.123456}:20,.4f;]\" ), '$1.23[  1,234,567,890.1235]'\n    @eq ( Ωfstr_127 = -> ( new_ftag 'es-MX' )\"#{1.23}:$03.2f;[#{1234567890.123456}:20,.4f;]\" ), '$1.23[  1,234,567,890.1235]'\n    @eq ( Ωfstr_128 = -> ( new_ftag 'en-IN' )\"#{1.23}:$03.2f;[#{1234567890.123456}:20,.4f;]\" ), '₹1.23[ 1,23,45,67,890.1235]'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  si_units_format_specifier_internals: ->\n    { _fmtspec_unit_re } = require '../../../apps/effstring'\n    #.......................................................................................................\n    do =>\n      @eq ( Ωfstr_129 = -> ( '_<15,.3f/y'.match _fmtspec_unit_re )?.groups ), { discard: '/y', unit: 'y', }\n      @eq ( Ωfstr_130 = -> ( '_<15,.3f/z'.match _fmtspec_unit_re )?.groups ), { discard: '/z', unit: 'z', }\n      @eq ( Ωfstr_131 = -> ( '_<15,.3f/a'.match _fmtspec_unit_re )?.groups ), { discard: '/a', unit: 'a', }\n      @eq ( Ωfstr_132 = -> ( '_<15,.3f/f'.match _fmtspec_unit_re )?.groups ), { discard: '/f', unit: 'f', }\n      @eq ( Ωfstr_133 = -> ( '_<15,.3f/p'.match _fmtspec_unit_re )?.groups ), { discard: '/p', unit: 'p', }\n      @eq ( Ωfstr_134 = -> ( '_<15,.3f/n'.match _fmtspec_unit_re )?.groups ), { discard: '/n', unit: 'n', }\n      @eq ( Ωfstr_135 = -> ( '_<15,.3f/µ'.match _fmtspec_unit_re )?.groups ), { discard: '/µ', unit: 'µ', }\n      @eq ( Ωfstr_136 = -> ( '_<15,.3f/m'.match _fmtspec_unit_re )?.groups ), { discard: '/m', unit: 'm', }\n      @eq ( Ωfstr_137 = -> ( '_<15,.3f/1'.match _fmtspec_unit_re )?.groups ), { discard: '/1', unit: '1', }\n      @eq ( Ωfstr_138 = -> ( '_<15,.3f/k'.match _fmtspec_unit_re )?.groups ), { discard: '/k', unit: 'k', }\n      @eq ( Ωfstr_139 = -> ( '_<15,.3f/M'.match _fmtspec_unit_re )?.groups ), { discard: '/M', unit: 'M', }\n      @eq ( Ωfstr_140 = -> ( '_<15,.3f/G'.match _fmtspec_unit_re )?.groups ), { discard: '/G', unit: 'G', }\n      @eq ( Ωfstr_141 = -> ( '_<15,.3f/T'.match _fmtspec_unit_re )?.groups ), { discard: '/T', unit: 'T', }\n      @eq ( Ωfstr_142 = -> ( '_<15,.3f/P'.match _fmtspec_unit_re )?.groups ), { discard: '/P', unit: 'P', }\n      @eq ( Ωfstr_143 = -> ( '_<15,.3f/E'.match _fmtspec_unit_re )?.groups ), { discard: '/E', unit: 'E', }\n      @eq ( Ωfstr_144 = -> ( '_<15,.3f/Z'.match _fmtspec_unit_re )?.groups ), { discard: '/Z', unit: 'Z', }\n      @eq ( Ωfstr_145 = -> ( '_<15,.3f/Y'.match _fmtspec_unit_re )?.groups ), { discard: '/Y', unit: 'Y', }\n      @eq ( Ωfstr_146 = -> ( '_<15,.3f/b'.match _fmtspec_unit_re )?.groups ), undefined\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  si_units_format_specifier: ->\n    { f\n      new_ftag\n      _default_locale\n      _d3_format\n      _locale_cfg_from_bcp47\n      _locale_cfg_from_hints\n      _hint_as_locale_cfg              } = require '../../../apps/effstring'\n    #.......................................................................................................\n    probes_and_matchers = [\n      [ 0.00000042, '__________0.420µ', ]\n      [ 0.0000042,  '__________4.200µ', ]\n      [ 0.000042,   '_________42.000µ', ]\n      [ 0.00042,    '________420.000µ', ]\n      [ 0.0042,     '______4,200.000µ', ]\n      [ 0.042,      '_____42,000.000µ', ]\n      [ 0.42,       '____420,000.000µ', ]\n      ]\n    #.......................................................................................................\n    do =>\n      ff = _d3_format.formatPrefix \"_>15,.3f\", 1e-6\n      for [ probe, matcher, ] in probes_and_matchers\n        @eq ( Ωfstr_147 = -> ff probe ), matcher\n      return null\n    #.......................................................................................................\n    do =>\n      for [ probe, matcher, ] in probes_and_matchers\n        @eq ( Ωfstr_148 = -> f\"#{probe}:_>15,.3f/µ;\" ), matcher\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  si_units_format_specifiers_updated_with_faults: ->\n    { f\n      new_ftag\n      _default_locale\n      _d3_format\n      _locale_cfg_from_bcp47\n      _locale_cfg_from_hints\n      _hint_as_locale_cfg              } = require '../../../apps/effstring'\n    #.......................................................................................................\n    @eq ( Ωfstr_149 = -> f\"d = #{1234.5678}:_>50.20f/y;m\" ), 'd = _1234567800000000000000000000.00000000000000000000ym'\n    @eq ( Ωfstr_150 = -> f\"d = #{1234.5678}:_>50.20f/z;m\" ), 'd = ____1234567800000000000000000.00000000000000000000zm'\n    @eq ( Ωfstr_151 = -> f\"d = #{1234.5678}:_>50.20f/a;m\" ), 'd = _______1234567800000000000000.00000000000000000000am'\n    @eq ( Ωfstr_152 = -> f\"d = #{1234.5678}:_>50.20f/f;m\" ), 'd = __________1234567800000000000.00000000000000000000fm'\n    @eq ( Ωfstr_153 = -> f\"d = #{1234.5678}:_>50.20f/p;m\" ), 'd = _____________1234567800000000.00000000000000000000pm'\n    @eq ( Ωfstr_154 = -> f\"d = #{1234.5678}:_>50.20f/n;m\" ), 'd = ________________1234567800000.00000000000000000000nm'\n    @eq ( Ωfstr_155 = -> f\"d = #{1234.5678}:_>50.20f/µ;m\" ), 'd = ___________________1234567800.00000000000000000000µm'\n    @eq ( Ωfstr_156 = -> f\"d = #{1234.5678}:_>50.20f/m;m\" ), 'd = ______________________1234567.80000000000000000000mm'\n    @eq ( Ωfstr_157 = -> f\"d = #{1234.5678}:_>50.20f/1;m\" ), 'd = _________________________1234.56780000000000000000m'\n    @eq ( Ωfstr_158 = -> f\"d = #{1234.5678}:_>50.20f/k;m\" ), 'd = ____________________________1.23456780000000000000km'\n    @eq ( Ωfstr_159 = -> f\"d = #{1234.5678}:_>50.20f/M;m\" ), 'd = ____________________________0.00123456780000000006Mm'\n    @eq ( Ωfstr_160 = -> f\"d = #{1234.5678}:_>50.20f/G;m\" ), 'd = ____________________________0.00000123456780000000Gm'\n    @eq ( Ωfstr_161 = -> f\"d = #{1234.5678}:_>50.20f/T;m\" ), 'd = ____________________________0.00000000123456780000Tm'\n    @eq ( Ωfstr_162 = -> f\"d = #{1234.5678}:_>50.20f/P;m\" ), 'd = ____________________________0.00000000000123456780Pm'\n    @eq ( Ωfstr_163 = -> f\"d = #{1234.5678}:_>50.20f/E;m\" ), 'd = ____________________________0.00000000000000123458Em'\n    @eq ( Ωfstr_164 = -> f\"d = #{1234.5678}:_>50.20f/Z;m\" ), 'd = ____________________________0.00000000000000000123Zm'\n    @eq ( Ωfstr_165 = -> f\"d = #{1234.5678}:_>50.20f/Y;m\" ), 'd = ____________________________0.00000000000000000000Ym'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  si_units_format_specifiers_updated_ideal: ->\n    { f\n      new_ftag\n      _default_locale\n      _d3_format\n      _locale_cfg_from_bcp47\n      _locale_cfg_from_hints\n      _hint_as_locale_cfg              } = require '../../../apps/effstring'\n    #.......................................................................................................\n    @eq ( Ωfstr_166 = -> f\"d = #{1234.5678}:_>50.20f/y;m\" ), 'd = _____________________________________1.2345678e+27ym'\n    @eq ( Ωfstr_167 = -> f\"d = #{1234.5678}:_>50.20f/z;m\" ), 'd = _____________________________________1.2345678e+24zm'\n    @eq ( Ωfstr_168 = -> f\"d = #{1234.5678}:_>50.20f/a;m\" ), 'd = _____________________________________1.2345678e+21am'\n    @eq ( Ωfstr_169 = -> f\"d = #{1234.5678}:_>50.20f/f;m\" ), 'd = __________1234567800000000000.00000000000000000000fm'\n    @eq ( Ωfstr_170 = -> f\"d = #{1234.5678}:_>50.20f/p;m\" ), 'd = _____________1234567800000000.00000000000000000000pm'\n    @eq ( Ωfstr_171 = -> f\"d = #{1234.5678}:_>50.20f/n;m\" ), 'd = ________________1234567800000.00000000000000000000nm'\n    @eq ( Ωfstr_172 = -> f\"d = #{1234.5678}:_>50.20f/µ;m\" ), 'd = ___________________1234567800.00000000000000000000µm'\n    @eq ( Ωfstr_173 = -> f\"d = #{1234.5678}:_>50.20f/m;m\" ), 'd = ______________________1234567.80000000004656612873mm'\n    @eq ( Ωfstr_174 = -> f\"d = #{1234.5678}:_>50.20f/1;m\" ), 'd = _________________________1234.56780000000003383320m'\n    @eq ( Ωfstr_175 = -> f\"d = #{1234.5678}:_>50.20f/k;m\" ), 'd = ____________________________1.23456779999999999298km'\n    @eq ( Ωfstr_176 = -> f\"d = #{1234.5678}:_>50.20f/M;m\" ), 'd = ____________________________0.00123456780000000006Mm'\n    @eq ( Ωfstr_177 = -> f\"d = #{1234.5678}:_>50.20f/G;m\" ), 'd = ____________________________0.00000123456780000000Gm'\n    @eq ( Ωfstr_178 = -> f\"d = #{1234.5678}:_>50.20f/T;m\" ), 'd = ____________________________0.00000000123456780000Tm'\n    @eq ( Ωfstr_179 = -> f\"d = #{1234.5678}:_>50.20f/P;m\" ), 'd = ____________________________0.00000000000123456780Pm'\n    @eq ( Ωfstr_180 = -> f\"d = #{1234.5678}:_>50.20f/E;m\" ), 'd = ____________________________0.00000000000000123457Em'\n    @eq ( Ωfstr_181 = -> f\"d = #{1234.5678}:_>50.20f/Z;m\" ), 'd = ____________________________0.00000000000000000123Zm'\n    @eq ( Ωfstr_182 = -> f\"d = #{1234.5678}:_>50.20f/Y;m\" ), 'd = ____________________________0.00000000000000000000Ym'\n    # @eq ( Ωfstr_183 = -> f\"d = #{1234.5678}:50.60f/y;m\" ), 'd =                                      1.2345678e+27ym'\n    # @eq ( Ωfstr_184 = -> f\"d = #{1234.5678}:50.60f/z;m\" ), 'd =                                      1.2345678e+24zm'\n    # @eq ( Ωfstr_185 = -> f\"d = #{1234.5678}:50.60f/a;m\" ), 'd =                                      1.2345678e+21am'\n    # @eq ( Ωfstr_186 = -> f\"d = #{1234.5678}:50.60f/f;m\" ), 'd =           1234567800000000000.00000000000000000000fm'\n    # @eq ( Ωfstr_187 = -> f\"d = #{1234.5678}:50.60f/p;m\" ), 'd =              1234567800000000.00000000000000000000pm'\n    # @eq ( Ωfstr_188 = -> f\"d = #{1234.5678}:50.60f/n;m\" ), 'd =                 1234567800000.00000000000000000000nm'\n    # @eq ( Ωfstr_189 = -> f\"d = #{1234.5678}:50.60f/µ;m\" ), 'd =                    1234567800.00000000000000000000µm'\n    # @eq ( Ωfstr_190 = -> f\"d = #{1234.5678}:50.60f/m;m\" ), 'd =                       1234567.80000000004656612873mm'\n    # @eq ( Ωfstr_191 = -> f\"d = #{1234.5678}:50.60f/1;m\" ), 'd =                          1234.56780000000003383320m'\n    # @eq ( Ωfstr_192 = -> f\"d = #{1234.5678}:50.60f/k;m\" ), 'd =                             1.23456779999999999298km'\n    # @eq ( Ωfstr_193 = -> f\"d = #{1234.5678}:50.60f/M;m\" ), 'd =                             0.00123456780000000006Mm'\n    # @eq ( Ωfstr_194 = -> f\"d = #{1234.5678}:50.60f/G;m\" ), 'd =                             0.0000012345678000000000000Gm'\n    # @eq ( Ωfstr_195 = -> f\"d = #{1234.5678}:50.60f/T;m\" ), 'd =                             0.0000000012345678000000000Tm'\n    # @eq ( Ωfstr_196 = -> f\"d = #{1234.5678}:50.60f/P;m\" ), 'd =                             0.0000000000012345678000000Pm'\n    # @eq ( Ωfstr_197 = -> f\"d = #{1234.5678}:50.60f/E;m\" ), 'd =                             0.0000000000000012345678000Em'\n    # @eq ( Ωfstr_198 = -> f\"d = #{1234.5678}:50.60f/Z;m\" ), 'd =                             0.0000000000000000012345678Zm'\n    # @eq ( Ωfstr_199 = -> f\"d = #{1234.5678}:50.60f/Y;m\" ), 'd =                             0.0000000000000000000012345Ym'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  si_units_format_specifier_unit: ->\n    { f\n      new_ftag\n      _default_locale\n      _d3_format\n      _locale_cfg_from_bcp47\n      _locale_cfg_from_hints\n      _hint_as_locale_cfg              } = require '../../../apps/effstring'\n    #.......................................................................................................\n    probes_and_matchers = [\n      [ 0.00000042, '__________0.000', ]\n      [ 0.0000042,  '__________0.000', ]\n      [ 0.000042,   '__________0.000', ]\n      [ 0.00042,    '__________0.000', ]\n      [ 0.0042,     '__________0.004', ]\n      [ 0.042,      '__________0.042', ]\n      [ 0.42,       '__________0.420', ]\n      [ 4.2,        '__________4.200', ]\n      [ 42,         '_________42.000', ]\n      ]\n    #.......................................................................................................\n    do =>\n      ff = _d3_format.formatPrefix \"_>15,.3f\", 1\n      for [ probe, matcher, ] in probes_and_matchers\n        @eq ( Ωfstr_200 = -> ff probe ), matcher\n      return null\n    #.......................................................................................................\n    do =>\n      for [ probe, matcher, ] in probes_and_matchers\n        @eq ( Ωfstr_201 = -> f\"#{probe}:_>15,.3f/1;\" ), matcher\n      return null\n    #.......................................................................................................\n    return null\n\n  #=========================================================================================================\n  ansi_escapes_and_widths:\n\n    #-------------------------------------------------------------------------------------------------------\n    ansi_escapes_dont_count_for_widths: ->\n      { f\n        new_ftag\n        _default_locale\n        _d3_format\n        _locale_cfg_from_bcp47\n        _locale_cfg_from_hints\n        _hint_as_locale_cfg             } = require '../../../apps/effstring'\n      { to_width\n        width_of                        } = require '../../../apps/to-width'\n      { default: strip_ansi             } = require 'strip-ansi'\n      { default: string_width           } = require '../../../apps/effstring/node_modules/string-width'\n      { red\n        reverse\n        bold                            } = GUY.trm\n      #.....................................................................................................\n      do =>\n        SFMODULES_dev = require '../../../apps/bricabrac-single-file-modules'\n        { ansi_colors_and_effects: C, } = SFMODULES_dev.require_ansi_colors_and_effects()\n        @eq ( Ωfstr_202 = ->         width_of C.red + 'abc' + C.default           ), 3\n        @eq ( Ωfstr_203 = ->     string_width C.red + 'abc' + C.default           ), 3\n        @eq ( Ωfstr_204 = ->         width_of C.red + C.italic + C.bold + 'abc' + C.bold0 + C.italic0 + C.default           ), 3\n        @eq ( Ωfstr_205 = ->     string_width C.red + C.italic + C.bold + 'abc' + C.bold0 + C.italic0 + C.default           ), 3\n        ###\nto-width:\n    \"string-width\": \"7.2.0\",\n    \"wcstring\": \"^2.1.1\"\neffstring:\n    \"string-width\": \"^7.2.0\"\n\n\n        ###\n        ansi_matcher  = /((?:\\x1b\\[[^m]+m)+)/g\n        segmenter     = new Intl.Segmenter()\n        split_into_visual_glyphs = ( text ) -> ( d.segment for d from segmenter.segment text )\n        debug 'Ωfstr_206',      width_of        f\"#{ red reverse bold '' }\"\n        debug 'Ωfstr_207',      string_width    f\"#{ red reverse bold '' }\"\n        debug 'Ωfstr_208',                      f\"\\x1b[mA\"\n        debug 'Ωfstr_209',                      f\"\\x1b[45mA\"\n        debug 'Ωfstr_210',                      f\"\\x1b[999mA\"\n        debug 'Ωfstr_211',                      f\"\\x1b[999:876:7mA\"\n        text_with_ansi_codes = \"ABC#{ C.black + C.bg_red + C.bold + 'DEF' + C.bold0 + C.default + C.bg_default }XYZ\"\n        debug 'Ωfstr_212',                    text_with_ansi_codes\n        # debug 'Ωfstr_213', ( d.segment for d from segmenter.segment  text_with_ansi_codes )\n        debug 'Ωfstr_214', rpr                text_with_ansi_codes\n        debug 'Ωfstr_215', width_of           text_with_ansi_codes\n        debug 'Ωfstr_216', string_width       text_with_ansi_codes\n        debug 'Ωfstr_217', rpr strip_ansi     text_with_ansi_codes\n        urge 'Ωfstr_218', d for d from        text_with_ansi_codes.matchAll ansi_matcher\n        debug 'Ωfstr_219',                    text_with_ansi_codes.replace  ansi_matcher, '.'\n        chunkify = ( text ) ->\n          chunks          = []\n          width           = 0\n          has_ansi        = false\n          chunk_has_ansi  = true\n          ### TAINT might as well return an empty list of chunks ###\n          if text is ''\n            return { has_ansi, width, chunks: [ { has_ansi, width, chunk: '', }, ], }\n          for chunk in text.split ansi_matcher\n            chunk_has_ansi    = not chunk_has_ansi\n            has_ansi        or= chunk_has_ansi\n            continue if chunk is ''\n            chunk_width       = if has_ansi then 0 else string_width chunk\n            width            += chunk_width\n            chunks.push { has_ansi: chunk_has_ansi, width: chunk_width, chunk, }\n          return { has_ansi, width, chunks, }\n          # [Symbol.iterator]: ( -> d for d in chunks )\n        do =>\n          echo '—————————————————————————————————————————————'\n          text = text_with_ansi_codes\n          urge 'Ωfstr_220',                chunkify text\n          info 'Ωfstr_221', d for d from ( chunkify text ).chunks\n        do =>\n          echo '—————————————————————————————————————————————'\n          text = 'ABCDEFXYZ'\n          urge 'Ωfstr_222',                chunkify text\n          info 'Ωfstr_223', d for d from ( chunkify text ).chunks\n        do =>\n          echo '—————————————————————————————————————————————'\n          text = \"#{ C.black + C.bg_red + C.bold + C.bold0 + C.default + C.bg_default }\"\n          urge 'Ωfstr_224',                chunkify text\n          info 'Ωfstr_225', d for d from ( chunkify text ).chunks\n        do =>\n          echo '—————————————————————————————————————————————'\n          text = ''\n          urge 'Ωfstr_226',                chunkify text\n          info 'Ωfstr_227', d for d from ( chunkify text ).chunks\n        process.exit 111\n      #.....................................................................................................\n      @eq ( Ωfstr_228 = ->         width_of                  'abc'            ), 3\n      @eq ( Ωfstr_229 = ->         width_of red              'abc'            ), 3\n      @eq ( Ωfstr_230 = ->         width_of reverse          'abc'            ), 3\n      @eq ( Ωfstr_231 = ->         width_of bold             'abc'            ), 3\n      @eq ( Ωfstr_232 = ->         width_of red reverse bold 'abc'            ), 3\n      @eq ( Ωfstr_233 = ->     string_width                  'abc'            ), 3\n      @eq ( Ωfstr_234 = ->     string_width red              'abc'            ), 3\n      @eq ( Ωfstr_235 = ->     string_width reverse          'abc'            ), 3\n      @eq ( Ωfstr_236 = ->     string_width bold             'abc'            ), 3\n      @eq ( Ωfstr_237 = ->     string_width red reverse bold 'abc'            ), 3\n      #.....................................................................................................\n      @eq ( Ωfstr_238 = ->            f\"[#{                  'abc' }:<20c;]\"  ), '[abc                 ]'\n      @eq ( Ωfstr_239 = -> strip_ansi f\"[#{ red              'abc' }:<20c;]\"  ), '[abc                 ]'\n      @eq ( Ωfstr_240 = -> strip_ansi f\"[#{ reverse          'abc' }:<20c;]\"  ), '[abc                 ]'\n      @eq ( Ωfstr_241 = -> strip_ansi f\"[#{ bold             'abc' }:<20c;]\"  ), '[abc                 ]'\n      @eq ( Ωfstr_242 = -> strip_ansi f\"[#{ red reverse bold 'abc' }:<20c;]\"  ), '[abc                 ]'\n      #.....................................................................................................\n      @eq ( Ωfstr_243 = ->            f\"[#{                  'abc' }:>20c;]\"  ), '[                 abc]'\n      @eq ( Ωfstr_244 = -> strip_ansi f\"[#{ red              'abc' }:>20c;]\"  ), '[                 abc]'\n      @eq ( Ωfstr_245 = -> strip_ansi f\"[#{ reverse          'abc' }:>20c;]\"  ), '[                 abc]'\n      @eq ( Ωfstr_246 = -> strip_ansi f\"[#{ bold             'abc' }:>20c;]\"  ), '[                 abc]'\n      @eq ( Ωfstr_247 = -> strip_ansi f\"[#{ red reverse bold 'abc' }:>20c;]\"  ), '[                 abc]'\n      #.....................................................................................................\n      @eq ( Ωfstr_248 = ->            f\"[#{                  'abc' }:^20c;]\"  ), '[        abc         ]'\n      @eq ( Ωfstr_249 = -> strip_ansi f\"[#{ red              'abc' }:^20c;]\"  ), '[        abc         ]'\n      @eq ( Ωfstr_250 = -> strip_ansi f\"[#{ reverse          'abc' }:^20c;]\"  ), '[        abc         ]'\n      @eq ( Ωfstr_251 = -> strip_ansi f\"[#{ bold             'abc' }:^20c;]\"  ), '[        abc         ]'\n      @eq ( Ωfstr_252 = -> strip_ansi f\"[#{ red reverse bold 'abc' }:^20c;]\"  ), '[        abc         ]'\n      #.....................................................................................................\n      @eq ( Ωfstr_253 = ->            f\"[#{                  'abc' }:=20c;]\"  ), '[                 abc]'\n      # @eq ( Ωfstr_254 = -> strip_ansi f\"[#{ red              'abc' }:=20c;]\"  ), '[        abc         ]'\n      # @eq ( Ωfstr_255 = -> strip_ansi f\"[#{ reverse          'abc' }:=20c;]\"  ), '[        abc         ]'\n      # @eq ( Ωfstr_256 = -> strip_ansi f\"[#{ bold             'abc' }:=20c;]\"  ), '[        abc         ]'\n      # @eq ( Ωfstr_257 = -> strip_ansi f\"[#{ red reverse bold 'abc' }:=20c;]\"  ), '[        abc         ]'\n      #.....................................................................................................\n      return null\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@future_intertype_tasks =\n\n  #---------------------------------------------------------------------------------------------------------\n  handle_nonnumeric_values: ->\n    { f\n      new_ftag\n      _default_locale\n      _d3_format\n      _locale_cfg_from_bcp47\n      _locale_cfg_from_hints\n      _hint_as_locale_cfg              } = require '../../../apps/effstring'\n    #.......................................................................................................\n    @eq ( Ωfstr_258 = -> urge 'Ωfstr_259', rpr f\"d = #{\"helo\"}:60.40f/k;m\" ), null\n    @eq ( Ωfstr_260 = -> urge 'Ωfstr_261', rpr f\"d = #{true}:60.40f/k;m\" ), null\n    # @eq ( Ωfstr_262 = -> urge 'Ωfstr_263', rpr f\"d = #{123456789n}:60.40f/k;m\" ), null\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\ndemo =\n  README: ->\n    { f, new_ftag, _d3_format, } = require '../../../apps/effstring'\n    echo()\n    do =>\n      # info 'Ωfstr_264', f\"——#{1234}:$#20x;——\"\n      info 'Ωfstr_265', f\"——#{1234}:;>20;——\"\n      info 'Ωfstr_266', f\"——#{1234}:#>20.3e;——\"\n      info 'Ωfstr_267', f\"——#{1234}:#>20.3f;——\"\n      info 'Ωfstr_268', f\"——#{1234}:#>20.3s;——\"\n      info 'Ωfstr_269', f\"——#{1234}:#>20.3n;——\"\n      info 'Ωfstr_270', f\"——#{Infinity}:#>20.3n;——\"\n    do =>\n      ja_jp_cfg     = {\n        numerals: [ '〇', '一', '二', '三', '四', '五', '六', '七', '八', '九', ], }\n      f_en = new_ftag 'en-GB'\n      f_ja = new_ftag 'ja-JP', ja_jp_cfg\n      console.log f_en\"#{'Alice'}:*<15c; is in #{'London'}:.^12c; and has #{1234}:_>$22,.2f; in their pocket.\"\n      console.log f_en\"#{'Bob'}:*<15c; is in #{'London'}:.^12c; and has #{45678.93}:_>$22,.2f; in their pocket.\"\n      console.log f_ja\"#{'アリスさん'}:*<15c; is in #{'倫敦'}:.^12c; and has #{1234}:_>$22,.2f; in their pocket.\"\n      console.log f_ja\"#{'ボブさん'}:*<15c; is in #{'倫敦'}:.^12c; and has #{45678.93}:_>$22,.2f; in their pocket.\"\n      return null\n    do =>\n      zh_tw_cfg     = {\n        currency: [ '新臺幣', '', ],\n        # numerals: [ '〇', '一', '二', '三', '四', '五', '六', '七', '八', '九', ],\n        }\n      f_en = new_ftag 'en-GB'\n      f_zh = new_ftag 'zh-CN', zh_tw_cfg\n      console.log f_en\"#{-98765.43}:·>$20,.2f;\"\n      console.log f_zh\"#{-98765.43}:·>$20,.2f;\"\n      console.log f_en\"#{-98765.43}:·=$20,.2f;\"\n      console.log f_zh\"#{-98765.43}:·=$20,.2f;\"\n      return null\n    echo()\n    do =>\n      ja_jp_cfg     = {\n        numerals: [ '〇', '一', '二', '三', '四', '五', '六', '七', '八', '九', ], }\n      f_en = new_ftag 'en-GB',            { fullwidth: false, }\n      f_ja = new_ftag 'ja-JP', ja_jp_cfg, { fullwidth: false, }\n      console.log f_en\"#{'Alice'}:*<15c; is in #{'London'}:.^12c; and has #{1234}:_>$22,.2f; in their pocket.\"\n      console.log f_en\"#{'Bob'}:*<15c; is in #{'London'}:.^12c; and has #{45678.93}:_>$22,.2f; in their pocket.\"\n      console.log f_ja\"#{'アリスさん'}:*<15c; is in #{'倫敦'}:.^12c; and has #{1234}:_>$22,.2f; in their pocket.\"\n      console.log f_ja\"#{'ボブさん'}:*<15c; is in #{'倫敦'}:.^12c; and has #{45678.93}:_>$22,.2f; in their pocket.\"\n      return null\n    do =>\n      zh_tw_cfg     = {\n        currency: [ '新臺幣', '', ],\n        # numerals: [ '〇', '一', '二', '三', '四', '五', '六', '七', '八', '九', ],\n        }\n      f_en = new_ftag 'en-GB',            { fullwidth: false, }\n      f_zh = new_ftag 'zh-CN', zh_tw_cfg, { fullwidth: false, }\n      console.log f_en\"#{-98765.43}:·>$20,.2f;\"\n      console.log f_zh\"#{-98765.43}:·>$20,.2f;\"\n      console.log f_en\"#{-98765.43}:·=$20,.2f;\"\n      console.log f_zh\"#{-98765.43}:·=$20,.2f;\"\n      return null\n    echo()\n    do =>\n      zh_tw_cfg     = {\n        currency: [ 'NT ', ' $', ],\n        numerals:   [ '(0)', '(1)', '(2)', '(3)', '(4)', '(5)', '(6)', '(7)', '(8)', '(9)', ]\n        }\n      f_en = new_ftag 'en-GB',            { fullwidth: true, }\n      f_zh = new_ftag 'zh-CN', zh_tw_cfg, { fullwidth: true, }\n      console.log f_en\"#{-98765.43}:·>$50,.2f;\"\n      console.log f_zh\"#{-98765.43}:·>$50,.2f;\"\n      console.log f_en\"#{-98765.43}:·=$50,.2f;\"\n      console.log f_zh\"#{-98765.43}:·=$50,.2f;\"\n      return null\n    do =>\n      zh_tw_cfg     = {\n        currency: [ 'NT ', ' $', ],\n        numerals:   [ '(0)', '(1)', '(2)', '(3)', '(4)', '(5)', '(6)', '(7)', '(8)', '(9)', ]\n        }\n      f_en = new_ftag 'en-GB',            { fullwidth: false, }\n      f_zh = new_ftag 'zh-CN', zh_tw_cfg, { fullwidth: false, }\n      console.log f_en\"#{-98765.43}:·>$50,.2f;\"\n      console.log f_zh\"#{-98765.43}:·>$50,.2f;\"\n      console.log f_en\"#{-98765.43}:·=$50,.2f;\"\n      console.log f_zh\"#{-98765.43}:·=$50,.2f;\"\n      return null\n    echo()\n    do =>\n      # f_en = new_ftag 'en-GB',            { fullwidth: false, }\n      # console.log f_en\"#{-98765.43}:·>$50,.2f;\"\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3~\", 1e-6\n        info 'Ωfstr_271', ff 0.00000042\n        info 'Ωfstr_272', ff 0.0000042\n        info 'Ωfstr_273', ff 0.000042\n        info 'Ωfstr_274', ff 0.00042\n        info 'Ωfstr_275', ff 0.0042\n        info 'Ωfstr_276', ff 0.042\n        info 'Ωfstr_277', ff 0.42\n        return null\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3~s\", 1e-6\n        info 'Ωfstr_278', ff 0.00000042\n        info 'Ωfstr_279', ff 0.0000042\n        info 'Ωfstr_280', ff 0.000042\n        info 'Ωfstr_281', ff 0.00042\n        info 'Ωfstr_282', ff 0.0042\n        info 'Ωfstr_283', ff 0.042\n        info 'Ωfstr_284', ff 0.42\n        return null\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3~f\", 1e-6\n        info 'Ωfstr_285', ff 0.00000042\n        info 'Ωfstr_286', ff 0.0000042\n        info 'Ωfstr_287', ff 0.000042\n        info 'Ωfstr_288', ff 0.00042\n        info 'Ωfstr_289', ff 0.0042\n        info 'Ωfstr_290', ff 0.042\n        info 'Ωfstr_291', ff 0.42\n        return null\n      do =>\n        echo()\n        info 'Ωfstr_292', f\"#{0.00000042}:_>15,.3f/µ;\"\n        info 'Ωfstr_293', f\"#{0.0000042}:_>15,.3f/µ;\"\n        info 'Ωfstr_294', f\"#{0.000042}:_>15,.3f/µ;\"\n        info 'Ωfstr_295', f\"#{0.00042}:_>15,.3f/µ;\"\n        info 'Ωfstr_296', f\"#{0.0042}:_>15,.3f/µ;\"\n        info 'Ωfstr_297', f\"#{0.042}:_>15,.3f/µ;\"\n        info 'Ωfstr_298', f\"#{0.42}:_>15,.3f/µ;\"\n        return null\n      do =>\n        echo()\n        info 'Ωfstr_299', f\"#{ 123000    }:_>9,.3f/k;m\"\n        info 'Ωfstr_300', f\"#{ 7000      }:_>9,.3f/k;m\"\n        info 'Ωfstr_301', f\"#{ 500       }:_>9,.3f/k;m\"\n        info 'Ωfstr_302', f\"#{ 99        }:_>9,.3f/k;m\"\n        return null\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3f\", 1e-3\n        info 'Ωfstr_303', ff 0.00089\n        info 'Ωfstr_304', ff 0.0089\n        info 'Ωfstr_305', ff 0.089\n        info 'Ωfstr_306', ff 0.89\n        info 'Ωfstr_307', ff 8.9\n        info 'Ωfstr_308', ff 89\n        info 'Ωfstr_309', ff 890\n        return null\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3f\", 1e-2\n        info 'Ωfstr_310', ff 0.00089\n        info 'Ωfstr_311', ff 0.0089\n        info 'Ωfstr_312', ff 0.089\n        info 'Ωfstr_313', ff 0.89\n        info 'Ωfstr_314', ff 8.9\n        info 'Ωfstr_315', ff 89\n        info 'Ωfstr_316', ff 890\n        return null\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3f\", 1e-1\n        info 'Ωfstr_317', ff 0.00089\n        info 'Ωfstr_318', ff 0.0089\n        info 'Ωfstr_319', ff 0.089\n        info 'Ωfstr_320', ff 0.89\n        info 'Ωfstr_321', ff 8.9\n        info 'Ωfstr_322', ff 89\n        info 'Ωfstr_323', ff 890\n        return null\n      do =>\n        echo()\n        ff = _d3_format.formatPrefix \"_>15,.3f\", 1e0\n        scale = 1 / 1e-2\n        info 'Ωfstr_324', ff 0.00089  * scale\n        info 'Ωfstr_325', ff 0.0089   * scale\n        info 'Ωfstr_326', ff 0.089    * scale\n        info 'Ωfstr_327', ff 0.89     * scale\n        info 'Ωfstr_328', ff 8.9      * scale\n        info 'Ωfstr_329', ff 89       * scale\n        info 'Ωfstr_330', ff 890      * scale\n        return null\n    echo()\n    return null\n\n  #=========================================================================================================\n  intl_number: ->\n    { f, new_ftag, _d3_format, } = require '../../../apps/effstring'\n    { reverse: rvs } = GUY.trm\n    debug 'Ωfstr_331', 1234567891234567891\n    debug 'Ωfstr_332', f\"#{1234567891234567891}:<30.3f;\"\n    # debug 'Ωfstr_333', f\"#{1234567891234567891n}:<30.3f;\"\n    debug 'Ωfstr_334', f\"#{'1234567891234567891'}:<30.3f;\"\n    do =>\n      locale = new Intl.NumberFormat 'en-US' #, { style: 'currency', currency: 'USD', }\n      help 'Ωfstr_335', locale.resolvedOptions()\n      urge 'Ωfstr_336', locale.format 9876543210\n      for { type, value, } in locale.formatToParts 9876543210\n        debug 'Ωfstr_337', ( f\"#{type}:15c;\" ), ( rvs rpr value )\n    echo()\n    do =>\n      number  = 123456.789\n      de_DE   = new Intl.NumberFormat 'de-DE'; urge 'Ωfstr_338', rvs rpr de_DE.format number\n      en_US   = new Intl.NumberFormat 'en-US'; urge 'Ωfstr_339', rvs rpr en_US.format number\n      return null\n    # You can also specify additional options such as the style of formatting (decimal, currency, or\n    # percent), the currency to use if formatting a currency, and the number of minimum and maximum fraction\n    # digits. For instance, to format a number as a currency in US dollars:\n    amount  = 654321.987;\n    do =>\n      numberFormat = new Intl.NumberFormat 'en-US', { style: 'currency', currency: 'USD', }\n      info 'Ωfstr_340', rvs rpr numberFormat.format amount\n    do =>\n      numberFormat = new Intl.NumberFormat 'en-US', { style: 'percent', currency: 'USD', }\n      info 'Ωfstr_341', rvs rpr numberFormat.format amount\n      info 'Ωfstr_342', rvs rpr numberFormat.format 0.756789\n    do =>\n      numberFormat = new Intl.NumberFormat 'en-US', { style: 'percent', currency: 'USD', maximumSignificantDigits: 2, }\n      info 'Ωfstr_343', rvs rpr numberFormat.format amount\n      info 'Ωfstr_344', rvs rpr numberFormat.format 0.756789\n    do =>\n      # the nu extension key requests a numbering system, e.g. Chinese decimal\n      help 'Ωfstr_345', rvs rpr ( new Intl.NumberFormat 'zh-Hans-CN-u-nu-hanidec' ).format 123456.789\n      help 'Ωfstr_346', rvs rpr ( new Intl.NumberFormat 'zh-Hans-CN-u-nu-hans'    ).format 123456.789\n      help 'Ωfstr_347', rvs rpr ( new Intl.NumberFormat 'zh-Hans-CN-u-nu-hansfin' ).format 123456.789\n      help 'Ωfstr_348', rvs rpr ( new Intl.NumberFormat 'zh-Hant-TW-u-nu-hant'    ).format 123456.789\n      help 'Ωfstr_349', rvs rpr ( new Intl.NumberFormat 'zh-Hant-TW-u-nu-hantfin' ).format 123456.789\n      help 'Ωfstr_350', rvs rpr ( new Intl.NumberFormat 'roman' ).format 123456.789\n    do =>\n      # Additionally, you can use the format method of an Intl.NumberFormat instance to format a number\n      # according to the locale and formatting options of the object\n      numberFormat = new Intl.NumberFormat 'en-US'\n      info 'Ωfstr_351', rvs rpr numberFormat.format 123456.789 # \"123,456.789\"\n    return null\n\n  #=========================================================================================================\n  mantissa_exponent: ->\n    { f, new_ftag, _d3_format, } = require '../../../apps/effstring'\n    { reverse: rvs } = GUY.trm\n    do =>\n    get_mantissa_and_exponent = ( num ) ->\n      bits      = num.toString 2\n      sign      = bits is '1'\n      exponent  = parseInt( bits.slice(1, 12), 2) - 1023\n      mantissa  = '1' + bits.slice(12)\n      return { sign, exponent, mantissa, }\n    d = 123_456_789.123456789\n    e = d * 1e18; debug 'Ωfstr_352', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d * 1e12; debug 'Ωfstr_353', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d * 1e09; debug 'Ωfstr_354', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d * 1e06; debug 'Ωfstr_355', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d * 1e03; debug 'Ωfstr_356', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d;        debug 'Ωfstr_357', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d / 1e03; debug 'Ωfstr_358', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d / 1e06; debug 'Ωfstr_359', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d / 1e09; debug 'Ωfstr_360', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d / 1e12; debug 'Ωfstr_361', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    e = d / 1e18; debug 'Ωfstr_362', f\"#{e}:34,.17;\", get_mantissa_and_exponent e\n    formatter = new Intl.NumberFormat 'en-US', {\n      useGrouping:              false,\n      # minimumFractionDigits:    40,\n      # maximumFractionDigits:    40,\n      minimumSignificantDigits: 16, # max allowed value is 21\n      maximumSignificantDigits: 16, # max allowed value is 21\n      }\n    e = d * 1e200; help 'Ωfstr_363', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e100; help 'Ωfstr_364', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e50; help 'Ωfstr_365', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e44; help 'Ωfstr_366', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e41; help 'Ωfstr_367', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e39; help 'Ωfstr_368', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e36; help 'Ωfstr_369', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e33; help 'Ωfstr_370', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e30; help 'Ωfstr_371', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e27; help 'Ωfstr_372', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e24; help 'Ωfstr_373', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e21; help 'Ωfstr_374', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e18; help 'Ωfstr_375', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e15; help 'Ωfstr_376', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e12; help 'Ωfstr_377', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e09; help 'Ωfstr_378', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e06; help 'Ωfstr_379', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d * 1e03; help 'Ωfstr_380', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    echo()\n    e = d;        help 'Ωfstr_381', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    echo()\n    e = d / 1e03; help 'Ωfstr_382', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e06; help 'Ωfstr_383', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e09; help 'Ωfstr_384', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e12; help 'Ωfstr_385', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e15; help 'Ωfstr_386', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e18; help 'Ωfstr_387', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e21; help 'Ωfstr_388', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e24; help 'Ωfstr_389', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e27; help 'Ωfstr_390', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e30; help 'Ωfstr_391', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e33; help 'Ωfstr_392', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e36; help 'Ωfstr_393', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e39; help 'Ωfstr_394', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e41; help 'Ωfstr_395', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e44; help 'Ωfstr_396', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e100; help 'Ωfstr_397', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    e = d / 1e200; help 'Ωfstr_398', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    echo()\n    e = 0.1 + 0.1 + 0.1;        help 'Ωfstr_399', f\"#{formatter.format e}:>60c;\".replace /0/g, '*'\n    return null\n\n  #=========================================================================================================\n  grouping: ->\n    { f, new_ftag, _d3_format, } = require '../../../apps/effstring'\n    { reverse: rvs } = GUY.trm\n    #-------------------------------------------------------------------------------------------------------\n    # group_digits = ( text, n = 3, separator = ',' ) ->\n    #   ### TAINT validate n is integer between 1 and 100 ###\n    #   # grouping_re = /// \\B (?= ( \\d{ #{n} } )+ (?! \\d ) ) ///g\n    #   grouping_re = /// \\B (?= ( \\d{ #{n} } )+ $ ) ///g\n    #   return text.replace grouping_re, separator\n    notation = ->\n      '...,###'                   ; [ ',', 3, ]\n      '...,###,##-#:#'            ; [ ',', 3, ',', 2, '-', 1, ':', 1, ]\n      ',###'                      ; [ 0, ',', 3, ]\n      ',###,##-#:#'               ; [ 0, ',', 3, ',', 2, '-', 1, ':', 1, ]\n    #-------------------------------------------------------------------------------------------------------\n    urge 'Ωfstr_400', f\"#{group_digits '1'}:>20c;\"\n    urge 'Ωfstr_401', f\"#{group_digits '12'}:>20c;\"\n    urge 'Ωfstr_402', f\"#{group_digits '123'}:>20c;\"\n    urge 'Ωfstr_403', f\"#{group_digits '1234'}:>20c;\"\n    urge 'Ωfstr_404', f\"#{group_digits '12345'}:>20c;\"\n    urge 'Ωfstr_405', f\"#{group_digits '123456'}:>20c;\"\n    urge 'Ωfstr_406', f\"#{group_digits '1234567'}:>20c;\"\n    urge 'Ωfstr_407', f\"#{group_digits '12345678'}:>20c;\"\n    urge 'Ωfstr_408', f\"#{group_digits '123456789'}:>20c;\"\n    urge 'Ωfstr_409', f\"#{group_digits '1234567890'}:>20c;\"\n    #-------------------------------------------------------------------------------------------------------\n    class TOBEDONE_Error extends Error\n    #-------------------------------------------------------------------------------------------------------\n    walk_group_steps = ( grouping_cfg, chr_count ) ->\n      ### assuming grouping_cfg has been validated ###\n      ### TAINT consider to use `grouping_cfg.at -1` &c ###\n      ### TAINT validate chr_count ###\n      return null if chr_count < 1\n      chr_idx   = chr_count\n      group_idx = grouping_cfg.length - 2\n      repeat    = grouping_cfg[ 0 ] isnt 0\n      loop\n        [ marker, delta, ] = grouping_cfg[ group_idx .. group_idx + 1 ]\n        ### for safety only, should never happen with validated grouping_cfg: ###\n        throw new TOBEDONE_Error \"delta is zero or less\" if delta < 1\n        chr_idx -= delta\n        break if chr_idx <= 0\n        yield { marker, delta, chr_idx, }\n        if repeat\n          group_idx -= 2 if group_idx > 1\n        else\n          break if group_idx < 1\n          group_idx -= 2\n      return null\n    #-------------------------------------------------------------------------------------------------------\n    demo_grouping = ( text, grouping_cfg ) ->\n      # [...new Intl.Segmenter().segment( text )].map(s => s.segment)\n      urge 'Ωfstr_410', rpr grouping_cfg.join ''\n      chrs = Array.from text\n      for insertion from walk_group_steps grouping_cfg, chrs.length\n        chrs.splice insertion.chr_idx, 0, insertion.marker\n      return chrs.join ''\n    #-------------------------------------------------------------------------------------------------------\n    do =>\n      info 'Ωfstr_411', demo_grouping '98765432109876543210', [     ',', 3, ',', 2, '-', 1, ':', 1, ]\n      info 'Ωfstr_412', demo_grouping '98765432109876543210', [ 0,  ',', 3, ',', 2, '-', 1, ':', 1, ]\n      info 'Ωfstr_413', demo_grouping '98765432109876543210', [     ',', 1,                         ]\n      info 'Ωfstr_414', demo_grouping '98765432109876543210', [     ',', 2,                         ]\n      info 'Ωfstr_415', demo_grouping '98765432109876543210', [     ',', 3,                         ]\n      info 'Ωfstr_416', demo_grouping '98765432109876543210', [     ',', 4,                         ]\n      info 'Ωfstr_417', demo_grouping '98765432109876543210', [     ',', 5,                         ]\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  all_tasks = { intertype_tasks: @intertype_tasks, future_intertype_tasks: @future_intertype_tasks, }\n  # ( new Test guytest_cfg ).test all_tasks\n  ( new Test guytest_cfg ).test @intertype_tasks\n  ( new Test guytest_cfg ).test { ansi_escapes_and_widths: @intertype_tasks.ansi_escapes_and_widths, }\n  # ( new Test guytest_cfg ).test @future_intertype_tasks\n  # ( new Test { throw_on_error: true, } ).test @intertype_tasks\n  # ( new Test { throw_on_error: false, } ).test @intertype_tasks\n  # ( new Test { throw_on_error: false, } ).test { si_units_format_specifier: @intertype_tasks.si_units_format_specifier, }\n  # ( new Test() ).test demo\n  # demo.README()\n  # demo.intl_number()\n  # demo.mantissa_exponent()\n  # demo.grouping()\n\n"
  ]
}