{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-ltsort-cfg-example.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Cleartype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nget_typespaces = ->\n  { CT, \\\n    std } = require '../../../apps/cleartype'\n  #.........................................................................................................\n  lt_types =\n    #.........................................................................................................\n    lt_nodelist:\n      $isa: ( x ) ->\n        # 'list.of.nonempty.text'\n        return false unless @ct.isa std.list, x\n        return x.every ( e ) => @ct.isa std.nonempty_text, e\n      $create: ( x ) ->\n        return x if x?\n        return []\n    #.........................................................................................................\n    lt_constructor_cfg:\n      $isa: ( x ) ->\n        return false unless @ct.isa std.object, x\n        return false unless @ct.isa @me.loners, x.loners\n        return true\n      loners:\n        $isa:       ( x ) -> @ct.isa std.boolean, x\n      $template:\n        loners:     true\n      $create: ( x ) ->\n        return x unless @ct.isa_optional std.object, x\n        return { @me.$template..., x..., }\n    #.........................................................................................................\n    lt_add_cfg:\n      $isa: ( x ) ->\n        return false unless @ct.isa std.object,   x\n        return false unless @ct.isa @me.name,     x.name\n        return false unless @ct.isa @me.precedes, x.precedes\n        return false unless @ct.isa @me.needs,    x.needs\n        return true\n      $create: ( x ) ->\n        return x unless @ct.isa_optional std.object, x\n        return { @me.$template..., x..., }\n      #.....................................................................................................\n      name:         $isa: ( x ) -> @ct.isa std.nonempty_text,             x\n      precedes:     $isa: ( x ) -> @ct.isa_optional lt_types.lt_nodelist, x\n      needs:        $isa: ( x ) -> @ct.isa_optional lt_types.lt_nodelist, x\n      $template:\n        name:       null\n        precedes:   null\n        needs:      null\n    #.........................................................................................................\n    lt_linearize_cfg:\n      $isa: ( x ) ->\n        return false unless @ct.isa std.object, x\n        return false unless @ct.isa @me.groups, x.groups\n        return true\n      $create: ( x ) ->\n        return x unless @ct.isa_optional std.object, x\n        return { @me.$template..., x..., }\n      #.....................................................................................................\n      groups:\n        $isa:       ( x ) -> @ct.isa std.boolean, x\n      $template:\n        groups:     false\n  #.........................................................................................................\n  return { lt_types, }\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@cleartype_tasks =\n\n  # #=========================================================================================================\n  # lt_types:\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   lt_constructor_cfg: ->\n  #     { Cleartype\n  #       std } = require '../../../apps/cleartype'\n  #     { lt_types }  = get_typespaces()\n  #     { isa\n  #       isa_optional\n  #       create\n  #       validate\n  #       validate_optional } = require '../../../apps/cleartype'\n  #     #.....................................................................................................\n  #     @eq (     Ωctt_103 = -> isa               lt_types.lt_constructor_cfg, 337465             ), false\n  #     @eq (     Ωctt_104 = -> isa_optional      lt_types.lt_constructor_cfg, 337465             ), false\n  #     @eq (     Ωctt_105 = -> isa_optional      lt_types.lt_constructor_cfg, null               ), true\n  #     @eq (     Ωctt_106 = -> create            lt_types.lt_constructor_cfg, undefined          ), { loners: true, }\n  #     @throws ( Ωctt_107 = -> create            lt_types.lt_constructor_cfg, { loners: 7, }     ), /validation error/\n  #     @eq (     Ωctt_108 = -> validate_optional lt_types.lt_constructor_cfg, { loners: true, }  ), { loners: true, }\n  #     @eq (     Ωctt_109 = -> validate_optional lt_types.lt_constructor_cfg, null               ), null\n  #     @eq (     Ωctt_110 = -> validate          lt_types.lt_constructor_cfg, { loners: true, }  ), { loners: true, }\n  #     @throws ( Ωctt_111 = -> validate          lt_types.lt_constructor_cfg, { loners: 8, }     ), /validation error/\n  #     @throws ( Ωctt_112 = -> validate_optional lt_types.lt_constructor_cfg, { loners: 8, }     ), /validation error/\n  #     #.....................................................................................................\n  #     return null\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   lt_nodelist: ->\n  #     { Cleartype\n  #       std } = require '../../../apps/cleartype'\n  #     { lt_types }  = get_typespaces()\n  #     { isa\n  #       isa_optional\n  #       create\n  #       validate\n  #       validate_optional } = require '../../../apps/cleartype'\n  #     #.....................................................................................................\n  #     @eq (     Ωctt_113 = -> isa               lt_types.lt_nodelist, 337465              ), false\n  #     @eq (     Ωctt_114 = -> isa               lt_types.lt_nodelist, []                  ), true\n  #     @eq (     Ωctt_115 = -> isa               lt_types.lt_nodelist, [ 'name', ]         ), true\n  #     @eq (     Ωctt_116 = -> isa               lt_types.lt_nodelist, [ 'name', 3, ]      ), false\n  #     @eq (     Ωctt_117 = -> isa_optional      lt_types.lt_nodelist, 337465              ), false\n  #     @eq (     Ωctt_118 = -> isa_optional      lt_types.lt_nodelist, null                ), true\n  #     @eq (     Ωctt_119 = -> create            lt_types.lt_nodelist, undefined           ), []\n  #     @throws ( Ωctt_120 = -> create            lt_types.lt_nodelist, { loners: 7, }      ), /validation error/\n  #     @eq (     Ωctt_121 = -> validate_optional lt_types.lt_nodelist, []                  ), []\n  #     @eq (     Ωctt_122 = -> validate_optional lt_types.lt_nodelist, null                ), null\n  #     # @eq (     Ωctt_123 = -> validate          lt_types.lt_nodelist, { loners: true, }  ), { loners: true, }\n  #     # @throws ( Ωctt_124 = -> validate          lt_types.lt_nodelist, { loners: 8, }     ), /validation error/\n  #     # @throws ( Ωctt_125 = -> validate_optional lt_types.lt_nodelist, { loners: 8, }     ), /validation error/\n  #     #.....................................................................................................\n  #     return null\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   lt_add_cfg: ->\n  #     { Cleartype\n  #       std } = require '../../../apps/cleartype'\n  #     { lt_types }  = get_typespaces()\n  #     { isa\n  #       isa_optional\n  #       create\n  #       validate\n  #       validate_optional } = require '../../../apps/cleartype'\n  #     #.....................................................................................................\n  #     @eq (     Ωctt_126 = -> isa               lt_types.lt_add_cfg.name, 337465              ), false\n  #     @eq (     Ωctt_127 = -> isa               lt_types.lt_add_cfg.name, ''                  ), false\n  #     @eq (     Ωctt_128 = -> isa               lt_types.lt_add_cfg.name, 'foo'               ), true\n  #     @eq (     Ωctt_129 = -> isa               lt_types.lt_add_cfg.needs, 337465             ), false\n  #     @eq (     Ωctt_130 = -> isa               lt_types.lt_add_cfg.needs, [ 337465, ]        ), false\n  #     @eq (     Ωctt_131 = -> isa               lt_types.lt_add_cfg.needs, [ '337465', ]      ), true\n  #     @eq (     Ωctt_132 = -> isa               lt_types.lt_add_cfg.needs, []                 ), true\n  #     @eq (     Ωctt_133 = -> isa               lt_types.lt_add_cfg.precedes, 337465          ), false\n  #     @eq (     Ωctt_134 = -> isa               lt_types.lt_add_cfg.precedes, [ 337465, ]     ), false\n  #     @eq (     Ωctt_135 = -> isa               lt_types.lt_add_cfg.precedes, []              ), true\n  #     @eq (     Ωctt_136 = -> isa               lt_types.lt_add_cfg.precedes, [ '337465', ]   ), true\n  #     @eq (     Ωctt_137 = -> isa               lt_types.lt_add_cfg, 337465                   ), false\n  #     @eq (     Ωctt_138 = -> isa               lt_types.lt_add_cfg, {}                       ), false\n  #     @eq (     Ωctt_139 = -> isa               lt_types.lt_add_cfg, { name: 'g', precedes: null, needs: null     }    ), true\n  #     @eq (     Ωctt_140 = -> isa               lt_types.lt_add_cfg, { name: 'g', precedes: [], needs: [ 'name', ]     }    ), true\n  #     @eq (     Ωctt_141 = -> isa               lt_types.lt_add_cfg, { name: 'g', precedes: [], needs: [ 'name', 3, ]  }    ), false\n  #     @eq (     Ωctt_142 = -> create            lt_types.lt_add_cfg, { name: 'g', precedes: [], needs: [ 'name', ]     }    ), { name: 'g', precedes: [], needs: [ 'name', ]  }\n  #     @eq (     Ωctt_143 = -> create            lt_types.lt_add_cfg, { name: 'g',                                      }    ), { name: 'g', precedes: null, needs: null  }\n  #     # @eq (     Ωctt_144 = -> isa_optional      lt_types.lt_add_cfg, 337465              ), false\n  #     # @eq (     Ωctt_145 = -> isa_optional      lt_types.lt_add_cfg, null                ), true\n  #     # @eq (     Ωctt_146 = -> create            lt_types.lt_add_cfg, undefined           ), []\n  #     # @throws ( Ωctt_147 = -> create            lt_types.lt_add_cfg, { loners: 7, }      ), /validation error/\n  #     # @eq (     Ωctt_148 = -> validate_optional lt_types.lt_add_cfg, []                  ), []\n  #     # @eq (     Ωctt_149 = -> validate_optional lt_types.lt_add_cfg, null                ), null\n  #     # @eq (     Ωctt_150 = -> validate          lt_types.lt_add_cfg, { loners: true, }  ), { loners: true, }\n  #     # @throws ( Ωctt_151 = -> validate          lt_types.lt_add_cfg, { loners: 8, }     ), /validation error/\n  #     # @throws ( Ωctt_152 = -> validate_optional lt_types.lt_add_cfg, { loners: 8, }     ), /validation error/\n  #     #.....................................................................................................\n  #     return null\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   lt_linearize_cfg: ->\n  #     { Cleartype\n  #       std } = require '../../../apps/cleartype'\n  #     { lt_types }  = get_typespaces()\n  #     { isa\n  #       isa_optional\n  #       create\n  #       validate\n  #       validate_optional } = require '../../../apps/cleartype'\n  #     #.....................................................................................................\n  #     @eq (     Ωctt_153 = -> isa               lt_types.lt_linearize_cfg, 337465                   ), false\n  #     @eq (     Ωctt_154 = -> isa               lt_types.lt_linearize_cfg, {}                       ), false\n  #     @eq (     Ωctt_155 = -> isa               lt_types.lt_linearize_cfg, { groups: 5, }           ), false\n  #     @eq (     Ωctt_156 = -> isa               lt_types.lt_linearize_cfg, { groups: true, }        ), true\n  #     @eq (     Ωctt_157 = -> isa               lt_types.lt_linearize_cfg, { groups: false, }       ), true\n  #     @eq (     Ωctt_158 = -> create            lt_types.lt_linearize_cfg, { groups: true,  }       ), { groups: true, }\n  #     @eq (     Ωctt_159 = -> create            lt_types.lt_linearize_cfg, { groups: false, }       ), { groups: false, }\n  #     @eq (     Ωctt_160 = -> create            lt_types.lt_linearize_cfg, {}                       ), { groups: false, }\n  #     @eq (     Ωctt_161 = -> create            lt_types.lt_linearize_cfg, null                     ), { groups: false, }\n  #     #.....................................................................................................\n  #     return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test @cleartype_tasks\n"
  ]
}