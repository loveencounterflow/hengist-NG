{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Cleartype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nget_typespaces = ->\n  { CT, \\\n    TMP_typespace1: std }   = require '../../../apps/cleartype'\n  #.........................................................................................................\n  lt_types =\n    #.........................................................................................................\n    lt_nodelist:\n      $isa: ( x ) ->\n        # 'list.of.nonempty.text'\n        return false unless @types.isa std.list, x\n        return x.every ( e ) -> @types.isa std.nonempty_text, e\n    #.........................................................................................................\n    lt_constructor_cfg:\n      $isa: ( x ) ->\n        return false unless @types.isa std.object, x\n        return false unless @types.isa @me.loners, x.loners\n        return true\n      loners:\n        $isa:       ( x ) -> @types.isa std.boolean, x\n      $template:\n        loners:     true\n      $create: ( x ) ->\n        return x unless @types.isa_optional std.object, x\n        return { @me.$template..., x..., }\n    #.........................................................................................................\n    lt_add_cfg:\n      $isa: ( x ) ->\n        return false unless @types.isa std.object, x\n        return false unless @types.isa @me.name,     x.name\n        return false unless @types.isa @me.precedes, x.precedes\n        return false unless @types.isa @me.needs,    x.needs\n        return true\n      $create: ( x ) ->\n        return x unless @types.isa_optional std.object, x\n        return { @me.$template..., x..., }\n      #.....................................................................................................\n      name:         $isa: ( x ) -> @types.isa std.nonempty_text\n      precedes:     $isa: ( x ) -> @types.isa_optional lt_types.lt_nodelist\n      needs:        $isa: ( x ) -> @types.isa_optional lt_types.lt_nodelist\n      $template:\n        name:       null\n        precedes:   null\n        needs:      null\n    #.........................................................................................................\n    lt_linearize_cfg:\n      $isa: ( x ) ->\n        return false unless @types.isa std.object, x\n        return false unless @types.isa @me.groups, x.groups\n        return true\n      $create: ( x ) ->\n        return x unless @types.isa_optional std.object, x\n        return { @me.$template..., x..., }\n      #.....................................................................................................\n      groups:\n        $isa:       ( x ) -> @types.isa std.boolean, x\n      $template:\n        groups:     false\n  #.........................................................................................................\n  return { lt_types, }\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@cleartype_tasks =\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    builtins: ->\n      { Cleartype\n        TMP_typespace1 } = require '../../../apps/cleartype'\n      ct = new Cleartype()\n      #.....................................................................................................\n      @eq ( Ωctt___1 = -> ct.isa TMP_typespace1.primitive, 1          ), true\n      @eq ( Ωctt___2 = -> ct.isa TMP_typespace1.primitive, true       ), true\n      @eq ( Ωctt___3 = -> ct.isa TMP_typespace1.primitive, false      ), true\n      @eq ( Ωctt___4 = -> ct.isa TMP_typespace1.primitive, null       ), true\n      @eq ( Ωctt___5 = -> ct.isa TMP_typespace1.primitive, undefined  ), true\n      @eq ( Ωctt___6 = -> ct.isa TMP_typespace1.primitive, 'text'     ), true\n      @eq ( Ωctt___7 = -> ct.isa TMP_typespace1.primitive, []         ), false\n      @eq ( Ωctt___8 = -> ct.isa TMP_typespace1.primitive, {}         ), false\n      @eq ( Ωctt___9 = -> ct.isa TMP_typespace1.primitive, ( -> )     ), false\n      @eq ( Ωctt__10 = -> ct.isa TMP_typespace1.primitive, ( => )     ), false\n      #.....................................................................................................\n      @eq ( Ωctt__11 = -> ct.isa TMP_typespace1.integer, 1            ), true\n      @eq ( Ωctt__12 = -> ct.isa TMP_typespace1.integer, 1.1          ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    isa: ->\n      { Cleartype\n        TMP_typespace1 } = require '../../../apps/cleartype'\n      tt      = new Cleartype()\n      { lt_types }  = get_typespaces()\n      #.....................................................................................................\n      @eq ( Ωctt__13 = -> tt.isa TMP_typespace1.float, true                       ), false\n      @eq ( Ωctt__14 = -> tt.isa TMP_typespace1.float, '3'                        ), false\n      @eq ( Ωctt__15 = -> tt.isa TMP_typespace1.float, 337465                     ), true\n      @eq ( Ωctt__16 = -> tt.isa lt_types.lt_constructor_cfg, 337465                    ), false\n      @eq ( Ωctt__17 = -> tt.isa lt_types.lt_constructor_cfg, {}                        ), false\n      @eq ( Ωctt__18 = -> tt.isa lt_types.lt_constructor_cfg, { loners: 8, }            ), false\n      @eq ( Ωctt__19 = -> tt.isa lt_types.lt_constructor_cfg, { loners: true, }         ), true\n      do =>\n        contexts = new Set tt._contexts.keys()\n        @eq ( Ωctt__20 = -> contexts.has TMP_typespace1.float                     ), true\n        @eq ( Ωctt__21 = -> contexts.has lt_types.lt_constructor_cfg                    ), true\n        @eq ( Ωctt__22 = -> contexts.has lt_types.lt_constructor_cfg.loners             ), true\n        @eq ( Ωctt__23 = -> contexts.has TMP_typespace1.text                      ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    create: ->\n      { Cleartype\n        TMP_typespace1 } = require '../../../apps/cleartype'\n      tt      = new Cleartype()\n      { lt_types }  = get_typespaces()\n      #.....................................................................................................\n      @eq ( Ωctt__24 = -> tt.create lt_types.lt_constructor_cfg                         ), { loners: true, }\n      @eq ( Ωctt__25 = -> tt.create lt_types.lt_constructor_cfg, null                   ), { loners: true, }\n      @eq ( Ωctt__26 = -> tt.create lt_types.lt_constructor_cfg, undefined              ), { loners: true, }\n      @throws ( Ωctt__27 = -> tt.create    lt_types.lt_constructor_cfg, { loners: 7, } ), /validation error/\n      do =>\n        contexts = new Set tt._contexts.keys()\n        @eq ( Ωctt__28 = -> contexts.has lt_types.lt_constructor_cfg                    ), true\n        @eq ( Ωctt__29 = -> contexts.has lt_types.lt_constructor_cfg.loners             ), true\n        @eq ( Ωctt__30 = -> contexts.has TMP_typespace1.text                      ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    validate: ->\n      { Cleartype\n        TMP_typespace1 } = require '../../../apps/cleartype'\n      tt      = new Cleartype()\n      { lt_types }  = get_typespaces()\n      #.....................................................................................................\n      @eq ( Ωctt__31 = -> tt.validate lt_types.lt_constructor_cfg, { loners: true, }    ), { loners: true, }\n      @throws ( Ωctt__32 = -> tt.validate  lt_types.lt_constructor_cfg, { loners: 8, }  ), /validation error/\n      do =>\n        contexts = new Set tt._contexts.keys()\n        @eq ( Ωctt__33 = -> contexts.has lt_types.lt_constructor_cfg                    ), true\n        @eq ( Ωctt__34 = -> contexts.has lt_types.lt_constructor_cfg.loners             ), true\n        @eq ( Ωctt__35 = -> contexts.has TMP_typespace1.text                      ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    instance_methods_are_bound: ->\n      { Cleartype\n        TMP_typespace1 } = require '../../../apps/cleartype'\n      { lt_types }  = get_typespaces()\n      { isa\n        isa_optional\n        create\n        validate\n        validate_optional } = new Cleartype()\n      #.....................................................................................................\n      @eq (     Ωctt__36 = -> isa       TMP_typespace1.float, 337465              ), true\n      @eq (     Ωctt__37 = -> isa       lt_types.lt_constructor_cfg, 337465             ), false\n      @eq (     Ωctt__38 = -> create    lt_types.lt_constructor_cfg, undefined          ), { loners: true, }\n      @throws ( Ωctt__39 = -> create    lt_types.lt_constructor_cfg, { loners: 7, }     ), /validation error/\n      @eq (     Ωctt__40 = -> validate  lt_types.lt_constructor_cfg, { loners: true, }  ), { loners: true, }\n      @throws ( Ωctt__41 = -> validate  lt_types.lt_constructor_cfg, { loners: 8, }     ), /validation error/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    exported_methods_are_bound: ->\n      { Cleartype\n        TMP_typespace1 } = require '../../../apps/cleartype'\n      { lt_types }  = get_typespaces()\n      { isa\n        isa_optional\n        create\n        validate\n        validate_optional } = require '../../../apps/cleartype'\n      #.....................................................................................................\n      @eq (     Ωctt__42 = -> isa       TMP_typespace1.float, 337465              ), true\n      @eq (     Ωctt__43 = -> isa       lt_types.lt_constructor_cfg, 337465             ), false\n      @eq (     Ωctt__44 = -> create    lt_types.lt_constructor_cfg, undefined          ), { loners: true, }\n      @throws ( Ωctt__45 = -> create    lt_types.lt_constructor_cfg, { loners: 7, }     ), /validation error/\n      @eq (     Ωctt__46 = -> validate  lt_types.lt_constructor_cfg, { loners: true, }  ), { loners: true, }\n      @throws ( Ωctt__47 = -> validate  lt_types.lt_constructor_cfg, { loners: 8, }     ), /validation error/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    exported_methods_can_accessed_via_CT: ->\n      { CT\n        isa\n        isa_optional\n        create\n        validate\n        validate_optional } = require '../../../apps/cleartype'\n      #.....................................................................................................\n      @eq ( Ωctt__48 = -> isa               is CT.isa               ), true\n      @eq ( Ωctt__49 = -> isa_optional      is CT.isa_optional      ), true\n      @eq ( Ωctt__50 = -> validate          is CT.validate          ), true\n      @eq ( Ωctt__51 = -> validate_optional is CT.validate_optional ), true\n      @eq ( Ωctt__52 = -> create            is CT.create            ), true\n      #.....................................................................................................\n      return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @cleartype_tasks\n  # ( new Test { throw_on_error: true, } ).test { mvp_isa: @cleartype_tasks.MVP.isa, }\n  # ( new Test { throw_on_error: true, } ).test { instance_methods_are_bound: @cleartype_tasks.basics.instance_methods_are_bound, }\n\n  ->\n    d =\n      a: ->\n        foo: 1\n        bar: 2\n    debug 'Ωctt__53', d\n    debug 'Ωctt__54', d.a\n    debug 'Ωctt__55', d.a.name\n    debug 'Ωctt__56', d.a()\n"
  ]
}