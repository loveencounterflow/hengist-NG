(async function() {
  'use strict';
  var GTNG, GUY, Test, abbrlxm, alert, condense_lexemes, debug, echo, f, help, info, inspect, log, plain, praise, reverse, rpr, tabulate_lexeme, tabulate_lexemes, urge, warn, whisper;

  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('interlex/test-basics'));

  ({rpr, inspect, echo, reverse, log} = GUY.trm);

  // WGUY                      = require '../../../apps/webguy'
  GTNG = require('../../../apps/guy-test-NG');

  ({Test} = GTNG);

  ({f} = require('../../../apps/effstring'));

  ({condense_lexemes, abbrlxm, tabulate_lexemes, tabulate_lexeme} = require('./helpers'));

  // { internals: ct_internals
  //   isa
  //   std
  //   type_of               } = require '../../../apps/cleartype'

  //###########################################################################################################

  //===========================================================================================================
  this.interlex_tasks = {
    //=========================================================================================================
    hollerith: {
      //-------------------------------------------------------------------------------------------------------
      h10mvp2: function() {
        var Grammar, Lexeme, Token, cfg, compile_sortkey_lexer, constants_10mvp2, i, j, len, len1, letters, lexeme, lexeme_matcher, lexeme_result, lexemes, lexer, list_matcher, mantissa, name, probe, probes_and_matchers, ref, ref1, regex, Ωilxhol___4;
        ({Grammar, Token, Lexeme} = require('../../../apps/interlex'));
        ({regex} = require('regex'));
        //.....................................................................................................
        cfg = constants_10mvp2 = Object.freeze({
          max_integer: +999,
          min_integer: -999,
          // MLKJIHGFEDCBA
          // N XYZ
          zpuns: 'NOPQRSTUVW', // zero and positive uniliteral numbers
          nuns: 'EFGHIJKLM', // negative          uniliteral numbers
          zpun_max: +9,
          nun_min: -9,
          zero_pad_length: 3,
          alphabet: '0123456789',
          pmag: '  XYZ', // positive 'magnifier' for 1 to 8 positive digits
          nmag: '  CBA', // negative 'magnifier' for 1 to 8 negative digits
          nlead_re: /^9*(?=[0-9])/ // 'negative leader', discardable leading digits of lifted negative numbers
        });
        //.....................................................................................................
        compile_sortkey_lexer = function(cfg) {
          var R, alphabet, first, fit_nnum, fit_nun, fit_pnum, fit_zero, fit_zpun, nmag, nuns, pmag, zero, zpuns;
          ({nuns, zpuns, nmag, pmag, alphabet} = cfg);
          //...................................................................................................
          zero = zpuns[0];
          zpuns = zpuns.slice(1);
          nmag = nmag.slice(1);
          pmag = pmag.slice(1);
          //...................................................................................................
          fit_nun = regex`(?<letters> [ ${nuns} ]   )                                  `;
          fit_zpun = regex`(?<letters> [ ${zpuns} ]   )                                  `;
          fit_nnum = regex`(?<letters> [ ${nmag} ]   ) (?<mantissa> [ ${alphabet}  ]* ) `;
          fit_pnum = regex`(?<letters> [ ${pmag} ]   ) (?<mantissa> [ ${alphabet}  ]* ) `;
          fit_zero = regex`(?<letters> [ ${zero} ]+  )                                  `;
          //...................................................................................................
          R = new Grammar({
            emit_signals: false
          });
          first = R.new_level({
            name: 'first'
          });
          first.new_token({
            name: 'nun',
            fit: fit_nun
          });
          first.new_token({
            name: 'zpun',
            fit: fit_zpun
          });
          first.new_token({
            name: 'nnum',
            fit: fit_nnum
          });
          first.new_token({
            name: 'pnum',
            fit: fit_pnum
          });
          first.new_token({
            name: 'zero',
            fit: fit_zero
          });
          first.new_token({
            name: 'other',
            fit: /./,
            merge: true
          });
          //...................................................................................................
          return R;
        };
        //.....................................................................................................
        probes_and_matchers = [['B000NNNNNN', [-999], 'nnum:B,000|zero:NNNNNN'], ['C00NNNNNNN', [-99], 'nnum:C,00|zero:NNNNNNN'], ['C09NNNNNNN', [-90], 'nnum:C,09|zero:NNNNNNN'], ['C88NNNNNNN', [-11], 'nnum:C,88|zero:NNNNNNN'], ['C89NNNNNNN', [-10], 'nnum:C,89|zero:NNNNNNN'], ['ENNNNNNNNN', [-9], 'nun:E|zero:NNNNNNNNN'], ['FNNNNNNNNN', [-8], 'nun:F|zero:NNNNNNNNN'], ['GNNNNNNNNN', [-7], 'nun:G|zero:NNNNNNNNN'], ['HNNNNNNNNN', [-6], 'nun:H|zero:NNNNNNNNN'], ['INNNNNNNNN', [-5], 'nun:I|zero:NNNNNNNNN'], ['JNNNNNNNNN', [-4], 'nun:J|zero:NNNNNNNNN'], ['KNNNNNNNNN', [-3], 'nun:K|zero:NNNNNNNNN'], ['LNNNNNNNNN', [-2], 'nun:L|zero:NNNNNNNNN'], ['MNNNNNNNNN', [-1], 'nun:M|zero:NNNNNNNNN'], ['NC79NNNNNN', [0, -20], 'zero:N|nnum:C,79|zero:NNNNNN'], ['NNNNNNNNNN', [0], 'zero:NNNNNNNNNN'], ['NX20NNNNNN', [0, 20], 'zero:N|pnum:X,20|zero:NNNNNN'], ['WNNNNNNNNN', [9], 'zpun:W|zero:NNNNNNNNN'], ['X10KNNNNNN', [10, -3], 'pnum:X,10|nun:K|zero:NNNNNN'], ['X10LNNNNNN', [10, -2], 'pnum:X,10|nun:L|zero:NNNNNN'], ['X10MNNNNNN', [10, -1], 'pnum:X,10|nun:M|zero:NNNNNN'], ['X10NNNNNNN', [10], 'pnum:X,10|zero:NNNNNNN'], ['X10NNNNNNN', [10, 0], 'pnum:X,10|zero:NNNNNNN'], ['X10ONNNNNN', [10, 1], 'pnum:X,10|zpun:O|zero:NNNNNN'], ['X10X10MNNN', [10, 10, -1], 'pnum:X,10|pnum:X,10|nun:M|zero:NNN'], ['X10X10NNNN', [10, 10], 'pnum:X,10|pnum:X,10|zero:NNNN'], ['X10X20NNNN', [10, 20], 'pnum:X,10|pnum:X,20|zero:NNNN'], ['X20NNNNNNN', [20], 'pnum:X,20|zero:NNNNNNN'], ['X20X10NNNN', [20, 10], 'pnum:X,20|pnum:X,10|zero:NNNN'], ['X90NNNNNNN', [90], 'pnum:X,90|zero:NNNNNNN'], ['Y900NNNNNN', [900], 'pnum:Y,900|zero:NNNNNN']];
        //.....................................................................................................
        lexer = compile_sortkey_lexer(cfg);
        lexemes = lexer.scan_to_list('5');
        tabulate_lexemes(lexemes);
        lexemes = lexer.scan_to_list('N');
        tabulate_lexemes(lexemes);
        lexemes = lexer.scan_to_list('N');
        tabulate_lexemes(lexemes);
        for (i = 0, len = probes_and_matchers.length; i < len; i++) {
          [probe, list_matcher, lexeme_matcher] = probes_and_matchers[i];
          // urge 'Ωilxhol___1', rpr probe
          lexemes = [];
          lexeme_result = [];
          ref = lexer.scan_to_list(probe);
          for (j = 0, len1 = ref.length; j < len1; j++) {
            lexeme = ref[j];
            name = lexeme.name;
            letters = lexeme.data.letters;
            mantissa = (ref1 = lexeme.data.mantissa) != null ? ref1 : null;
            lexemes.push({name, letters, mantissa});
            lexeme_result.push(mantissa != null ? `${name}:${letters},${mantissa}` : `${name}:${letters}`);
          }
          lexeme_result = lexeme_result.join('|');
          // tabulate_lexemes lexemes
          // debug 'Ωilxhol___2', lexeme for lexeme in lexemes
          info('Ωilxhol___3', rpr(lexeme_result));
          this.eq((Ωilxhol___4 = function() {
            return lexeme_result;
          }), lexeme_matcher);
        }
        //.....................................................................................................
        return null;
      }
    }
  };

  //===========================================================================================================
  if (module === require.main) {
    await (() => {
      var guytest_cfg;
      guytest_cfg = {
        throw_on_error: false,
        show_passes: false,
        report_checks: false
      };
      guytest_cfg = {
        throw_on_error: true,
        show_passes: false,
        report_checks: false
      };
      // guytest_cfg = { throw_on_error: false, show_passes: true, report_checks: true, }
      return (new Test(guytest_cfg)).test(this.interlex_tasks);
    })();
  }

  // ( new Test guytest_cfg ).test { linking: @interlex_tasks.linking, }
// ( new Test guytest_cfg ).test { flexible_new_token_syntax: @interlex_tasks.basics.flexible_new_token_syntax, }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rlc3QtaG9sbGVyaXRoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBO0FBQUEsTUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLGdCQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxlQUFBLEVBQUEsZ0JBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBOztFQUlBLEdBQUEsR0FBNEIsT0FBQSxDQUFRLEtBQVI7O0VBQzVCLENBQUEsQ0FBRSxLQUFGLEVBQ0UsS0FERixFQUVFLElBRkYsRUFHRSxJQUhGLEVBSUUsS0FKRixFQUtFLE1BTEYsRUFNRSxJQU5GLEVBT0UsSUFQRixFQVFFLE9BUkYsQ0FBQSxHQVE0QixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVIsQ0FBb0Isc0JBQXBCLENBUjVCOztFQVNBLENBQUEsQ0FBRSxHQUFGLEVBQ0UsT0FERixFQUVFLElBRkYsRUFHRSxPQUhGLEVBSUUsR0FKRixDQUFBLEdBSTRCLEdBQUcsQ0FBQyxHQUpoQyxFQWRBOzs7RUFvQkEsSUFBQSxHQUE0QixPQUFBLENBQVEsMkJBQVI7O0VBQzVCLENBQUEsQ0FBRSxJQUFGLENBQUEsR0FBNEIsSUFBNUI7O0VBQ0EsQ0FBQSxDQUFFLENBQUYsQ0FBQSxHQUE0QixPQUFBLENBQVEseUJBQVIsQ0FBNUI7O0VBQ0EsQ0FBQSxDQUFFLGdCQUFGLEVBQ0UsT0FERixFQUVFLGdCQUZGLEVBR0UsZUFIRixDQUFBLEdBRzRCLE9BQUEsQ0FBUSxXQUFSLENBSDVCLEVBdkJBOzs7Ozs7Ozs7O0VBb0NBLElBQUMsQ0FBQSxjQUFELEdBR0UsQ0FBQTs7SUFBQSxTQUFBLEVBSUUsQ0FBQTs7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ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2d1eSdcbnsgYWxlcnRcbiAgZGVidWdcbiAgaGVscFxuICBpbmZvXG4gIHBsYWluXG4gIHByYWlzZVxuICB1cmdlXG4gIHdhcm5cbiAgd2hpc3BlciB9ICAgICAgICAgICAgICAgPSBHVVkudHJtLmdldF9sb2dnZXJzICdpbnRlcmxleC90ZXN0LWJhc2ljcydcbnsgcnByXG4gIGluc3BlY3RcbiAgZWNob1xuICByZXZlcnNlXG4gIGxvZyAgICAgfSAgICAgICAgICAgICAgID0gR1VZLnRybVxuIyBXR1VZICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy93ZWJndXknXG5HVE5HICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9ndXktdGVzdC1ORydcbnsgVGVzdCAgICAgICAgICAgICAgICAgIH0gPSBHVE5HXG57IGYgfSAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9lZmZzdHJpbmcnXG57IGNvbmRlbnNlX2xleGVtZXNcbiAgYWJicmx4bVxuICB0YWJ1bGF0ZV9sZXhlbWVzXG4gIHRhYnVsYXRlX2xleGVtZSAgICAgICB9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuIyB7IGludGVybmFsczogY3RfaW50ZXJuYWxzXG4jICAgaXNhXG4jICAgc3RkXG4jICAgdHlwZV9vZiAgICAgICAgICAgICAgIH0gPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2NsZWFydHlwZSdcblxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiNcbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuQGludGVybGV4X3Rhc2tzID1cblxuICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGhvbGxlcml0aDpcblxuXG4gICAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBoMTBtdnAyOiAtPlxuICAgICAgeyBHcmFtbWFyXG4gICAgICAgIFRva2VuXG4gICAgICAgIExleGVtZSB9ID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9pbnRlcmxleCdcbiAgICAgIHsgcmVnZXgsIH0gPSByZXF1aXJlICdyZWdleCdcbiAgICAgICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICAgICAgY2ZnID0gY29uc3RhbnRzXzEwbXZwMiA9IE9iamVjdC5mcmVlemVcbiAgICAgICAgbWF4X2ludGVnZXI6ICArOTk5XG4gICAgICAgIG1pbl9pbnRlZ2VyOiAgLTk5OVxuICAgICAgICAjIE1MS0pJSEdGRURDQkFcbiAgICAgICAgIyBOIFhZWlxuICAgICAgICB6cHVuczogICAgICAgICdOT1BRUlNUVVZXJyAjIHplcm8gYW5kIHBvc2l0aXZlIHVuaWxpdGVyYWwgbnVtYmVyc1xuICAgICAgICBudW5zOiAgICAgICAgICdFRkdISUpLTE0nICAjIG5lZ2F0aXZlICAgICAgICAgIHVuaWxpdGVyYWwgbnVtYmVyc1xuICAgICAgICB6cHVuX21heDogICAgICs5XG4gICAgICAgIG51bl9taW46ICAgICAgLTlcbiAgICAgICAgemVyb19wYWRfbGVuZ3RoOiAgM1xuICAgICAgICBhbHBoYWJldDogICAgICcwMTIzNDU2Nzg5J1xuICAgICAgICBwbWFnOiAgICAgICAgICcgIFhZWicgICAjIHBvc2l0aXZlICdtYWduaWZpZXInIGZvciAxIHRvIDggcG9zaXRpdmUgZGlnaXRzXG4gICAgICAgIG5tYWc6ICAgICAgICAgJyAgQ0JBJyAgICMgbmVnYXRpdmUgJ21hZ25pZmllcicgZm9yIDEgdG8gOCBuZWdhdGl2ZSBkaWdpdHNcbiAgICAgICAgbmxlYWRfcmU6ICAgICAvXjkqKD89WzAtOV0pLyAgICAgICAgICMgJ25lZ2F0aXZlIGxlYWRlcicsIGRpc2NhcmRhYmxlIGxlYWRpbmcgZGlnaXRzIG9mIGxpZnRlZCBuZWdhdGl2ZSBudW1iZXJzXG4gICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAgIGNvbXBpbGVfc29ydGtleV9sZXhlciA9ICggY2ZnICkgLT5cbiAgICAgICAgeyBudW5zLFxuICAgICAgICAgIHpwdW5zLFxuICAgICAgICAgIG5tYWcsXG4gICAgICAgICAgcG1hZyxcbiAgICAgICAgICBhbHBoYWJldCwgICAgIH0gPSBjZmdcbiAgICAgICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuICAgICAgICB6ZXJvICAgICAgICA9IHpwdW5zWyAgMCAgICAgXVxuICAgICAgICB6cHVucyAgICAgICA9IHpwdW5zWyAgMSAuLiAgXVxuICAgICAgICBubWFnICAgICAgICA9IG5tYWdbICAgMSAuLiAgXVxuICAgICAgICBwbWFnICAgICAgICA9IHBtYWdbICAgMSAuLiAgXVxuICAgICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgICAgIGZpdF9udW4gICAgID0gcmVnZXhcIig/PGxldHRlcnM+IFsgI3tudW5zICAgICAgIH0gXSAgICkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgZml0X3pwdW4gICAgPSByZWdleFwiKD88bGV0dGVycz4gWyAje3pwdW5zICAgICAgfSBdICAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICBmaXRfbm51bSAgICA9IHJlZ2V4XCIoPzxsZXR0ZXJzPiBbICN7bm1hZyAgICAgICB9IF0gICApICg/PG1hbnRpc3NhPiBbICN7YWxwaGFiZXR9ICBdKiApIFwiXG4gICAgICAgIGZpdF9wbnVtICAgID0gcmVnZXhcIig/PGxldHRlcnM+IFsgI3twbWFnICAgICAgIH0gXSAgICkgKD88bWFudGlzc2E+IFsgI3thbHBoYWJldH0gIF0qICkgXCJcbiAgICAgICAgZml0X3plcm8gICAgPSByZWdleFwiKD88bGV0dGVycz4gWyAje3plcm8gICAgICAgfSBdKyAgKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgICAgIFIgICAgICAgPSBuZXcgR3JhbW1hciB7IGVtaXRfc2lnbmFsczogZmFsc2UsIH1cbiAgICAgICAgZmlyc3QgICA9IFIubmV3X2xldmVsIHsgbmFtZTogJ2ZpcnN0JywgfVxuICAgICAgICBmaXJzdC5uZXdfdG9rZW4gICB7IG5hbWU6ICdudW4nLCAgICAgIGZpdDogZml0X251biwgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgZmlyc3QubmV3X3Rva2VuICAgeyBuYW1lOiAnenB1bicsICAgICBmaXQ6IGZpdF96cHVuLCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGZpcnN0Lm5ld190b2tlbiAgIHsgbmFtZTogJ25udW0nLCAgICAgZml0OiBmaXRfbm51bSwgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICBmaXJzdC5uZXdfdG9rZW4gICB7IG5hbWU6ICdwbnVtJywgICAgIGZpdDogZml0X3BudW0sICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgZmlyc3QubmV3X3Rva2VuICAgeyBuYW1lOiAnemVybycsICAgICBmaXQ6IGZpdF96ZXJvLCAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIGZpcnN0Lm5ld190b2tlbiAgIHsgbmFtZTogJ290aGVyJywgICAgZml0OiAvLi8sICAgICAgIG1lcmdlOiB0cnVlLCAgICAgICAgfVxuICAgICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgICAgIHJldHVybiBSXG4gICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAgIHByb2Jlc19hbmRfbWF0Y2hlcnMgPSBbXG4gICAgICAgIFsgJ0IwMDBOTk5OTk4nLCBbIC05OTksICAgICAgICAgXSwgJ25udW06QiwwMDB8emVybzpOTk5OTk4nLCAgICAgICAgICAgICAgXVxuICAgICAgICBbICdDMDBOTk5OTk5OJywgWyAtOTksICAgICAgICAgIF0sICdubnVtOkMsMDB8emVybzpOTk5OTk5OJywgICAgICAgICAgICAgIF1cbiAgICAgICAgWyAnQzA5Tk5OTk5OTicsIFsgLTkwLCAgICAgICAgICBdLCAnbm51bTpDLDA5fHplcm86Tk5OTk5OTicsICAgICAgICAgICAgICBdXG4gICAgICAgIFsgJ0M4OE5OTk5OTk4nLCBbIC0xMSwgICAgICAgICAgXSwgJ25udW06Qyw4OHx6ZXJvOk5OTk5OTk4nLCAgICAgICAgICAgICAgXVxuICAgICAgICBbICdDODlOTk5OTk5OJywgWyAtMTAsICAgICAgICAgIF0sICdubnVtOkMsODl8emVybzpOTk5OTk5OJywgICAgICAgICAgICAgIF1cbiAgICAgICAgWyAnRU5OTk5OTk5OTicsIFsgLTksICAgICAgICAgICBdLCAnbnVuOkV8emVybzpOTk5OTk5OTk4nLCAgICAgICAgICAgICAgICBdXG4gICAgICAgIFsgJ0ZOTk5OTk5OTk4nLCBbIC04LCAgICAgICAgICAgXSwgJ251bjpGfHplcm86Tk5OTk5OTk5OJywgICAgICAgICAgICAgICAgXVxuICAgICAgICBbICdHTk5OTk5OTk5OJywgWyAtNywgICAgICAgICAgIF0sICdudW46R3x6ZXJvOk5OTk5OTk5OTicsICAgICAgICAgICAgICAgIF1cbiAgICAgICAgWyAnSE5OTk5OTk5OTicsIFsgLTYsICAgICAgICAgICBdLCAnbnVuOkh8emVybzpOTk5OTk5OTk4nLCAgICAgICAgICAgICAgICBdXG4gICAgICAgIFsgJ0lOTk5OTk5OTk4nLCBbIC01LCAgICAgICAgICAgXSwgJ251bjpJfHplcm86Tk5OTk5OTk5OJywgICAgICAgICAgICAgICAgXVxuICAgICAgICBbICdKTk5OTk5OTk5OJywgWyAtNCwgICAgICAgICAgIF0sICdudW46Snx6ZXJvOk5OTk5OTk5OTicsICAgICAgICAgICAgICAgIF1cbiAgICAgICAgWyAnS05OTk5OTk5OTicsIFsgLTMsICAgICAgICAgICBdLCAnbnVuOkt8emVybzpOTk5OTk5OTk4nLCAgICAgICAgICAgICAgICBdXG4gICAgICAgIFsgJ0xOTk5OTk5OTk4nLCBbIC0yLCAgICAgICAgICAgXSwgJ251bjpMfHplcm86Tk5OTk5OTk5OJywgICAgICAgICAgICAgICAgXVxuICAgICAgICBbICdNTk5OTk5OTk5OJywgWyAtMSwgICAgICAgICAgIF0sICdudW46TXx6ZXJvOk5OTk5OTk5OTicsICAgICAgICAgICAgICAgIF1cbiAgICAgICAgWyAnTkM3OU5OTk5OTicsIFsgMCwgLTIwLCAgICAgICBdLCAnemVybzpOfG5udW06Qyw3OXx6ZXJvOk5OTk5OTicsICAgICAgICBdXG4gICAgICAgIFsgJ05OTk5OTk5OTk4nLCBbIDAsICAgICAgICAgICAgXSwgJ3plcm86Tk5OTk5OTk5OTicsICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICBbICdOWDIwTk5OTk5OJywgWyAwLCAyMCwgICAgICAgIF0sICd6ZXJvOk58cG51bTpYLDIwfHplcm86Tk5OTk5OJywgICAgICAgIF1cbiAgICAgICAgWyAnV05OTk5OTk5OTicsIFsgOSwgICAgICAgICAgICBdLCAnenB1bjpXfHplcm86Tk5OTk5OTk5OJywgICAgICAgICAgICAgICBdXG4gICAgICAgIFsgJ1gxMEtOTk5OTk4nLCBbIDEwLCAtMywgICAgICAgXSwgJ3BudW06WCwxMHxudW46S3x6ZXJvOk5OTk5OTicsICAgICAgICAgXVxuICAgICAgICBbICdYMTBMTk5OTk5OJywgWyAxMCwgLTIsICAgICAgIF0sICdwbnVtOlgsMTB8bnVuOkx8emVybzpOTk5OTk4nLCAgICAgICAgIF1cbiAgICAgICAgWyAnWDEwTU5OTk5OTicsIFsgMTAsIC0xLCAgICAgICBdLCAncG51bTpYLDEwfG51bjpNfHplcm86Tk5OTk5OJywgICAgICAgICBdXG4gICAgICAgIFsgJ1gxME5OTk5OTk4nLCBbIDEwLCAgICAgICAgICAgXSwgJ3BudW06WCwxMHx6ZXJvOk5OTk5OTk4nLCAgICAgICAgICAgICAgXVxuICAgICAgICBbICdYMTBOTk5OTk5OJywgWyAxMCwgMCwgICAgICAgIF0sICdwbnVtOlgsMTB8emVybzpOTk5OTk5OJywgICAgICAgICAgICAgIF1cbiAgICAgICAgWyAnWDEwT05OTk5OTicsIFsgMTAsIDEsICAgICAgICBdLCAncG51bTpYLDEwfHpwdW46T3x6ZXJvOk5OTk5OTicsICAgICAgICBdXG4gICAgICAgIFsgJ1gxMFgxME1OTk4nLCBbIDEwLCAxMCwgLTEsICAgXSwgJ3BudW06WCwxMHxwbnVtOlgsMTB8bnVuOk18emVybzpOTk4nLCAgXVxuICAgICAgICBbICdYMTBYMTBOTk5OJywgWyAxMCwgMTAsICAgICAgIF0sICdwbnVtOlgsMTB8cG51bTpYLDEwfHplcm86Tk5OTicsICAgICAgIF1cbiAgICAgICAgWyAnWDEwWDIwTk5OTicsIFsgMTAsIDIwLCAgICAgICBdLCAncG51bTpYLDEwfHBudW06WCwyMHx6ZXJvOk5OTk4nLCAgICAgICBdXG4gICAgICAgIFsgJ1gyME5OTk5OTk4nLCBbIDIwLCAgICAgICAgICAgXSwgJ3BudW06WCwyMHx6ZXJvOk5OTk5OTk4nLCAgICAgICAgICAgICAgXVxuICAgICAgICBbICdYMjBYMTBOTk5OJywgWyAyMCwgMTAsICAgICAgIF0sICdwbnVtOlgsMjB8cG51bTpYLDEwfHplcm86Tk5OTicsICAgICAgIF1cbiAgICAgICAgWyAnWDkwTk5OTk5OTicsIFsgOTAsICAgICAgICAgICBdLCAncG51bTpYLDkwfHplcm86Tk5OTk5OTicsICAgICAgICAgICAgICBdXG4gICAgICAgIFsgJ1k5MDBOTk5OTk4nLCBbIDkwMCwgICAgICAgICAgXSwgJ3BudW06WSw5MDB8emVybzpOTk5OTk4nLCAgICAgICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICAjLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICAgIGxleGVyICAgPSBjb21waWxlX3NvcnRrZXlfbGV4ZXIgY2ZnXG4gICAgICBsZXhlbWVzID0gbGV4ZXIuc2Nhbl90b19saXN0ICc1JzsgdGFidWxhdGVfbGV4ZW1lcyBsZXhlbWVzXG4gICAgICBsZXhlbWVzID0gbGV4ZXIuc2Nhbl90b19saXN0ICdOJzsgdGFidWxhdGVfbGV4ZW1lcyBsZXhlbWVzXG4gICAgICBsZXhlbWVzID0gbGV4ZXIuc2Nhbl90b19saXN0ICdOJzsgdGFidWxhdGVfbGV4ZW1lcyBsZXhlbWVzXG4gICAgICBmb3IgWyBwcm9iZSwgbGlzdF9tYXRjaGVyLCBsZXhlbWVfbWF0Y2hlciwgXSBpbiBwcm9iZXNfYW5kX21hdGNoZXJzXG4gICAgICAgICMgdXJnZSAnzqlpbHhob2xfX18xJywgcnByIHByb2JlXG4gICAgICAgIGxleGVtZXMgPSBbXVxuICAgICAgICBsZXhlbWVfcmVzdWx0ICA9IFtdXG4gICAgICAgIGZvciBsZXhlbWUgaW4gbGV4ZXIuc2Nhbl90b19saXN0IHByb2JlXG4gICAgICAgICAgbmFtZSAgICAgID0gbGV4ZW1lLm5hbWVcbiAgICAgICAgICBsZXR0ZXJzICAgPSBsZXhlbWUuZGF0YS5sZXR0ZXJzXG4gICAgICAgICAgbWFudGlzc2EgID0gbGV4ZW1lLmRhdGEubWFudGlzc2EgPyBudWxsXG4gICAgICAgICAgbGV4ZW1lcy5wdXNoIHsgbmFtZSwgbGV0dGVycywgbWFudGlzc2EsIH1cbiAgICAgICAgICBsZXhlbWVfcmVzdWx0LnB1c2ggaWYgbWFudGlzc2E/IHRoZW4gXCIje25hbWV9OiN7bGV0dGVyc30sI3ttYW50aXNzYX1cIiBlbHNlIFwiI3tuYW1lfToje2xldHRlcnN9XCJcbiAgICAgICAgbGV4ZW1lX3Jlc3VsdCAgPSBsZXhlbWVfcmVzdWx0LmpvaW4gJ3wnXG4gICAgICAgICMgdGFidWxhdGVfbGV4ZW1lcyBsZXhlbWVzXG4gICAgICAgICMgZGVidWcgJ86paWx4aG9sX19fMicsIGxleGVtZSBmb3IgbGV4ZW1lIGluIGxleGVtZXNcbiAgICAgICAgaW5mbyAnzqlpbHhob2xfX18zJywgcnByIGxleGVtZV9yZXN1bHRcbiAgICAgICAgQGVxICggzqlpbHhob2xfX180ID0gLT4gbGV4ZW1lX3Jlc3VsdCApLCBsZXhlbWVfbWF0Y2hlclxuICAgICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgICByZXR1cm4gbnVsbFxuXG5cblxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuaWYgbW9kdWxlIGlzIHJlcXVpcmUubWFpbiB0aGVuIGF3YWl0IGRvID0+XG4gIGd1eXRlc3RfY2ZnID0geyB0aHJvd19vbl9lcnJvcjogZmFsc2UsIHNob3dfcGFzc2VzOiBmYWxzZSwgcmVwb3J0X2NoZWNrczogZmFsc2UsIH1cbiAgZ3V5dGVzdF9jZmcgPSB7IHRocm93X29uX2Vycm9yOiB0cnVlLCBzaG93X3Bhc3NlczogZmFsc2UsIHJlcG9ydF9jaGVja3M6IGZhbHNlLCB9XG4gICMgZ3V5dGVzdF9jZmcgPSB7IHRocm93X29uX2Vycm9yOiBmYWxzZSwgc2hvd19wYXNzZXM6IHRydWUsIHJlcG9ydF9jaGVja3M6IHRydWUsIH1cbiAgKCBuZXcgVGVzdCBndXl0ZXN0X2NmZyApLnRlc3QgQGludGVybGV4X3Rhc2tzXG4gICMgKCBuZXcgVGVzdCBndXl0ZXN0X2NmZyApLnRlc3QgeyBsaW5raW5nOiBAaW50ZXJsZXhfdGFza3MubGlua2luZywgfVxuICAjICggbmV3IFRlc3QgZ3V5dGVzdF9jZmcgKS50ZXN0IHsgZmxleGlibGVfbmV3X3Rva2VuX3N5bnRheDogQGludGVybGV4X3Rhc2tzLmJhc2ljcy5mbGV4aWJsZV9uZXdfdG9rZW5fc3ludGF4LCB9XG4iXX0=
