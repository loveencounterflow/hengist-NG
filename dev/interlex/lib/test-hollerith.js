(async function() {
  'use strict';
  var GTNG, GUY, SFMODULES, Test, abbrlxm, alert, condense_lexemes, debug, echo, f, help, info, inspect, log, plain, praise, reverse, rpr, tabulate_lexeme, tabulate_lexemes, urge, warn, whisper;

  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('interlex/test-basics'));

  ({rpr, inspect, echo, reverse, log} = GUY.trm);

  // WGUY                      = require '../../../apps/webguy'
  GTNG = require('../../../apps/guy-test-NG');

  ({Test} = GTNG);

  ({f} = require('../../../apps/effstring'));

  ({condense_lexemes, abbrlxm, tabulate_lexemes, tabulate_lexeme} = require('./helpers'));

  // { internals: ct_internals
  //   isa
  //   std
  //   type_of               } = require '../../../apps/cleartype'
  SFMODULES = require('../../../apps/bricabrac-single-file-modules');

  //###########################################################################################################

  //===========================================================================================================
  this.interlex_tasks = {
    //=========================================================================================================
    hollerith: {
      //-------------------------------------------------------------------------------------------------------
      h10mvp2_demo: function() {
        var Grammar, Lexeme, Token, cfg, compile_sortkey_lexer, constants_10mvp2, decode, encode, i, index_matcher, index_result, j, len, len1, letters, lexeme, lexeme_matcher, lexeme_result, lexemes, lexer, mantissa, name, probe, probes_and_matchers, ref, ref1, regex, type_of, Ωilxhol___6, Ωilxhol___7;
        ({Grammar, Token, Lexeme} = require('../../../apps/interlex'));
        ({regex} = require('regex'));
        ({type_of} = SFMODULES.unstable.require_type_of());
        ({encode, decode} = SFMODULES.unstable.require_anybase());
        //.....................................................................................................
        cfg = constants_10mvp2 = Object.freeze({
          max_integer: +999,
          min_integer: -999,
          // MLKJIHGFEDCBA
          // N XYZ
          zpuns: 'NOPQRSTUVW', // zero and positive uniliteral numbers
          nuns: 'EFGHIJKLM', // negative          uniliteral numbers
          zpun_max: +9,
          nun_min: -9,
          zero_pad_length: 3,
          alphabet: '0123456789',
          pmag: '  XYZ', // positive 'magnifier' for 1 to 8 positive digits
          nmag: '  CBA', // negative 'magnifier' for 1 to 8 negative digits
          nlead_re: /^9*(?=[0-9])/ // 'negative leader', discardable leading digits of lifted negative numbers
        });
        //.....................................................................................................
        compile_sortkey_lexer = function(cfg) {
          var R, all_zero_re, alphabet, cast_nnum, cast_nun, cast_other, cast_padding, cast_pnum, cast_pun, cast_zero, first, fit_nnum, fit_nun, fit_other, fit_padding, fit_pnum, fit_pun, fit_zero, max_digit, nmag, nmag_letters, nuns, nuns_letters, pmag, pmag_letters, puns_letters, zero_letters, zpuns;
          ({nuns, zpuns, nmag, pmag, alphabet} = cfg);
          // base              = alphabet.length
          //...................................................................................................
          nuns_letters = nuns;
          puns_letters = zpuns.slice(1);
          nmag_letters = nmag.slice(1);
          pmag_letters = pmag.slice(1);
          zero_letters = zpuns[0];
          max_digit = alphabet.at(-1);
          //...................................................................................................
          fit_nun = regex`(?<letters> [ ${nuns_letters} ]  )                                  `;
          fit_pun = regex`(?<letters> [ ${puns_letters} ]  )                                  `;
          fit_nnum = regex`(?<letters> [ ${nmag_letters} ]  ) (?<mantissa> [ ${alphabet}  ]* ) `;
          fit_pnum = regex`(?<letters> [ ${pmag_letters} ]  ) (?<mantissa> [ ${alphabet}  ]* ) `;
          fit_padding = regex`(?<letters> [ ${zero_letters} ]+ ) $                                `;
          fit_zero = regex`(?<letters> [ ${zero_letters} ]  (?= .* [^ ${zero_letters} ] ) )     `;
          fit_other = regex`(?<letters> .                    )                                  `;
          all_zero_re = regex`^ ${zero_letters}+ $`;
          //...................................................................................................
          cast_nun = function({
              data: d
            }) {
            return d.index = (cfg.nuns.indexOf(d.letters)) - cfg.nuns.length;
          };
          cast_pun = function({
              data: d
            }) {
            return d.index = +cfg.zpuns.indexOf(d.letters);
          };
          cast_nnum = function({
              data: d
            }) {
            var mantissa;
            mantissa = d.mantissa.padStart(cfg.zero_pad_length, max_digit);
            return d.index = (decode(mantissa, alphabet)) - cfg.max_integer;
          };
          cast_pnum = function({
              data: d
            }) {
            return d.index = decode(d.mantissa, alphabet);
          };
          cast_zero = function({
              data: d
            }) {
            return d.index = 0;
          };
          cast_padding = function({
              data: d,
              source,
              hit
            }) {
            if (source === hit) {
              return d.index = 0;
            }
          };
          cast_other = null;
          //...................................................................................................
          R = new Grammar({
            emit_signals: false
          });
          first = R.new_level({
            name: 'first'
          });
          first.new_token({
            name: 'nun',
            fit: fit_nun,
            cast: cast_nun
          });
          first.new_token({
            name: 'pun',
            fit: fit_pun,
            cast: cast_pun
          });
          first.new_token({
            name: 'nnum',
            fit: fit_nnum,
            cast: cast_nnum
          });
          first.new_token({
            name: 'pnum',
            fit: fit_pnum,
            cast: cast_pnum
          });
          first.new_token({
            name: 'padding',
            fit: fit_padding,
            cast: cast_padding
          });
          first.new_token({
            name: 'zero',
            fit: fit_zero,
            cast: cast_zero
          });
          first.new_token({
            name: 'other',
            fit: fit_other,
            merge: 'list',
            cast: cast_other
          });
          //...................................................................................................
          return R;
        };
        //.....................................................................................................
        probes_and_matchers = [
          ['B000NNNNNN',
          [-999],
          'nnum:B,000|padding:NNNNNN'],
          ['C00NNNNNNN',
          [-99],
          'nnum:C,00|padding:NNNNNNN'],
          ['C09NNNNNNN',
          [-90],
          'nnum:C,09|padding:NNNNNNN'],
          ['C88NNNNNNN',
          [-11],
          'nnum:C,88|padding:NNNNNNN'],
          ['C89NNNNNNN',
          [-10],
          'nnum:C,89|padding:NNNNNNN'],
          ['ENNNNNNNNN',
          [-9],
          'nun:E|padding:NNNNNNNNN'],
          ['FNNNNNNNNN',
          [-8],
          'nun:F|padding:NNNNNNNNN'],
          ['GNNNNNNNNN',
          [-7],
          'nun:G|padding:NNNNNNNNN'],
          ['HNNNNNNNNN',
          [-6],
          'nun:H|padding:NNNNNNNNN'],
          ['INNNNNNNNN',
          [-5],
          'nun:I|padding:NNNNNNNNN'],
          ['JNNNNNNNNN',
          [-4],
          'nun:J|padding:NNNNNNNNN'],
          ['KNNNNNNNNN',
          [-3],
          'nun:K|padding:NNNNNNNNN'],
          ['LNNNNNNNNN',
          [-2],
          'nun:L|padding:NNNNNNNNN'],
          ['MNNNNNNNNN',
          [-1],
          'nun:M|padding:NNNNNNNNN'],
          ['NC79NNNNNN',
          [0,
          -20],
          'zero:N|nnum:C,79|padding:NNNNNN'],
          ['NNNNNNNNNN',
          [0],
          'padding:NNNNNNNNNN'],
          ['NX20NNNNNN',
          [0,
          20],
          'zero:N|pnum:X,20|padding:NNNNNN'],
          ['WNNNNNNNNN',
          [9],
          'pun:W|padding:NNNNNNNNN'],
          ['X10KNNNNNN',
          [10,
          -3],
          'pnum:X,10|nun:K|padding:NNNNNN'],
          ['X10LNNNNNN',
          [10,
          -2],
          'pnum:X,10|nun:L|padding:NNNNNN'],
          ['X10MNNNNNN',
          [10,
          -1],
          'pnum:X,10|nun:M|padding:NNNNNN'],
          ['X10NNNNNNN',
          [10],
          'pnum:X,10|padding:NNNNNNN'],
          // [ 'X10NNNNNNN', [ 10, 0,        ], 'pnum:X,10|padding:NNNNNNN',              ]
          ['X10ONNNNNN',
          [10,
          1],
          'pnum:X,10|pun:O|padding:NNNNNN'],
          ['X10X10MNNN',
          [10,
          10,
          -1],
          'pnum:X,10|pnum:X,10|nun:M|padding:NNN'],
          ['X10X10NNNN',
          [10,
          10],
          'pnum:X,10|pnum:X,10|padding:NNNN'],
          ['X10X20NNNN',
          [10,
          20],
          'pnum:X,10|pnum:X,20|padding:NNNN'],
          ['X20NNNNNNN',
          [20],
          'pnum:X,20|padding:NNNNNNN'],
          ['X20X10NNNN',
          [20,
          10],
          'pnum:X,20|pnum:X,10|padding:NNNN'],
          ['X90NNNNNNN',
          [90],
          'pnum:X,90|padding:NNNNNNN'],
          ['Y900NNNNNN',
          [900],
          'pnum:Y,900|padding:NNNNNN'],
          ['NNNNNNNNN',
          [0],
          'padding:NNNNNNNNN'],
          ['NN',
          [0],
          'padding:NN'],
          ['N',
          [0],
          'padding:N'],
          ['5',
          [],
          'other:5'],
          ['äöü',
          [],
          'other:äöü'],
          ['X10',
          [10],
          'pnum:X,10'],
          ['K',
          [-3],
          'nun:K']
        ];
        //.....................................................................................................
        lexer = compile_sortkey_lexer(cfg);
        for (i = 0, len = probes_and_matchers.length; i < len; i++) {
          [probe, index_matcher, lexeme_matcher] = probes_and_matchers[i];
          // urge 'Ωilxhol___2', rpr probe
          lexemes = [];
          lexeme_result = [];
          index_result = [];
          ref = lexer.scan_to_list(probe);
          for (j = 0, len1 = ref.length; j < len1; j++) {
            lexeme = ref[j];
            name = lexeme.name;
            letters = lexeme.data.letters;
            if ((type_of(letters)) === 'list') {
              letters = letters.join('');
            }
            mantissa = (ref1 = lexeme.data.mantissa) != null ? ref1 : null;
            lexemes.push({name, letters, mantissa});
            lexeme_result.push(mantissa != null ? `${name}:${letters},${mantissa}` : `${name}:${letters}`);
            if (lexeme.data.index != null) {
              index_result.push(lexeme.data.index);
            }
          }
          lexeme_result = lexeme_result.join('|');
          info('Ωilxhol___4', f`${(rpr(lexeme_result)) + ','}:<50c; ${rpr(index_result)}`);
          // help 'Ωilxhol___5', rpr index_result # if index_result.length > 0
          this.eq((Ωilxhol___6 = function() {
            return lexeme_result;
          }), lexeme_matcher);
          this.eq((Ωilxhol___7 = function() {
            return index_result;
          }), index_matcher);
        }
        //.....................................................................................................
        return null;
      }
    }
  };

  //===========================================================================================================
  if (module === require.main) {
    await (() => {
      var guytest_cfg;
      guytest_cfg = {
        throw_on_error: false,
        show_passes: false,
        report_checks: false
      };
      guytest_cfg = {
        throw_on_error: true,
        show_passes: false,
        report_checks: false
      };
      // guytest_cfg = { throw_on_error: false, show_passes: true, report_checks: true, }
      return (new Test(guytest_cfg)).test(this.interlex_tasks);
    })();
  }

  // ( new Test guytest_cfg ).test { linking: @interlex_tasks.linking, }
// ( new Test guytest_cfg ).test { flexible_new_token_syntax: @interlex_tasks.basics.flexible_new_token_syntax, }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
