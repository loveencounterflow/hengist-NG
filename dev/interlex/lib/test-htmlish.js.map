{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-htmlish.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ condense_lexemes\n  abbrlxm\n  tabulate_lexemes\n  tabulate_lexeme       } = require './helpers'\nraw                       = String.raw\nabbrlxm2                  = ( source, lxm ) -> if lxm? then [ source, lxm.fqname, { lxm.data..., }, ] else null\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@htmlish_tasks =\n\n  #=========================================================================================================\n  first_take:\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_grammar: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      declare_lexemes = ( g ) ->\n        outer   = g.new_level { name: 'outer', }\n        ltag    = g.new_level { name: 'ltag', }\n        rtag    = g.new_level { name: 'rtag', }\n        # ncr   = g.new_level { name: 'ncr', }\n        #...................................................................................................\n        ###\n        names\n          rpb     right pointy bracket\n          ltag    left tag: <xxx>, <xxx/>\n          rtag    right tag: </xxx>\n\n        ###\n        #...................................................................................................\n        ncr_cast = ({ fqname, hit, data, }) ->\n          data.csn = 'U' if ( not data.csn? ) or ( data.csn is '' )\n          switch true\n            when data.hex?\n              data.cid = parseInt data.hex, 16\n              delete data.hex\n            when data.dec?\n              data.cid = parseInt data.dec, 10\n              delete data.dec\n            when data.cpname?\n              data.cid = { apos: 0x27, auml: 0xe4, }[ data.cpname ] ? -1\n              delete data.cpname\n          return null\n        #...................................................................................................\n        outer.new_token { name: 'escchr',       fit: /\\\\(?<chr>.)/,               }\n        outer.new_token { name: 'start_rtag',   fit: /(?<lpb><)(?<slash>\\/)/, jump: 'rtag!',              }\n        outer.new_token { name: 'start_ltag',   fit: /(?<lpb><)/,  jump: 'ltag!',                         }\n        outer.new_token { name: 'ncr_named',    fit: /&(?<cpname>[^#;]+);/,                           cast: ncr_cast, }\n        outer.new_token { name: 'ncr_dec',      fit: /&(?<csn>[^#;]*)#(?<dec>[0-9]+);/,            cast: ncr_cast, }\n        outer.new_token { name: 'ncr_hex',      fit: /&(?<csn>[^#;]*)#[xX](?<hex>[0-9a-fA-F]+);/,  cast: ncr_cast, }\n        outer.new_token { name: 'illegal',      fit: /(?<illegal>[<>&])/,                             merge: true,    }\n        outer.new_token { name: 'text',         fit: /(?<text>[^<>&\\\\]+)/,                                             }\n        #...................................................................................................\n        ### TAINT ltag name is complicated enough for its own level ###\n        ltag.new_token { name: 'name',          fit: /(?<name>[^\\s>\\/]+)/,                                }\n        ltag.new_token { name: 'stop',          fit: /(?<slash>\\/?)(?<rpb>>)/, jump: '..'                 }\n        #...................................................................................................\n        rtag.new_token { name: 'name_rpb',      fit: /(?<name>[^\\s>\\/]+)(?<rpb>>)/,                       }\n        # rtag.new_token { name: 'exit',         fit: ';', jump: '..',                                            }\n        return g\n      #.....................................................................................................\n      cast = ({ fqname, data, }) ->\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = \"abc<ltag> x y z </rtag>\"\n        # info 'Ωhsht___1', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωhsht___2', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωhsht___3', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωhsht___4 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text',      hit: 'abc',     pos: '1:0:3', data: { text: 'abc' } }\n        @eq ( Ωhsht___5 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'ltag.start_ltag', hit: '<',       pos: '1:3:4', data: { lpb: '<' } }\n        @eq ( Ωhsht___6 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'ltag.name',       hit: 'ltag',    pos: '1:4:8', data: { name: 'ltag' } }\n        @eq ( Ωhsht___7 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'ltag.stop',       hit: '>',       pos: '1:8:9', data: { slash: '', rpb: '>' } }\n        @eq ( Ωhsht___8 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text',      hit: ' x y z ', pos: '1:9:16', data: { text: ' x y z ' } }\n        @eq ( Ωhsht___9 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'rtag.start_rtag', hit: '</',      pos: '1:16:18', data: { lpb: '<', slash: '/' } }\n        @eq ( Ωhsht__10 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'rtag.name_rpb',   hit: 'rtag>',   pos: '1:18:23', data: { name: 'rtag', rpb: '>' } }\n        @eq ( Ωhsht__11 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = \">>&\"\n        # info 'Ωhsht__12', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωhsht__13', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωhsht__14', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωhsht__15 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.illegal', hit: '>>&', pos: '1:0:3', data: { illegal: [ '>', '>', '&' ] } }\n        @eq ( Ωhsht__16 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        probes_and_matchers = [\n          [ '&apos;',         'outer.ncr_named',  { csn: 'U',     cid: 39     }, ]\n          [ '&#1234;',        'outer.ncr_dec',    { csn: 'U',     cid: 1234   }, ]\n          [ '&jzr#1234;',     'outer.ncr_dec',    { csn: 'jzr',   cid: 1234   }, ]\n          [ '&#x98a;',        'outer.ncr_hex',    { csn: 'U',     cid: 2442   }, ]\n          [ '&#x98A;',        'outer.ncr_hex',    { csn: 'U',     cid: 2442   }, ]\n          [ '&#X98A;',        'outer.ncr_hex',    { csn: 'U',     cid: 2442   }, ]\n          [ '&#X98a;',        'outer.ncr_hex',    { csn: 'U',     cid: 2442   }, ]\n          [ '&gb31#xabf73;',  'outer.ncr_hex',    { csn: 'gb31',  cid: 704371 }, ]\n          [ '&gb31#XABF73;',  'outer.ncr_hex',    { csn: 'gb31',  cid: 704371 }, ]\n          [ '&big-5#xabf73;', 'outer.ncr_hex',    { csn: 'big-5', cid: 704371 }, ]\n          [ '&',              'outer.illegal',    { illegal: [ '&', ]            }, ]\n          [ '\\\\&',            'outer.escchr',     { chr: '&'                     }, ]\n          [ '&#x98a',         'outer.illegal',    { illegal: [ '&', ]            }, ]\n          # [ '\\\\', 'outer.text',                 { bslash: undefined, chr: undefined, text: '\\\\' } ]\n          ]\n        # echo ( abbrlxm2 source, g.scan_first source ) for [ source, ] in probes_and_matchers\n        for [ source, fqn, data, ] in probes_and_matchers\n          @eq ( Ωhsht__17 = -> abbrlxm2 source, g.scan_first source ), [ source, fqn, data, ]\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = raw\"𠀦𠀧𠀨&apos;𠀦&#1234;&#98a;&#x98a;&#x98A;&#X98A;&#X98a;&big-5#xabf73;𠀧𠀨\\&ok\\&auml;&auml;\"\n        # info 'Ωhsht__18', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωhsht__19', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωhsht__20', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωhsht__21 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text', hit: '𠀦𠀧𠀨', pos: '1:0:6', data: { text: '𠀦𠀧𠀨' } }\n        @eq ( Ωhsht__22 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_named', hit: '&apos;', pos: '1:6:12', data: { csn: 'U', cid: 39 } }\n        @eq ( Ωhsht__23 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text', hit: '𠀦', pos: '1:12:14', data: { text: '𠀦' } }\n        @eq ( Ωhsht__24 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_dec', hit: '&#1234;', pos: '1:14:21', data: { csn: 'U', cid: 1234 } }\n        @eq ( Ωhsht__25 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.illegal', hit: '&', pos: '1:21:22', data: { illegal: [ '&' ] } }\n        @eq ( Ωhsht__26 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text', hit: '#98a;', pos: '1:22:27', data: { text: '#98a;' } }\n        @eq ( Ωhsht__27 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_hex', hit: '&#x98a;', pos: '1:27:34', data: { csn: 'U', cid: 2442 } }\n        @eq ( Ωhsht__28 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_hex', hit: '&#x98A;', pos: '1:34:41', data: { csn: 'U', cid: 2442 } }\n        @eq ( Ωhsht__29 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_hex', hit: '&#X98A;', pos: '1:41:48', data: { csn: 'U', cid: 2442 } }\n        @eq ( Ωhsht__30 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_hex', hit: '&#X98a;', pos: '1:48:55', data: { csn: 'U', cid: 2442 } }\n        @eq ( Ωhsht__31 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_hex', hit: '&big-5#xabf73;', pos: '1:55:69', data: { csn: 'big-5', cid: 704371 } }\n        @eq ( Ωhsht__32 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text', hit: '𠀧𠀨', pos: '1:69:73', data: { text: '𠀧𠀨' } }\n        @eq ( Ωhsht__33 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.escchr', hit: '\\\\&', pos: '1:73:75', data: { chr: '&' } }\n        @eq ( Ωhsht__34 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text', hit: 'ok', pos: '1:75:77', data: { text: 'ok' } }\n        @eq ( Ωhsht__35 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.escchr', hit: '\\\\&', pos: '1:77:79', data: { chr: '&' } }\n        @eq ( Ωhsht__36 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.text', hit: 'auml;', pos: '1:79:84', data: { text: 'auml;' } }\n        @eq ( Ωhsht__37 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.ncr_named', hit: '&auml;', pos: '1:84:90', data: { csn: 'U', cid: 228 } }\n        @eq ( Ωhsht__38 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true, show_passes: false, report_checks: false, }\n  ( t = new Test guytest_cfg ).test @htmlish_tasks\n\n\n"
  ]
}