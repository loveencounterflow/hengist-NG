{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n#===========================================================================================================\ncondense_lexemes = ( lexemes ) ->\n  lexemes = [ lexemes, ] unless Array.isArray lexemes\n  ( \"#{lexeme?.fqname ? null}#{rpr lexeme?.hit ? null}\" for lexeme from lexemes ).join '|'\n\n#-----------------------------------------------------------------------------------------------------------\n# abbrlxm = ( lxm ) -> {\n#   level:  lxm?.level?.name ? null,\n#   fqname: lxm?.fqname      ? null,\n#   hit:    lxm?.hit         ? null,\n#   pos:    ( if lxm? then \"#{lxm.start}:#{lxm.stop}\" else null ), }\n\n#-----------------------------------------------------------------------------------------------------------\nabbrlxm = ( lxm ) ->\n  return null unless lxm?\n  R =\n    fqname: lxm.fqname\n    hit:    lxm.hit\n    pos:    \"#{lxm.lnr}:#{lxm.start}:#{lxm.stop}\"\n  R.data = { lxm.data..., } if lxm.has_data\n  delete R.data?.ref\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate_lexemes = ( lexemes ) ->\n  tabulate_lexeme lexeme for lexeme from lexemes\n  return lexemes\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate_lexeme = ( lexeme ) ->\n  unless lexeme?\n    urge 'Œ©ilxt___1', lexeme\n  else\n    alxm      = abbrlxm lexeme\n    name_rpr  = lexeme.fqname + ( if lexeme.token.sticky then 'üîª' else '' )\n    hit_rpr   = if lexeme.hit is '' then '' else rpr lexeme.hit\n    data_rpr  = if lexeme.has_data then rpr { lexeme.data..., } else ''\n    I         = GUY.trm.lime '‚ñè'\n    # g         = GUY.trm.gold\n    urge 'Œ©ilxt___2', f\"\"\" \\\n      #{I} #{ name_rpr          }:<25c; \\\n      #{I} #{ hit_rpr           }:<10c; \\\n      #{I} #{ alxm.pos          }:<10c; \\\n      #{I} #{ data_rpr          }:<50c; \\\n      #{I}\"\"\"\n  return lexeme\n\n#===========================================================================================================\nmodule.exports = { condense_lexemes, abbrlxm, tabulate_lexemes, tabulate_lexeme, }\n\n"
  ]
}