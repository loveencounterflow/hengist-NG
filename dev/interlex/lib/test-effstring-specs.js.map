{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-effstring-specs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ condense_lexemes\n  abbrlxm\n  tabulate_lexemes\n  tabulate_lexeme       } = require './helpers'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  effstring_specs:\n    ###\n    f`${x}:[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];` (JS)\n    f\"#{x}:[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];\" (CoffeeScript)\n             ┌─── ┌────  ┌───  ┌───── ┌───── ┌───── ┌───────── ┌────────── ┌─ ┌──── ┌────\n             │    │      │     │      │      │      │          │           │  │     │\n             │ ¤  │ <    │ ␣   │ $    │ 0    │ ℕ    │ ,        │ .ℕ        │~ │ e   │ /y\n                  │ ^    │ +   │ #                                            │ f   │ /z\n                  │ >    │ -                                                  │ g   │ /a\n                  │ =    │ (                                                  │ r   │ /f\n                                                                              │ s   │ /p\n                                                                              │ %   │ /n\n                                                                              │ p   │ /µ\n    * Symbols:                                                                │ b   │ /m\n      ¤: any single-width Unicode BMP character                              │ o   │ /1\n      ␣: U+0020, space character                                             │ d   │ /k\n      ℕ: / [1-9][0-9]* /, an integer number                                  │ x   │ /M\n    * other characters represent themselves;                                  │ X   │ /G\n    * all fields are optional;                                                │ c   │ /T\n    * a leading  fill chr must always be followed by an alignment specifier         │ /P\n    * a unit prefix can only be added to fixed format `f` (e.g. `f/µ` for micro)    │ /E\n                                                                                    │ /Z\n                                                                                    │ /Y\n    ###\n\n    #-------------------------------------------------------------------------------------------------------\n    grammar: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      declare_lexemes = ( g ) ->\n        outer = g.new_level { name: 'outer', }\n        fspec = g.new_level { name: 'fspec', }\n        # :[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];\n        #...................................................................................................\n        outer.new_token { name: 'enter',        fit: ':', jump: 'fspec',                      }\n        outer.new_token { name: 'tail',         fit: /.+$/,                                   }\n        #...................................................................................................\n        fspec.new_token { name: 'fill_align',   fit: /(?<fill>.?)(?<align>[<\\^>=])/,                              }\n        fspec.new_token { name: 'sign',         fit: /(?<sign>[\\-+\\x20\\(])/,                                      }\n        fspec.new_token { name: 'symbol',       fit: /(?<symbol>[$#])/,                                           }\n        fspec.new_token { name: 'zeros_width',  fit: /(?<zeros>0*)(?<width>[0-9]+)/,                              }\n        fspec.new_token { name: 'separator',    fit: /(?<separator>,)/,                                           }\n        fspec.new_token { name: 'precision',    fit: /\\.(?<precision>[0-9]+)/,                                    }\n        fspec.new_token { name: 'trim',         fit: /(?<trim>~)/,                                                }\n        fspec.new_token { name: 'type_unit',    fit: rx\"\"\"(?<type>[efgrs%pbodxXc])(/(?<unit>[zafpnµm1kMGT]))?\"\"\", }\n        fspec.new_token { name: 'exit',         fit: ';', jump: '..!',                                            }\n        return g\n      #.....................................................................................................\n      cast = ({ fqname, data, }) ->\n        switch fqname\n          when 'fspec.zeros_width'\n            data.zeros      = ( data.zeros?.length ? 0 ) > 0\n            data.width        = parseInt data.width, 10\n          when 'fspec.precision'\n            data.precision    = parseInt data.precision, 10\n          when 'fspec.trim'\n            data.trim         = ( data.trim?.length ? 0 ) > 0\n          when 'fspec.type_unit'\n            data.type         = data.type ? null\n            data.unit         = data.unit ? null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, }\n        source  = ':;'\n        # info 'Ωilxt_597', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_598', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_599', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_600 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start', hit: '',  pos: '1:0:0' }\n        @eq ( Ωilxt_601 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',  pos: '1:0:0', data: { target: 'outer' } }\n        @eq ( Ωilxt_602 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',   hit: ':', pos: '1:0:1' }\n        @eq ( Ωilxt_603 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',  pos: '1:1:1', data: { target: 'outer' } }\n        @eq ( Ωilxt_604 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',    hit: ';', pos: '1:1:2' }\n        @eq ( Ωilxt_605 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',  pos: '1:2:2', data: { target: null } }\n        @eq ( Ωilxt_606 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',  hit: '',  pos: '1:2:2' }\n        @eq ( Ωilxt_607 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, }\n        source  = 'not a spec'\n        # info 'Ωilxt_608', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_609', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_610', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_611 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start', hit: '',           pos: '1:0:0' }\n        @eq ( Ωilxt_612 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',           pos: '1:0:0', data: { target: 'outer' } }\n        @eq ( Ωilxt_613 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',    hit: 'not a spec', pos: '1:0:10' }\n        @eq ( Ωilxt_614 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',           pos: '1:10:10', data: { target: null } }\n        @eq ( Ωilxt_615 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',  hit: '',           pos: '1:10:10' }\n        @eq ( Ωilxt_616 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4;'\n        # info 'Ωilxt_617', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_618', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_619', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_620 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':',  pos: '1:0:1' }\n        @eq ( Ωilxt_621 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4', pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωilxt_622 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';',  pos: '1:3:4' }\n        @eq ( Ωilxt_623 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4;rest of text'\n        # info 'Ωilxt_624', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_625', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_626', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_627 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':',            pos: '1:0:1' }\n        @eq ( Ωilxt_628 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4',           pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωilxt_629 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';',            pos: '1:3:4' }\n        @eq ( Ωilxt_630 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',      hit: 'rest of text', pos: '1:4:16' }\n        @eq ( Ωilxt_631 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4~;...'\n        # info 'Ωilxt_632', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_633', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_634', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_635 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter', hit: ':', pos: '1:0:1' }\n        @eq ( Ωilxt_636 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4', pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωilxt_637 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim', hit: '~', pos: '1:3:4', data: { trim: true, } }\n        @eq ( Ωilxt_638 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit', hit: ';', pos: '1:4:5' }\n        @eq ( Ωilxt_639 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail', hit: '...', pos: '1:5:8' }\n        @eq ( Ωilxt_640 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4~f;...'\n        # info 'Ωilxt_641', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_642', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_643', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_644 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':', pos: '1:0:1' }\n        @eq ( Ωilxt_645 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4', pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωilxt_646 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',      hit: '~', pos: '1:3:4', data: { trim: true, } }\n        @eq ( Ωilxt_647 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit', hit: 'f', pos: '1:4:5', data: { type: 'f', unit: null, } }\n        @eq ( Ωilxt_648 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';', pos: '1:5:6' }\n        @eq ( Ωilxt_649 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',      hit: '...', pos: '1:6:9' }\n        @eq ( Ωilxt_650 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4~f/µ;...'\n        # info 'Ωilxt_651', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_652', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_653', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_654 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_655 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4',  pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωilxt_656 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',      hit: '~',   pos: '1:3:4', data: { trim: true } }\n        @eq ( Ωilxt_657 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit', hit: 'f/µ', pos: '1:4:7', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_658 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';',   pos: '1:7:8' }\n        @eq ( Ωilxt_659 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',      hit: '...', pos: '1:8:11' }\n        @eq ( Ωilxt_660 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':20.4~f/µ;...'\n        # info 'Ωilxt_661', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_662', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_663', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_664 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_665 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '20',  pos: '1:1:3', data: { zeros: false, width: 20 } }\n        @eq ( Ωilxt_666 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:3:5', data: { precision: 4 } }\n        @eq ( Ωilxt_667 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:5:6', data: { trim: true } }\n        @eq ( Ωilxt_668 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:6:9', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_669 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:9:10' }\n        @eq ( Ωilxt_670 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:10:13' }\n        @eq ( Ωilxt_671 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':020.4~f/µ;...'\n        # info 'Ωilxt_672', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_673', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_674', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_675 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_676 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:1:4', data: { zeros: true, width: 20 } }\n        @eq ( Ωilxt_677 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:4:6', data: { precision: 4 } }\n        @eq ( Ωilxt_678 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:6:7', data: { trim: true } }\n        @eq ( Ωilxt_679 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:7:10', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_680 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:10:11' }\n        @eq ( Ωilxt_681 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:11:14' }\n        @eq ( Ωilxt_682 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':$020.4~f/µ;...'\n        # info 'Ωilxt_683', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_684', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_685', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_686 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_687 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:1:2', data: { symbol: '$' } }\n        @eq ( Ωilxt_688 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:2:5', data: { zeros: true, width: 20 } }\n        @eq ( Ωilxt_689 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:5:7', data: { precision: 4 } }\n        @eq ( Ωilxt_690 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:7:8', data: { trim: true } }\n        @eq ( Ωilxt_691 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:8:11', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_692 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:11:12' }\n        @eq ( Ωilxt_693 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:12:15' }\n        @eq ( Ωilxt_694 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ': $020.4~f/µ;...'\n        # info 'Ωilxt_695', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_696', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_697', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_698 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_699 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.sign',        hit: ' ',   pos: '1:1:2', data: { sign: ' ' } }\n        @eq ( Ωilxt_700 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:2:3', data: { symbol: '$' } }\n        @eq ( Ωilxt_701 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:3:6', data: { zeros: true, width: 20 } }\n        @eq ( Ωilxt_702 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:6:8', data: { precision: 4 } }\n        @eq ( Ωilxt_703 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:8:9', data: { trim: true } }\n        @eq ( Ωilxt_704 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:9:12', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_705 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:12:13' }\n        @eq ( Ωilxt_706 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:13:16' }\n        @eq ( Ωilxt_707 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':>-$020.4~f/µ;...'\n        # info 'Ωilxt_708', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_709', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_710', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_711 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_712 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.fill_align',  hit: '>', pos: '1:1:2', data: { fill: '', align: '>' } }\n        @eq ( Ωilxt_713 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.sign',        hit: '-',   pos: '1:2:3', data: { sign: '-' } }\n        @eq ( Ωilxt_714 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:3:4', data: { symbol: '$' } }\n        @eq ( Ωilxt_715 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:4:7', data: { zeros: true, width: 20 } }\n        @eq ( Ωilxt_716 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:7:9', data: { precision: 4 } }\n        @eq ( Ωilxt_717 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:9:10', data: { trim: true } }\n        @eq ( Ωilxt_718 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:10:13', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_719 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:13:14' }\n        @eq ( Ωilxt_720 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:14:17' }\n        @eq ( Ωilxt_721 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':_>-$020.4~f/µ;...'\n        # info 'Ωilxt_722', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_723', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_724', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_725 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωilxt_726 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.fill_align',  hit: '_>',  pos: '1:1:3', data: { fill: '_', align: '>' } }\n        @eq ( Ωilxt_727 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.sign',        hit: '-',   pos: '1:3:4', data: { sign: '-' } }\n        @eq ( Ωilxt_728 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:4:5', data: { symbol: '$' } }\n        @eq ( Ωilxt_729 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:5:8', data: { zeros: true, width: 20 } }\n        @eq ( Ωilxt_730 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:8:10', data: { precision: 4 } }\n        @eq ( Ωilxt_731 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:10:11', data: { trim: true } }\n        @eq ( Ωilxt_732 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:11:14', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωilxt_733 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:14:15' }\n        @eq ( Ωilxt_734 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:15:18' }\n        @eq ( Ωilxt_735 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        #---------------------------------------------------------------------------------------------------\n        parse_fspec = ( g, source ) ->\n          R         = Object.create null\n          R.source  = source\n          R.fspec   = ''\n          for lexeme from g.scan source\n            switch true\n              when lexeme.fqname      is 'outer.enter'  then null\n              when lexeme.fqname      is 'outer.exit'   then null\n              when lexeme.fqname      is 'outer.tail'   then R.tail = lexeme.hit\n              when lexeme.level.name  is 'fspec'\n                Object.assign R, lexeme.data\n                R.fspec += lexeme.hit\n              else throw new Error \"Ωilxt_739 encountered unhandled lexeme #{rpr abbrlxm lexeme}\"\n          return R\n        #---------------------------------------------------------------------------------------------------\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':_>-$020.4~f/µ; whatever comes after the fspec'\n        # info 'Ωilxt_736', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωilxt_737', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_738', source; g.reset_lnr 1; d = parse_fspec g, source\n        for key in ( Object.keys d ).sort()\n          value = d[ key ]\n          help 'Ωilxt_740', f\"#{key}:<10c; | #{rpr value}\"\n        return null\n      #.....................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true, show_passes: false, report_checks: false, }\n  # guytest_cfg = { throw_on_error: false, show_passes: false, report_checks: false, }\n  # guytest_cfg = { throw_on_error: false, show_passes: true, report_checks: true, }\n  ( new Test guytest_cfg ).test @interlex_tasks\n  # ( new Test guytest_cfg ).test { ghost_tokens: @interlex_tasks.ghost_tokens, }\n  ( new Test guytest_cfg ).test { effstring_specs: @interlex_tasks.effstring_specs, }\n  # ( new Test guytest_cfg ).test { cfg_settings: @interlex_tasks.cfg_settings, }\n  # ( new Test guytest_cfg ).test { numbering: @interlex_tasks.basics.numbering, }\n  # ( new Test guytest_cfg ).test { stack: @interlex_tasks.stack, }\n\n"
  ]
}