{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-effstring-specs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n###\nf`${x}:[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];` (JS)\nf\"#{x}:[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];\" (CoffeeScript)\n         ┌─── ┌────  ┌───  ┌───── ┌───── ┌───── ┌───────── ┌────────── ┌─ ┌──── ┌────\n         │    │      │     │      │      │      │          │           │  │     │\n         │ ¤  │ <    │ ␣   │ $    │ 0    │ ℕ    │ ,        │ .ℕ        │~ │ e   │ /y\n              │ ^    │ +   │ #                                            │ f   │ /z\n              │ >    │ -                                                  │ g   │ /a\n              │ =    │ (                                                  │ r   │ /f\n                                                                          │ s   │ /p\n                                                                          │ %   │ /n\n                                                                          │ p   │ /µ\n* Symbols:                                                                │ b   │ /m\n  ¤: any single-width Unicode BMP character                              │ o   │ /1\n  ␣: U+0020, space character                                             │ d   │ /k\n  ℕ: / [1-9][0-9]* /, an integer number                                  │ x   │ /M\n* other characters represent themselves;                                  │ X   │ /G\n* all fields are optional;                                                │ c   │ /T\n* a leading  fill chr must always be followed by an alignment specifier         │ /P\n* a unit prefix can only be added to fixed format `f` (e.g. `f/µ` for micro)    │ /E\n                                                                                │ /Z\n                                                                                │ /Y\n###\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ condense_lexemes\n  abbrlxm\n  tabulate_lexemes\n  tabulate_lexeme       } = require './helpers'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@effstring_tasks =\n\n  #=========================================================================================================\n  first_take:\n\n    #-------------------------------------------------------------------------------------------------------\n    store_data_in_lexemes: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      declare_lexemes = ( g ) ->\n        outer = g.new_level { name: 'outer', }\n        fspec = g.new_level { name: 'fspec', }\n        # :[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];\n        #...................................................................................................\n        outer.new_token { name: 'enter',        fit: ':', jump: 'fspec',                      }\n        outer.new_token { name: 'tail',         fit: /.+$/,                                   }\n        #...................................................................................................\n        fspec.new_token { name: 'fill_align',   fit: /(?<fill>.?)(?<align>[<\\^>=])/,                              }\n        fspec.new_token { name: 'sign',         fit: /(?<sign>[\\-+\\x20\\(])/,                                      }\n        fspec.new_token { name: 'symbol',       fit: /(?<symbol>[$#])/,                                           }\n        fspec.new_token { name: 'zeros_width',  fit: /(?<zeros>0*)(?<width>[0-9]+)/,                              }\n        fspec.new_token { name: 'separator',    fit: /(?<separator>,)/,                                           }\n        fspec.new_token { name: 'precision',    fit: /\\.(?<precision>[0-9]+)/,                                    }\n        fspec.new_token { name: 'trim',         fit: /(?<trim>~)/,                                                }\n        fspec.new_token { name: 'type_unit',    fit: rx\"\"\"(?<type>[efgrs%pbodxXc])(/(?<unit>[zafpnµm1kMGT]))?\"\"\", }\n        fspec.new_token { name: 'exit',         fit: ';', jump: '..!',                                            }\n        return g\n      #.....................................................................................................\n      cast = ({ fqname, data, }) ->\n        switch fqname\n          when 'fspec.zeros_width'\n            data.zeros        = @data.zeros      = ( data.zeros?.length ? 0 ) > 0\n            data.width        = @data.width      = parseInt data.width, 10\n          when 'fspec.precision'\n            data.precision    = @data.precision  = parseInt data.precision, 10\n          when 'fspec.trim'\n            data.trim         = @data.trim       = ( data.trim?.length ? 0 ) > 0\n          when 'fspec.type_unit'\n            data.type         = @data.type       = data.type ? null\n            data.unit         = @data.unit       = data.unit ? null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, }\n        source  = ':;'\n        # info 'Ωefft___1', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft___2', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft___3', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft___4 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start', hit: '',  pos: '1:0:0' }\n        @eq ( Ωefft___5 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',  pos: '1:0:0', data: { target: 'outer' } }\n        @eq ( Ωefft___6 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',   hit: ':', pos: '1:0:1' }\n        @eq ( Ωefft___7 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',  pos: '1:1:1', data: { target: 'outer' } }\n        @eq ( Ωefft___8 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',    hit: ';', pos: '1:1:2' }\n        @eq ( Ωefft___9 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',  pos: '1:2:2', data: { target: null } }\n        @eq ( Ωefft__10 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',  hit: '',  pos: '1:2:2' }\n        @eq ( Ωefft__11 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, }\n        source  = 'not a spec'\n        # info 'Ωefft__12', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__13', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__14', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__15 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start', hit: '',           pos: '1:0:0' }\n        @eq ( Ωefft__16 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',           pos: '1:0:0', data: { target: 'outer' } }\n        @eq ( Ωefft__17 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',    hit: 'not a spec', pos: '1:0:10' }\n        @eq ( Ωefft__18 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',           pos: '1:10:10', data: { target: null } }\n        @eq ( Ωefft__19 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',  hit: '',           pos: '1:10:10' }\n        @eq ( Ωefft__20 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4;'\n        # info 'Ωefft__21', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__22', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__23', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__24 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':',  pos: '1:0:1' }\n        @eq ( Ωefft__25 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4', pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωefft__26 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';',  pos: '1:3:4' }\n        @eq ( Ωefft__27 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4;rest of text'\n        # info 'Ωefft__28', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__29', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__30', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__31 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':',            pos: '1:0:1' }\n        @eq ( Ωefft__32 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4',           pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωefft__33 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';',            pos: '1:3:4' }\n        @eq ( Ωefft__34 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',      hit: 'rest of text', pos: '1:4:16' }\n        @eq ( Ωefft__35 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4~;...'\n        # info 'Ωefft__36', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__37', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__38', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__39 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter', hit: ':', pos: '1:0:1' }\n        @eq ( Ωefft__40 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4', pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωefft__41 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim', hit: '~', pos: '1:3:4', data: { trim: true, } }\n        @eq ( Ωefft__42 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit', hit: ';', pos: '1:4:5' }\n        @eq ( Ωefft__43 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail', hit: '...', pos: '1:5:8' }\n        @eq ( Ωefft__44 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4~f;...'\n        # info 'Ωefft__45', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__46', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__47', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__48 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':', pos: '1:0:1' }\n        @eq ( Ωefft__49 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4', pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωefft__50 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',      hit: '~', pos: '1:3:4', data: { trim: true, } }\n        @eq ( Ωefft__51 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit', hit: 'f', pos: '1:4:5', data: { type: 'f', unit: null, } }\n        @eq ( Ωefft__52 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';', pos: '1:5:6' }\n        @eq ( Ωefft__53 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',      hit: '...', pos: '1:6:9' }\n        @eq ( Ωefft__54 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':.4~f/µ;...'\n        # info 'Ωefft__55', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__56', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__57', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__58 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',     hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft__59 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision', hit: '.4',  pos: '1:1:3', data: { precision: 4 } }\n        @eq ( Ωefft__60 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',      hit: '~',   pos: '1:3:4', data: { trim: true } }\n        @eq ( Ωefft__61 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit', hit: 'f/µ', pos: '1:4:7', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft__62 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',      hit: ';',   pos: '1:7:8' }\n        @eq ( Ωefft__63 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',      hit: '...', pos: '1:8:11' }\n        @eq ( Ωefft__64 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':20.4~f/µ;...'\n        # info 'Ωefft__65', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__66', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__67', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__68 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft__69 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '20',  pos: '1:1:3', data: { zeros: false, width: 20 } }\n        @eq ( Ωefft__70 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:3:5', data: { precision: 4 } }\n        @eq ( Ωefft__71 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:5:6', data: { trim: true } }\n        @eq ( Ωefft__72 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:6:9', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft__73 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:9:10' }\n        @eq ( Ωefft__74 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:10:13' }\n        @eq ( Ωefft__75 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':020.4~f/µ;...'\n        # info 'Ωefft__76', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__77', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__78', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__79 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft__80 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:1:4', data: { zeros: true, width: 20 } }\n        @eq ( Ωefft__81 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:4:6', data: { precision: 4 } }\n        @eq ( Ωefft__82 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:6:7', data: { trim: true } }\n        @eq ( Ωefft__83 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:7:10', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft__84 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:10:11' }\n        @eq ( Ωefft__85 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:11:14' }\n        @eq ( Ωefft__86 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':$020.4~f/µ;...'\n        # info 'Ωefft__87', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft__88', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft__89', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft__90 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft__91 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:1:2', data: { symbol: '$' } }\n        @eq ( Ωefft__92 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:2:5', data: { zeros: true, width: 20 } }\n        @eq ( Ωefft__93 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:5:7', data: { precision: 4 } }\n        @eq ( Ωefft__94 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:7:8', data: { trim: true } }\n        @eq ( Ωefft__95 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:8:11', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft__96 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:11:12' }\n        @eq ( Ωefft__97 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:12:15' }\n        @eq ( Ωefft__98 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ': $020.4~f/µ;...'\n        # info 'Ωefft__99', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft_100', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft_101', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft_102 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft_103 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.sign',        hit: ' ',   pos: '1:1:2', data: { sign: ' ' } }\n        @eq ( Ωefft_104 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:2:3', data: { symbol: '$' } }\n        @eq ( Ωefft_105 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:3:6', data: { zeros: true, width: 20 } }\n        @eq ( Ωefft_106 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:6:8', data: { precision: 4 } }\n        @eq ( Ωefft_107 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:8:9', data: { trim: true } }\n        @eq ( Ωefft_108 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:9:12', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft_109 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:12:13' }\n        @eq ( Ωefft_110 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:13:16' }\n        @eq ( Ωefft_111 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':>-$020.4~f/µ;...'\n        # info 'Ωefft_112', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft_113', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft_114', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft_115 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft_116 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.fill_align',  hit: '>', pos: '1:1:2', data: { fill: '', align: '>' } }\n        @eq ( Ωefft_117 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.sign',        hit: '-',   pos: '1:2:3', data: { sign: '-' } }\n        @eq ( Ωefft_118 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:3:4', data: { symbol: '$' } }\n        @eq ( Ωefft_119 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:4:7', data: { zeros: true, width: 20 } }\n        @eq ( Ωefft_120 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:7:9', data: { precision: 4 } }\n        @eq ( Ωefft_121 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:9:10', data: { trim: true } }\n        @eq ( Ωefft_122 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:10:13', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft_123 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:13:14' }\n        @eq ( Ωefft_124 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:14:17' }\n        @eq ( Ωefft_125 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':_>-$020.4~f/µ;...'\n        # info 'Ωefft_126', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft_127', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft_128', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωefft_129 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.enter',       hit: ':',   pos: '1:0:1' }\n        @eq ( Ωefft_130 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.fill_align',  hit: '_>',  pos: '1:1:3', data: { fill: '_', align: '>' } }\n        @eq ( Ωefft_131 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.sign',        hit: '-',   pos: '1:3:4', data: { sign: '-' } }\n        @eq ( Ωefft_132 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.symbol',      hit: '$',   pos: '1:4:5', data: { symbol: '$' } }\n        @eq ( Ωefft_133 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.zeros_width', hit: '020', pos: '1:5:8', data: { zeros: true, width: 20 } }\n        @eq ( Ωefft_134 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.precision',   hit: '.4',  pos: '1:8:10', data: { precision: 4 } }\n        @eq ( Ωefft_135 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.trim',        hit: '~',   pos: '1:10:11', data: { trim: true } }\n        @eq ( Ωefft_136 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'fspec.type_unit',   hit: 'f/µ', pos: '1:11:14', data: { type: 'f', unit: 'µ' } }\n        @eq ( Ωefft_137 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.exit',        hit: ';',   pos: '1:14:15' }\n        @eq ( Ωefft_138 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'outer.tail',        hit: '...', pos: '1:15:18' }\n        @eq ( Ωefft_139 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        #---------------------------------------------------------------------------------------------------\n        parse_fspec = ( g, source ) ->\n          R         = Object.create null\n          R.source  = source\n          R.fspec   = ''\n          for lexeme from g.scan source\n            switch true\n              when lexeme.fqname      is 'outer.enter'  then null\n              when lexeme.fqname      is 'outer.exit'   then null\n              when lexeme.fqname      is 'outer.tail'   then R.tail = lexeme.hit\n              when lexeme.level.name  is 'fspec'\n                Object.assign R, lexeme.data\n                R.fspec += lexeme.hit\n              else throw new Error \"Ωefft_140 encountered unhandled lexeme #{rpr abbrlxm lexeme}\"\n          return R\n        #---------------------------------------------------------------------------------------------------\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':_>-$020.4~f/µ; whatever comes after the fspec'\n        # info 'Ωefft_141', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft_142', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft_143', source; g.reset_lnr 1; d = parse_fspec g, source\n        for key in ( Object.keys d ).sort()\n          value = d[ key ]\n          help 'Ωefft_144', f\"#{key}:<10c; | #{rpr value}\"\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    store_data_in_grammar: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      show_data = ( data ) ->\n        # for key in ( Object.keys data ).sort()\n        for key in Object.keys data\n          value = data[ key ]\n          help 'Ωefft_145', f\"#{key}:<10c; | #{rpr value}\"\n        return null\n      #.....................................................................................................\n      declare_lexemes = ( g ) ->\n        outer = g.new_level { name: 'outer', }\n        fspec = g.new_level { name: 'fspec', }\n        # :[[fill]align][sign][symbol][zeros][width][thousands][.precision][~][type[/unit]];\n        #...................................................................................................\n        outer.new_token { name: 'enter',        fit: ':', jump: 'fspec',                      }\n        outer.new_token { name: 'tail',         fit: /.+$/,                                   }\n        #...................................................................................................\n        fspec.new_token { name: 'fill_align',   fit: /(?<fill>.?)(?<align>[<\\^>=])/,                              }\n        fspec.new_token { name: 'sign',         fit: /(?<sign>[\\-+\\x20\\(])/,                                      }\n        fspec.new_token { name: 'symbol',       fit: /(?<symbol>[$#])/,                                           }\n        fspec.new_token { name: 'zeros_width',  fit: /(?<zeros>0*)(?<width>[0-9]+)/,                              }\n        fspec.new_token { name: 'separator',    fit: /(?<separator>,)/,                                           }\n        fspec.new_token { name: 'precision',    fit: /\\.(?<precision>[0-9]+)/,                                    }\n        fspec.new_token { name: 'trim',         fit: /(?<trim>~)/,                                                }\n        fspec.new_token { name: 'type_unit',    fit: rx\"\"\"(?<type>[efgrs%pbodxXc])(/(?<unit>[zafpnµm1kMGT]))?\"\"\", }\n        fspec.new_token { name: 'exit',         fit: ';', jump: '..!',                                            }\n        return g\n      #-----------------------------------------------------------------------------------------------------\n      template =\n        fill:       null\n        align:      null\n        sign:       null\n        symbol:     null\n        zeros:      false\n        width:      null\n        separator:  false\n        precision:  null\n        trim:       false\n        type:       null\n        unit:       null\n        fspec:      ''\n        tail:       null\n      #-----------------------------------------------------------------------------------------------------\n      reset_data = ( template ) ->\n        @data = Object.assign ( Object.create null ), template\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      cast = ({ lnr, level, hit, fqname, data, }) ->\n        switch fqname\n          when 'fspec.fill_align'\n            @data.fill      = data.fill\n            @data.align     = data.align\n          when 'fspec.sign'\n            @data.sign      = data.sign\n          when 'fspec.symbol'\n            @data.symbol    = data.symbol\n          when 'fspec.zeros_width'\n            @data.zeros     = ( data.zeros?.length ? 0 ) > 0\n            @data.width     = parseInt data.width, 10\n          when 'fspec.separator'\n            @data.separator = data.separator.length > 0\n          when 'fspec.precision'\n            @data.precision = parseInt data.precision, 10\n          when 'fspec.trim'\n            @data.trim      = ( data.trim?.length ? 0 ) > 0\n          when 'fspec.type_unit'\n            @data.type      = data.type ? null\n            @data.unit      = data.unit ? null\n          #.................................................................................................\n          when 'outer.enter'  then null\n          when 'outer.exit'   then null\n          when 'outer.tail'   then @data.tail = hit\n          else throw new Error \"Ωefft_146 encountered unhandled fqname #{rpr fqname}\"\n        #...................................................................................................\n        @data.fspec += hit if level.name is 'fspec'\n        return null\n      #.....................................................................................................\n      do =>\n        #---------------------------------------------------------------------------------------------------\n        extract = ( g, source ) -> g.scan_to_list source; return Object.assign ( Object.create null ), g.data\n        g       = declare_lexemes new Grammar { name: 'fspec', cast, emit_signals: false, }\n        source  = ':_>-$020,.4~f/µ; whatever comes after the fspec'\n        # info 'Ωefft_147', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        # info 'Ωefft_148', source; g.reset_lnr 1; echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωefft_149', extract g, source\n        info 'Ωefft_150', source; g.reset_lnr 1; reset_data.call g, template; show_data result = extract g, source\n        @eq ( Ωefft_151 = -> result.fill ),       '_'\n        @eq ( Ωefft_152 = -> result.align ),      '>'\n        @eq ( Ωefft_153 = -> result.sign ),       '-'\n        @eq ( Ωefft_154 = -> result.symbol ),     '$'\n        @eq ( Ωefft_155 = -> result.zeros ),      true\n        @eq ( Ωefft_156 = -> result.width ),      20\n        @eq ( Ωefft_157 = -> result.separator ),  true\n        @eq ( Ωefft_158 = -> result.precision ),  4\n        @eq ( Ωefft_159 = -> result.trim ),       true\n        @eq ( Ωefft_160 = -> result.type ),       'f'\n        @eq ( Ωefft_161 = -> result.unit ),       'µ'\n        @eq ( Ωefft_162 = -> result.fspec ),      '_>-$020,.4~f/µ'\n        @eq ( Ωefft_163 = -> result.tail ),       ' whatever comes after the fspec'\n        return null\n      #.....................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true, show_passes: false, report_checks: false, }\n  ( t = new Test guytest_cfg ).test @effstring_tasks\n\n"
  ]
}