{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  internals:\n\n    #-------------------------------------------------------------------------------------------------------\n    jsid_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { _jsid_re } = require '../../../apps/interlex'\n      debug 'Ωilxt___1', _jsid_re\n      @eq ( Ωilxt___2 = -> ( 'abc'.match _jsid_re    )? ), true\n      @eq ( Ωilxt___3 = -> ( '$abc'.match _jsid_re   )? ), true\n      @eq ( Ωilxt___4 = -> ( '_abc$'.match _jsid_re  )? ), true\n      @eq ( Ωilxt___5 = -> ( '_abc3'.match _jsid_re  )? ), true\n      @eq ( Ωilxt___6 = -> ( '3_abc'.match _jsid_re  )? ), false\n      @eq ( Ωilxt___7 = -> ( '&%'.match _jsid_re     )? ), false\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    jump_spec_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { _jump_spec_re } = require '../../../apps/interlex'\n      debug 'Ωilxt___8', _jump_spec_re\n      #.....................................................................................................\n      @eq ( Ωilxt___9 = -> ( 'abc'.match _jump_spec_re     )? ), true\n      @eq ( Ωilxt__10 = -> ( '$abc'.match _jump_spec_re    )? ), true\n      @eq ( Ωilxt__11 = -> ( '_abc$'.match _jump_spec_re   )? ), true\n      @eq ( Ωilxt__12 = -> ( '_abc3'.match _jump_spec_re   )? ), true\n      @eq ( Ωilxt__13 = -> ( '..'.match _jump_spec_re      )? ), true\n      #.....................................................................................................\n      @eq ( Ωilxt__14 = -> ( 'abc'.match _jump_spec_re     ).groups ), { back: undefined, fore: 'abc' }\n      @eq ( Ωilxt__15 = -> ( '$abc'.match _jump_spec_re    ).groups ), { back: undefined, fore: '$abc' }\n      @eq ( Ωilxt__16 = -> ( '_abc$'.match _jump_spec_re   ).groups ), { back: undefined, fore: '_abc$' }\n      @eq ( Ωilxt__17 = -> ( '_abc3'.match _jump_spec_re   ).groups ), { back: undefined, fore: '_abc3' }\n      @eq ( Ωilxt__18 = -> ( '..'.match _jump_spec_re      ).groups ), { back: '..', fore: undefined }\n      #.....................................................................................................\n      @eq ( Ωilxt__19 = -> ( '[abc'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__20 = -> ( 'abc['.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__21 = -> ( ']abc'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__22 = -> ( 'abc]'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__23 = -> ( '3_abc'.match _jump_spec_re   )? ), false\n      @eq ( Ωilxt__24 = -> ( '&%'.match _jump_spec_re      )? ), false\n      @eq ( Ωilxt__25 = -> ( '.'.match _jump_spec_re       )? ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_jump: ->\n      { Grammar\n        Level\n        Token\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt__26 = -> Token._parse_jump 'somewhere'  ), { action: 'fore', target: 'somewhere', }\n      @eq ( Ωilxt__27 = -> Token._parse_jump '..'         ), { action: 'back', target: null, }\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_1: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        Level\n        Token\n        Lexeme\n        rx      } = ILX\n      #===========================================================================================================\n      g                 = new Grammar { name: 'g', }\n      gnd               = g.new_level { name: 'gnd', }\n      number_tk_matcher = rx\"[0-9]+\"\n      number_tk         = gnd.new_token { name: 'number', matcher: number_tk_matcher, }\n      number_lx         = null\n      #.....................................................................................................\n      @eq ( Ωilxt__28 = -> g.start_level instanceof Level                                ), true\n      @eq ( Ωilxt__29 = -> g.start_level                                                 ), gnd\n      @eq ( Ωilxt__30 = -> g.start_level_name                                            ), 'gnd'\n      @eq ( Ωilxt__31 = -> g.name                                                        ), 'g'\n      @eq ( Ωilxt__32 = -> g.levels instanceof Object                                    ), true\n      @eq ( Ωilxt__33 = -> g.levels.gnd                                                  ), gnd\n      #.....................................................................................................\n      @eq ( Ωilxt__34 = -> gnd instanceof Level                                          ), true\n      @eq ( Ωilxt__35 = -> gnd.name                                                      ), 'gnd'\n      @eq ( Ωilxt__36 = -> gnd.grammar                                                   ), g\n      @eq ( Ωilxt__37 = -> gnd.tokens instanceof Array                                   ), true\n      @eq ( Ωilxt__38 = -> gnd.tokens.length                                             ), 1\n      @eq ( Ωilxt__39 = -> gnd.tokens[ 0 ]                                               ), number_tk\n      #.....................................................................................................\n      @eq ( Ωilxt__40 = -> number_tk instanceof Token                                    ), true\n      @eq ( Ωilxt__41 = -> number_tk.name                                                ), 'number'\n      @eq ( Ωilxt__42 = -> number_tk.level                                               ), gnd\n      @eq ( Ωilxt__43 = -> number_tk.grammar                                             ), g\n      @eq ( Ωilxt__44 = -> number_tk.matcher is number_tk_matcher                        ), true\n      @eq ( Ωilxt__45 = -> number_tk.jump                                                ), null\n      @eq ( Ωilxt__46 = -> number_tk.jump_spec                                           ), null\n      #.....................................................................................................\n      @eq ( Ωilxt__47 = -> ( number_lx = number_tk.match_at 0, '398' )?                  ), true\n      @eq ( Ωilxt__48 = -> number_lx instanceof Lexeme                                   ), true\n      @eq ( Ωilxt__49 = -> number_lx.name                                                ), 'number'\n      @eq ( Ωilxt__50 = -> number_lx.fqname                                              ), 'gnd.number'\n      @eq ( Ωilxt__51 = -> number_lx.level                                               ), gnd\n      @eq ( Ωilxt__52 = -> number_lx.hit                                                 ), '398'\n      @eq ( Ωilxt__53 = -> number_lx.start                                               ), 0\n      @eq ( Ωilxt__54 = -> number_lx.stop                                                ), 3\n      #.....................................................................................................\n      @eq ( Ωilxt__55 = -> ( number_lx = number_tk.match_at 7, 'abcdefgh00102xyz' )?     ), false\n      @eq ( Ωilxt__56 = -> ( number_lx = number_tk.match_at 8, 'abcdefgh00102xyz' )?     ), true\n      @eq ( Ωilxt__57 = -> number_lx instanceof Lexeme                                   ), true\n      @eq ( Ωilxt__58 = -> number_lx.name                                                ), 'number'\n      @eq ( Ωilxt__59 = -> number_lx.fqname                                              ), 'gnd.number'\n      @eq ( Ωilxt__60 = -> number_lx.level                                               ), gnd\n      @eq ( Ωilxt__61 = -> number_lx.hit                                                 ), '00102'\n      @eq ( Ωilxt__62 = -> number_lx.start                                               ), 8\n      @eq ( Ωilxt__63 = -> number_lx.stop                                                ), 13\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    new_regex_tag_preview: ->\n      # { Grammar\n      #   rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        { regex } = require '../../../apps/interlex/node_modules/regex'\n        # thx to https://github.com/loveencounterflow/coffeescript/commit/27e0e4cfee65ec7e1404240ccec6389b85ae9e69\n        VALID_FLAGS  = /^(?!.*(.).*\\1)[dgimsuvy]*$/\n        new_regex_tag = ( flags = 'dy' ) ->\n          R = ( P... ) -> regex P...\n          return new Proxy R,\n            get: ( target, key ) ->\n              return undefined if key is Symbol.toStringTag\n              local_flags = [ ( ( new Set flags ).union new Set key )..., ].join ''\n              urge 'Ωilxt__64', \"local_flags\", ( rpr local_flags ), VALID_FLAGS.test local_flags\n              unless VALID_FLAGS.test local_flags\n                throw new Error \"invalid flags present in #{rpr key}\"\n              return target local_flags\n        debug 'Ωilxt__65', rx = new_regex_tag 'dy'\n        debug 'Ωilxt__66', ( new_regex_tag 'dy' )\"[a-z]\"\n        debug 'Ωilxt__67', ( new_regex_tag 'dy' ).si\n        debug 'Ωilxt__68', ( new_regex_tag 'dy' ).si\"[a-z]\"\n        @throws ( Ωilxt__69 = -> ( new_regex_tag 'dy' ).ab\"[a-z]\" ), /invalid flags/\n        # rx\"x\"\n        # ( rx 's' )\n        # debug ( rx 's' )\"x#{/a/i}\"\n        # debug ( rx 's' )\"x#{/a/i}\"\n        # # debug /\\p{ghfghfgh}/v\n        # debug ( rx 's' )\"s) x#{/a/i}\"\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    rx_flags: ->\n      { rx\n        new_regex_tag } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        re = rx\"x\"\n        @eq ( Ωilxt__70 = -> re.hasIndices    ), true\n        @eq ( Ωilxt__71 = -> re.global        ), false\n        @eq ( Ωilxt__72 = -> re.ignoreCase    ), false\n        @eq ( Ωilxt__73 = -> re.multiline     ), false\n        @eq ( Ωilxt__74 = -> re.dotAll        ), false\n        @eq ( Ωilxt__75 = -> re.unicode       ), false\n        @eq ( Ωilxt__76 = -> re.unicodeSets   ), true\n        @eq ( Ωilxt__77 = -> re.sticky        ), true\n        return null\n      #.....................................................................................................\n      do =>\n        re = rx.si\"x\"\n        @eq ( Ωilxt__78 = -> re.hasIndices    ), true\n        @eq ( Ωilxt__79 = -> re.global        ), false\n        @eq ( Ωilxt__80 = -> re.ignoreCase    ), true\n        @eq ( Ωilxt__81 = -> re.multiline     ), false\n        @eq ( Ωilxt__82 = -> re.dotAll        ), true\n        @eq ( Ωilxt__83 = -> re.unicode       ), false\n        @eq ( Ωilxt__84 = -> re.unicodeSets   ), true\n        @eq ( Ωilxt__85 = -> re.sticky        ), true\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    numbering: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        rx      } = ILX\n      #=====================================================================================================\n      new_grammar = ( cfg ) ->\n        g         = new Grammar { name: 'g', cfg..., }\n        gnd       = g.new_level { name: 'gnd', }\n        #.....................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n        gnd.new_token       { name: 'text',           matcher: rx\"[^a-zA-Z0-9\\s]+\",         }\n        #.....................................................................................................\n        return g\n      #.....................................................................................................\n      do =>\n        g = new_grammar()\n        @eq ( Ωilxt__86 = -> g.cfg.counter_name   ), 'line_nr'\n        @eq ( Ωilxt__87 = -> g.cfg.counter_step   ), +1\n        @eq ( Ωilxt__88 = -> g.cfg.counter_value  ), 1\n        @eq ( Ωilxt__89 = -> g.state.count        ), 1\n        probes_and_matchers = [\n          [ \"1st line\",           1, ]\n          [ \"2nd line\",           2, ]\n          [ \"3rd line\",           3, ]\n          [ \"4th line (and EOF)\", 4, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt__90', rpr probe\n          tokens = g.get_tokens probe\n          # urge 'Ωilxt__91', tokens\n          @eq ( Ωilxt__92 = -> tokens[ 0 ].line_nr ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        g = new_grammar { counter_name: 'test_id', counter_step: -1, counter_value: 10, }\n        @eq ( Ωilxt__93 = -> g.cfg.counter_name   ), 'test_id'\n        @eq ( Ωilxt__94 = -> g.cfg.counter_step   ), -1\n        @eq ( Ωilxt__95 = -> g.cfg.counter_value  ), 10\n        @eq ( Ωilxt__96 = -> g.state.count        ), 10\n        probes_and_matchers = [\n          [ \"1st line\",           10, ]\n          [ \"2nd line\",           9, ]\n          [ \"3rd line\",           8, ]\n          [ \"4th line (and EOF)\", 7, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt__97', rpr probe\n          tokens = g.get_tokens probe\n          # urge 'Ωilxt__98', tokens\n          urge 'Ωilxt__99', g\n          urge 'Ωilxt_100', g.cfg\n          urge 'Ωilxt_101', g.state\n          @eq ( Ωilxt_102 = -> tokens[ 0 ].test_id ), matcher\n        return null\n      #.....................................................................................................\n      return null\n\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    demo: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #===========================================================================================================\n      g         = new Grammar { name: 'g', }\n      gnd       = g.new_level { name: 'gnd', }\n      string11  = g.new_level { name: 'string11', }\n      string12  = g.new_level { name: 'string12', }\n      # debug 'Ωilxt_103', [ string11, string12, ]\n      # console.debug 'Ωilxt_104', [ string11, string12, ]\n      # process.exit 111\n      #.........................................................................................................\n      gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11', }\n      gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12', }\n      gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n      #.........................................................................................................\n      string11.new_token  { name: 'string11_stop',  matcher: rx\"(?!<\\\\)'\",                jump: '..', }\n      string11.new_token  { name: 'text',           matcher: rx\"[^']*\",                   }\n      #.........................................................................................................\n      debug 'Ωilxt_105', g\n      debug 'Ωilxt_106', g.levels\n      debug 'Ωilxt_107', g.levels.gnd\n      debug 'Ωilxt_108', g.levels.gnd.tokens\n      debug 'Ωilxt_109', gnd\n      debug 'Ωilxt_110', token for token from gnd\n      #.........................................................................................................\n      show_lexeme = ( lexeme ) ->\n        { name\n          fqname\n          start\n          stop\n          hit\n          jump\n          jump_spec\n          groups  } = lexeme\n        groups_rpr  = if groups?  then ( rpr { groups..., } ) else ''\n        jump_rpr    = jump_spec ? ''\n        urge 'Ωilxt_111', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{fqname}:<20c; #{rpr hit}:<30c; #{jump_rpr}:<15c; #{groups_rpr}\"\n      #.........................................................................................................\n      sources = [\n        \"Alice in Cairo 1912 (approximately)\"\n        \"Alice in Cairo 1912 'approximately'\"\n        ]\n      #.........................................................................................................\n      for source from sources\n        info 'Ωilxt_112', rpr source\n        for lexeme from g.walk_tokens source\n          show_lexeme lexeme\n      #.........................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @interlex_tasks\n  # ( new Test { throw_on_error: true, } ).test { new_regex_tag_preview: @interlex_tasks.basics.new_regex_tag_preview, }\n  # demo()\n  # demo_jsidentifier()\n  do =>\n  f = ->\n    help 'Ωilxt_113', Array.from 'a🈯z'\n    help 'Ωilxt_114', 'a🈯z'.split /(.)/u\n    help 'Ωilxt_115', 'a🈯z'.split( /(.)/v )\n    help 'Ωilxt_116', 'a🈯z'.split( /(.)/d )\n    help 'Ωilxt_117', match = 'a🈯z'.match /^(?<head>[a-z]+)(?<other>[^a-z]+)(?<tail>[a-z]+)/d\n    help 'Ωilxt_118', { match.groups..., }\n    help 'Ωilxt_119', { match.indices.groups..., }\n    # help 'Ωilxt_120', rx\".\"\n    # help 'Ωilxt_121', rx/./\n\n\n"
  ]
}