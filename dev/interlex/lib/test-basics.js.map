{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\ncondense_lexemes = ( lexemes ) ->\n  lexemes = [ lexemes, ] unless Array.isArray lexemes\n  ( \"#{lexeme.fqname}#{rpr lexeme.hit}\" for lexeme from lexemes ).join '|'\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  internals:\n\n    #-------------------------------------------------------------------------------------------------------\n    jsid_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { internals } = require '../../../apps/interlex'\n      { jsid_re   } = internals\n      debug 'Ωilxt___1', jsid_re\n      @eq ( Ωilxt___2 = -> ( 'abc'.match jsid_re    )? ), true\n      @eq ( Ωilxt___3 = -> ( '$abc'.match jsid_re   )? ), true\n      @eq ( Ωilxt___4 = -> ( '_abc$'.match jsid_re  )? ), true\n      @eq ( Ωilxt___5 = -> ( '_abc3'.match jsid_re  )? ), true\n      @eq ( Ωilxt___6 = -> ( '3_abc'.match jsid_re  )? ), false\n      @eq ( Ωilxt___7 = -> ( '&%'.match jsid_re     )? ), false\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    jump_spec_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { internals     } = require '../../../apps/interlex'\n      { jump_spec_re  } = internals\n      #.....................................................................................................\n      @eq ( Ωilxt___8 = -> ( 'abc'.match jump_spec_re     )? ), true\n      @eq ( Ωilxt___9 = -> ( '$abc'.match jump_spec_re    )? ), true\n      @eq ( Ωilxt__10 = -> ( '_abc$'.match jump_spec_re   )? ), true\n      @eq ( Ωilxt__11 = -> ( '_abc3'.match jump_spec_re   )? ), true\n      @eq ( Ωilxt__12 = -> ( '..'.match jump_spec_re      )? ), true\n      #.....................................................................................................\n      @eq ( Ωilxt__13 = -> ( 'abc'.match jump_spec_re     ).groups ), { back: undefined, fore: 'abc' }\n      @eq ( Ωilxt__14 = -> ( '$abc'.match jump_spec_re    ).groups ), { back: undefined, fore: '$abc' }\n      @eq ( Ωilxt__15 = -> ( '_abc$'.match jump_spec_re   ).groups ), { back: undefined, fore: '_abc$' }\n      @eq ( Ωilxt__16 = -> ( '_abc3'.match jump_spec_re   ).groups ), { back: undefined, fore: '_abc3' }\n      @eq ( Ωilxt__17 = -> ( '..'.match jump_spec_re      ).groups ), { back: '..', fore: undefined }\n      #.....................................................................................................\n      @eq ( Ωilxt__18 = -> ( '[abc'.match jump_spec_re    )? ), false\n      @eq ( Ωilxt__19 = -> ( 'abc['.match jump_spec_re    )? ), false\n      @eq ( Ωilxt__20 = -> ( ']abc'.match jump_spec_re    )? ), false\n      @eq ( Ωilxt__21 = -> ( 'abc]'.match jump_spec_re    )? ), false\n      @eq ( Ωilxt__22 = -> ( '3_abc'.match jump_spec_re   )? ), false\n      @eq ( Ωilxt__23 = -> ( '&%'.match jump_spec_re      )? ), false\n      @eq ( Ωilxt__24 = -> ( '.'.match jump_spec_re       )? ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_jump: ->\n      { Grammar\n        Level\n        Token\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt__25 = -> Token._parse_jump 'somewhere'  ), { action: 'fore', target: 'somewhere', }\n      @eq ( Ωilxt__26 = -> Token._parse_jump '..'         ), { action: 'back', target: null, }\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    sort_lexemes_by_length_dec: ->\n      { internals } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt__27 = -> internals.sort_lexemes_by_length_dec []                                    ), []\n      @eq ( Ωilxt__28 = -> internals.sort_lexemes_by_length_dec [ '1', ]                              ), [ '1' ]\n      @eq ( Ωilxt__29 = -> internals.sort_lexemes_by_length_dec [ '1', 'i', ]                         ), [ '1', 'i' ]\n      @eq ( Ωilxt__30 = -> internals.sort_lexemes_by_length_dec [ '1', '123', '1', '1234', ]          ), [ '1234', '123', '1', '1' ]\n      @eq ( Ωilxt__31 = -> internals.sort_lexemes_by_length_dec [ 'abcd', '1234', '1', '123', 'i', ]  ), [ 'abcd', '1234', '123', '1', 'i' ]\n      @eq ( Ωilxt__32 = -> internals.sort_lexemes_by_length_dec [ '1234', 'abcd', '1', '123', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__33 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', 'abcd', '123', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__34 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', '123', 'abcd', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__35 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', '123', 'i', 'abcd', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  regexes:\n\n    #-------------------------------------------------------------------------------------------------------\n    new_implementation: ->\n      { rx\n        new_regex_tag\n        internals       } = require '../../../apps/interlex'\n      #=====================================================================================================\n      @throws ( Ωilxt__36 = -> internals.normalize_regex_flags()                ), /Cannot destructure property 'flags'/\n      @throws ( Ωilxt__37 = -> internals.normalize_regex_flags undefined        ), /Cannot destructure property 'flags'/\n      @throws ( Ωilxt__38 = -> internals.normalize_regex_flags null             ), /Cannot destructure property 'flags'/\n      @eq ( Ωilxt__39 = -> internals.normalize_regex_flags { flags: '',         mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__40 = -> internals.normalize_regex_flags { flags: 'd',        mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__41 = -> internals.normalize_regex_flags { flags: 'y',        mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__42 = -> internals.normalize_regex_flags { flags: 'dy',       mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__43 = -> internals.normalize_regex_flags { flags: 'yd',       mode: 'slr', } ), 'dy'\n      #.....................................................................................................\n      @eq ( Ωilxt__44 = -> internals.normalize_regex_flags { flags: 'i',        mode: 'slr', } ), 'diy'\n      @eq ( Ωilxt__45 = -> internals.normalize_regex_flags { flags: 'g',        mode: 'slr', } ), 'dgy'\n      @eq ( Ωilxt__46 = -> internals.normalize_regex_flags { flags: 'm',        mode: 'slr', } ), 'dmy'\n      @eq ( Ωilxt__47 = -> internals.normalize_regex_flags { flags: 's',        mode: 'slr', } ), 'dsy'\n      @eq ( Ωilxt__48 = -> internals.normalize_regex_flags { flags: 'dgimsuvy', mode: 'slr', } ), 'dgimsy'\n      #.....................................................................................................\n      @throws ( Ωilxt__49 = -> internals.normalize_regex_flags { flags: 'a',    mode: 'slr', } ), /illegal or duplicate flags/\n      @throws ( Ωilxt__50 = -> internals.normalize_regex_flags { flags: 'yy',   mode: 'slr', } ), /illegal or duplicate flags/\n      #-----------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__51 = -> internals.normalize_regex /./              ), /./dvy\n      @eq ( Ωilxt__52 = -> internals.normalize_regex /./d             ), /./dvy\n      @eq ( Ωilxt__53 = -> internals.normalize_regex /./y             ), /./dvy\n      @eq ( Ωilxt__54 = -> internals.normalize_regex /./dy            ), /./dvy\n      @eq ( Ωilxt__55 = -> internals.normalize_regex /./yd            ), /./dvy\n      #.....................................................................................................\n      @eq ( Ωilxt__56 = -> internals.normalize_regex /./i             ), /./divy\n      @eq ( Ωilxt__57 = -> internals.normalize_regex /./g             ), /./dgvy\n      @eq ( Ωilxt__58 = -> internals.normalize_regex /./m             ), /./dmvy\n      @eq ( Ωilxt__59 = -> internals.normalize_regex /./s             ), /./dsvy\n      @eq ( Ωilxt__60 = -> internals.normalize_regex /./dgimsvy       ), /./dgimsvy\n      @eq ( Ωilxt__61 = -> internals.normalize_regex /./dgimsuy       ), /./dgimsvy\n      #.....................................................................................................\n      @throws ( Ωilxt__62 = -> internals.normalize_regex()            ), /expected a regex, got/\n      @throws ( Ωilxt__63 = -> internals.normalize_regex 'helo'       ), /expected a regex, got/\n      #-----------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__64 = -> ( new_regex_tag ''       )'.'              ), /./dvy\n      @eq ( Ωilxt__65 = -> ( new_regex_tag 'd'      )'.'              ), /./dvy\n      @eq ( Ωilxt__66 = -> ( new_regex_tag 'y'      )'.'              ), /./dvy\n      @eq ( Ωilxt__67 = -> ( new_regex_tag 'dy'     )'.'              ), /./dvy\n      @eq ( Ωilxt__68 = -> ( new_regex_tag 'yd'     )'.'              ), /./dvy\n      @eq ( Ωilxt__69 = -> ( new_regex_tag 'd'      ).d'.'            ), /./dvy\n      @eq ( Ωilxt__70 = -> ( new_regex_tag 'y'      ).y'.'            ), /./dvy\n      @eq ( Ωilxt__71 = -> ( new_regex_tag 'dy'     ).dy'.'           ), /./dvy\n      @eq ( Ωilxt__72 = -> ( new_regex_tag 'yd'     ).yd'.'           ), /./dvy\n      @eq ( Ωilxt__73 = -> ( new_regex_tag ''       ).d'.'            ), /./dvy\n      @eq ( Ωilxt__74 = -> ( new_regex_tag ''       ).y'.'            ), /./dvy\n      @eq ( Ωilxt__75 = -> ( new_regex_tag ''       ).dy'.'           ), /./dvy\n      @eq ( Ωilxt__76 = -> ( new_regex_tag ''       ).yd'.'           ), /./dvy\n      #.....................................................................................................\n      @eq ( Ωilxt__77 = -> ( new_regex_tag ''       ).i'.'            ), /./divy\n      @eq ( Ωilxt__78 = -> ( new_regex_tag ''       ).g'.'            ), /./dgvy\n      @eq ( Ωilxt__79 = -> ( new_regex_tag ''       ).m'.'            ), /./dmvy\n      @eq ( Ωilxt__80 = -> ( new_regex_tag ''       ).s'.'            ), /./dsvy\n      @eq ( Ωilxt__81 = -> ( new_regex_tag ''       ).dgimsvy'.'      ), /./dgimsvy\n      @eq ( Ωilxt__82 = -> ( new_regex_tag ''       ).dgimsuy'.'      ), /./dgimsvy\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_1: ->\n      ILX                 = require '../../../apps/interlex'\n      { Grammar\n        Level\n        Token\n        Lexeme\n        rx\n        internals       } = ILX\n      #===========================================================================================================\n      g                 = new Grammar { name: 'g', }\n      gnd               = g.new_level { name: 'gnd', }\n      number_tk_matcher = rx\"[0-9]+\"\n      number_tk         = gnd.new_token { name: 'number', matcher: number_tk_matcher, }\n      number_lx         = null\n      #.....................................................................................................\n      @eq ( Ωilxt__83 = -> g.start_level instanceof Level                                 ), true\n      @eq ( Ωilxt__84 = -> g.start_level                                                  ), gnd\n      @eq ( Ωilxt__85 = -> g.start_level_name                                             ), 'gnd'\n      @eq ( Ωilxt__86 = -> g.name                                                         ), 'g'\n      @eq ( Ωilxt__87 = -> g.levels instanceof Object                                     ), true\n      @eq ( Ωilxt__88 = -> g.levels.gnd                                                   ), gnd\n      #.....................................................................................................\n      @eq ( Ωilxt__89 = -> gnd instanceof Level                                           ), true\n      @eq ( Ωilxt__90 = -> gnd.name                                                       ), 'gnd'\n      @eq ( Ωilxt__91 = -> gnd.grammar                                                    ), g\n      @eq ( Ωilxt__92 = -> gnd.tokens instanceof Array                                    ), true\n      @eq ( Ωilxt__93 = -> gnd.tokens.length                                              ), 1\n      @eq ( Ωilxt__94 = -> gnd.tokens[ 0 ]                                                ), number_tk\n      #.....................................................................................................\n      @eq ( Ωilxt__95 = -> number_tk instanceof Token                                     ), true\n      @eq ( Ωilxt__96 = -> number_tk.name                                                 ), 'number'\n      @eq ( Ωilxt__97 = -> number_tk.level                                                ), gnd\n      @eq ( Ωilxt__98 = -> number_tk.grammar                                              ), g\n      @eq ( Ωilxt__99 = -> number_tk.matcher                                              ), /[0-9]+/dvy\n      @eq ( Ωilxt_100 = -> number_tk.matcher.hasIndices                                   ), true\n      @eq ( Ωilxt_101 = -> number_tk.matcher.sticky                                       ), true\n      @eq ( Ωilxt_102 = -> number_tk.matcher.unicodeSets                                  ), true\n      @eq ( Ωilxt_103 = -> number_tk.jump                                                 ), null\n      @eq ( Ωilxt_104 = -> number_tk.jump_spec                                            ), null\n      #.....................................................................................................\n      @eq ( Ωilxt_105 = -> ( number_lx = number_tk.match_at 0, '398ä' )?                  ), true\n      @eq ( Ωilxt_106 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt_107 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt_108 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt_109 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt_110 = -> number_lx.hit                                                  ), '398'\n      @eq ( Ωilxt_111 = -> number_lx.start                                                ), 0\n      @eq ( Ωilxt_112 = -> number_lx.stop                                                 ), 3\n      #.....................................................................................................\n      @eq ( Ωilxt_113 = -> ( number_lx = number_tk.match_at 7, 'abcdefgh00102xyz' )?      ), false\n      @eq ( Ωilxt_114 = -> ( number_lx = number_tk.match_at 8, 'abcdefgh00102xyz' )?      ), true\n      @eq ( Ωilxt_115 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt_116 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt_117 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt_118 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt_119 = -> number_lx.hit                                                  ), '00102'\n      @eq ( Ωilxt_120 = -> number_lx.start                                                ), 8\n      @eq ( Ωilxt_121 = -> number_lx.stop                                                 ), 13\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    new_regex_tag: ->\n      { rx\n        regex\n        internals\n        new_regex_tag } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt_122 = -> typeof   new_regex_tag 'dy'                                  ), 'function'\n      @eq ( Ωilxt_123 = -> typeof ( new_regex_tag 'dy'    ).si                          ), 'function'\n      @eq ( Ωilxt_124 = -> ( (      new_regex_tag 'dyis'  )\"[a-z]\" ) instanceof RegExp  ), true\n      #.....................................................................................................\n      @eq ( Ωilxt_125 = -> ( new_regex_tag 'dyis'  )\"[a-z]\"     ), /[a-z]/disvy\n      @eq ( Ωilxt_126 = -> ( new_regex_tag 'dy'    ).si\"[a-z]\"  ), /[a-z]/disvy\n      @eq ( Ωilxt_127 = -> ( new_regex_tag 'dys'   ).si\"[a-z]\"  ), /[a-z]/disvy\n      @eq ( Ωilxt_128 = -> ( new_regex_tag 'dys'   ).i\"[a-z]\"   ), /[a-z]/disvy\n      @eq ( Ωilxt_129 = -> ( new_regex_tag 'dysi'  )\"[a-z]\"     ), /[a-z]/disvy\n      @eq ( Ωilxt_130 = -> ( new_regex_tag 'v'     ).si\"[a-z]\"  ), /[a-z]/disvy\n      #.....................................................................................................\n      @throws ( Ωilxt_131 = -> ( new_regex_tag 'dy'    ).ab\"[a-z]\"  ), /illegal or duplicate flags/\n      @throws ( Ωilxt_132 = -> ( new_regex_tag 'dyab'  )\"[a-z]\"     ), /illegal or duplicate flags/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    normalize_regex: ->\n      { internals       } = require '../../../apps/interlex'\n      { normalize_regex } = internals\n      @eq ( Ωilxt_133 = -> typeof normalize_regex     ), 'function'\n      @eq ( Ωilxt_134 = -> normalize_regex /[a-z]/ig  ), /[a-z]/dgivy\n      @eq ( Ωilxt_135 = -> normalize_regex /[a-z]/i   ), /[a-z]/divy\n      @eq ( Ωilxt_136 = -> normalize_regex /[a-z]/u   ), /[a-z]/dvy\n      @eq ( Ωilxt_137 = -> normalize_regex /[a-z]/gv  ), /[a-z]/dgvy\n      @eq ( Ωilxt_138 = -> normalize_regex /[a-z]/gu  ), /[a-z]/dgvy\n      @eq ( Ωilxt_139 = -> normalize_regex /[a-z]/v   ), /[a-z]/dvy\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    rx_flags: ->\n      { rx } = require '../../../apps/interlex'\n      @eq ( Ωilxt_140 = -> ( rx\"x\"        ).flags ), 'dvy'\n      @eq ( Ωilxt_141 = -> ( rx.si\"x\"     ).flags ), 'disvy'\n      # @eq ( Ωilxt_142 = -> ( rx.sidvy\"x\"  ).flags ), 'disvy'\n      @eq ( Ωilxt_143 = -> ( rx.y\"x\"      ).flags ), 'dvy'\n      @eq ( Ωilxt_144 = -> rpr rx\"[abc]+\" ), '/[abc]+/dvy'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    numbering: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        rx      } = ILX\n      #=====================================================================================================\n      new_grammar = ( cfg ) ->\n        g         = new Grammar { name: 'g', cfg..., }\n        gnd       = g.new_level { name: 'gnd', }\n        #.....................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n        gnd.new_token       { name: 'text',           matcher: rx\"[^a-zA-Z0-9\\s]+\",         }\n        #.....................................................................................................\n        return g\n      #.....................................................................................................\n      do =>\n        g = new_grammar()\n        @eq ( Ωilxt_145 = -> g.cfg.counter_name   ), 'line_nr'\n        @eq ( Ωilxt_146 = -> g.cfg.counter_step   ), +1\n        @eq ( Ωilxt_147 = -> g.cfg.counter_value  ), 1\n        @eq ( Ωilxt_148 = -> g.state.count        ), 1\n        probes_and_matchers = [\n          [ \"1st line\",           1, ]\n          [ \"2nd line\",           2, ]\n          [ \"3rd line\",           3, ]\n          [ \"4th line (and EOF)\", 4, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt_149', rpr probe\n          lexemes = g.get_lexemes probe\n          urge 'Ωilxt_150', lexemes\n          @eq ( Ωilxt_151 = -> lexemes[ 0 ].line_nr ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        g = new_grammar { counter_name: 'test_id', counter_step: -1, counter_value: 10, }\n        @eq ( Ωilxt_152 = -> g.cfg.counter_name   ), 'test_id'\n        @eq ( Ωilxt_153 = -> g.cfg.counter_step   ), -1\n        @eq ( Ωilxt_154 = -> g.cfg.counter_value  ), 10\n        @eq ( Ωilxt_155 = -> g.state.count        ), 10\n        probes_and_matchers = [\n          [ \"1st line\",           10, ]\n          [ \"2nd line\",           9, ]\n          [ \"3rd line\",           8, ]\n          [ \"4th line (and EOF)\", 7, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt_156', rpr probe\n          lexemes = g.get_lexemes probe\n          # urge 'Ωilxt_157', lexemes\n          urge 'Ωilxt_158', g\n          urge 'Ωilxt_159', g.cfg\n          urge 'Ωilxt_160', g.state\n          @eq ( Ωilxt_161 = -> lexemes[ 0 ].test_id ), matcher\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_plain_regexes: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      probes_and_matchers = [\n        [ \"1st line\",           { length: 3, condensed: \"gnd.ordinal'1st'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"2nd line\",           { length: 3, condensed: \"gnd.ordinal'2nd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"3rd line\",           { length: 3, condensed: \"gnd.ordinal'3rd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"4th line (and EOF)\", { length: 9, condensed: \"gnd.ordinal'4th'|gnd.ws' '|gnd.word'line'|gnd.ws' '|gnd.other'('|gnd.word'and'|gnd.ws' '|gnd.word'EOF'|gnd.other')'\", }, ] ]\n      #-----------------------------------------------------------------------------------------------------\n      test = ( g ) =>\n        for [ probe, matcher, ] from probes_and_matchers\n          g.reset_count()\n          lexemes = g.get_lexemes probe\n          @eq ( Ωilxt_162 = -> condense_lexemes lexemes ), matcher.condensed\n          @eq ( Ωilxt_163 = -> lexemes.length ), matcher.length\n          g.reset_count()\n          @eq ( Ωilxt_164 = -> [ ( g.walk_lexemes probe )..., ] ), lexemes\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]+\",           }\n        gnd.new_token       { name: 'ordinal',        matcher: rx\"(?<ordinal>[0-9]+)(st|nd|rd|th)\",   }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                            }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                               }\n        gnd.new_token       { name: 'word',           matcher: rx.i\"[a-z]+\",                          }\n        gnd.new_token       { name: 'other',          matcher: rx.i\"[^a-z0-9\\s]+\",                    }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/dvy,            }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/dvy,  }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/dvy,                             }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/dvy,                                }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/divy,                            }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/divy,                      }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/,               }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/,     }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/v,              }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/u,    }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #.....................................................................................................\n      return null\n\n    # #-------------------------------------------------------------------------------------------------------\n    # can_use_zero_length_matchers: ->\n    #   { Grammar\n    #     rx      } = require '../../../apps/interlex'\n    #   #-----------------------------------------------------------------------------------------------------\n    #   probes_and_matchers = [\n    #     [ \"Alice has 431 owls\",           { length: 3, condensed: \"gnd.ordinal'1st'|gnd.ws' '|gnd.word'line'\", }, ]\n    #     ]\n    #   #-----------------------------------------------------------------------------------------------------\n    #   test = ( g ) =>\n    #     for [ probe, matcher, ] from probes_and_matchers\n    #       g.reset_count()\n    #       lexemes = g.get_lexemes probe\n    #       @eq ( Ωilxt_165 = -> condense_lexemes lexemes ), matcher.condensed\n    #       @eq ( Ωilxt_166 = -> lexemes.length ), matcher.length\n    #       g.reset_count()\n    #       @eq ( Ωilxt_167 = -> [ ( g.walk_lexemes probe )..., ] ), lexemes\n    #     return null\n    #   #-----------------------------------------------------------------------------------------------------\n    #   do =>\n    #     g         = new Grammar { name: 'g', }\n    #     gnd       = g.new_level { name: 'gnd', }\n    #     #...................................................................................................\n    #     gnd.new_token { name: 'letters',          matcher: /[a-z]+/i,       }\n    #     gnd.new_token { name: 'before_digits',    matcher: /(?<![0-9])(?=[0-9])/i,    }\n    #     gnd.new_token { name: 'digits',           matcher: /[0-9]+/i,       }\n    #     gnd.new_token { name: 'ws',               matcher: /\\s+/i,          }\n    #     #...................................................................................................\n    #     # test g\n    #     source = probes_and_matchers[ 0 ][ 0 ]\n    #     # for lexeme from g.walk_lexemes source\n    #     #   # info 'Ωilxt_168', condense_lexemes [ lexeme]\n    #     #   urge 'Ωilxt_169', f\"#{lexeme.name}:<15c;#{rpr lexeme.hit}:<20c;\"\n    #     urge 'Ωilxt_170', condense_lexemes gnd.match_all_at 10, source\n    #   #.....................................................................................................\n    #   return null\n\n  #=========================================================================================================\n  strategies:\n\n    #-------------------------------------------------------------------------------------------------------\n    levels_implement_strategies: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', shortest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.one_letter'a'\", ]\n          [ [ 1, 'abcd1234', ], \"first.one_letter'b'\", ]\n          [ [ 2, 'abcd1234', ], \"first.one_letter'c'\", ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\", ]\n          [ [ 4, 'abcd1234', ], \"first.one_digit'1'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.one_digit'2'\",  ]\n          [ [ 0, '123abc',   ], \"first.one_digit'1'\",  ]\n          [ [ 1, '123abc',   ], \"first.one_digit'2'\",  ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",  ]\n          [ [ 3, '123abc',   ], \"first.one_letter'a'\", ]\n          [ [ 4, '123abc',   ], \"first.one_letter'b'\", ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_171 = -> condense_lexemes first.match_first_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', longest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_172 = -> condense_lexemes first.match_first_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', shortest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_173 = -> condense_lexemes first.match_longest_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', longest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_174 = -> condense_lexemes first.match_longest_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', scrambled tokens ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        shuffle = GUY.rnd.get_shuffle 0.9876, 0.3456\n        for _ in [ 1 .. 100 ]\n          do =>\n            g           = new Grammar()\n            first       = g.new_level { name: 'first', }\n            token_cfgs  = shuffle [\n              { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n              { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n              { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n              { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n              { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n              { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n              { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n              { name: 'four_letters',   matcher: /[a-z]{4}/i, } ]\n            first.new_token token_cfg for token_cfg in token_cfgs\n            #...............................................................................................\n            for [ [ position, source, ], matcher, ] in probes_and_matchers\n              @eq ( Ωilxt_175 = -> condense_lexemes first.match_longest_at position, source ), matcher\n            #...............................................................................................\n            return null\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    grammars_use_strategies: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', scrambled tokens ###\n        probes_and_matchers = [\n          [ 'abcd1234',           \"first.four_letters'abcd'|first.four_digits'1234'\",                                                                       ]\n          [ 'abcdefgh1234567890', \"first.four_letters'abcd'|first.four_letters'efgh'|first.four_digits'1234'|first.four_digits'5678'|first.two_digits'90'\", ]\n          [ '123abc',             \"first.three_digits'123'|first.three_letters'abc'\",                                                                       ]\n          ]\n        #.....................................................................................................\n        shuffle = GUY.rnd.get_shuffle 0.9876, 0.3456\n        for _ in [ 1 .. 100 ]\n          do =>\n            g           = new Grammar { strategy: 'longest', }\n            first       = g.new_level { name: 'first', }\n            token_cfgs  = shuffle [\n              { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n              { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n              { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n              { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n              { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n              { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n              { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n              { name: 'four_letters',   matcher: /[a-z]{4}/i, } ]\n            first.new_token token_cfg for token_cfg in token_cfgs\n            #...............................................................................................\n            @eq ( Ωilxt_176 = -> g.cfg.strategy ), 'longest'\n            @eq ( Ωilxt_177 = -> first.strategy ), 'longest'\n            for [ source, matcher, ] in probes_and_matchers\n              @eq ( Ωilxt_178 = -> condense_lexemes g.get_lexemes source ), matcher\n            #...............................................................................................\n            return null\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', scrambled tokens ###\n        probes_and_matchers = [\n          [ 'abcd1234',     \"first.two_letters'ab'|first.two_letters'cd'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'\", ]\n          [ 'abcde12345',   \"first.two_letters'ab'|first.two_letters'cd'|first.one_letter'e'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'|first.one_digit'5'\", ]\n          [ 'abcdef123456', \"first.two_letters'ab'|first.two_letters'cd'|first.two_letters'ef'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'|first.one_digit'5'|first.one_digit'6'\", ]\n          [ '123abc',       \"first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.two_letters'ab'|first.one_letter'c'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar { strategy: 'first', }\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        #...................................................................................................\n        @eq ( Ωilxt_179 = -> g.cfg.strategy ), 'first'\n        @eq ( Ωilxt_180 = -> first.strategy ), 'first'\n        for [ source, matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_181 = -> condense_lexemes g.get_lexemes source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', long tokens first ###\n        probes_and_matchers = [\n          [ 'abcd1234',     \"first.four_letters'abcd'|first.four_digits'1234'\", ]\n          [ 'abcde12345',   \"first.four_letters'abcd'|first.one_letter'e'|first.four_digits'1234'|first.one_digit'5'\", ]\n          [ 'abcdef123456', \"first.four_letters'abcd'|first.two_letters'ef'|first.four_digits'1234'|first.two_digits'56'\", ]\n          [ '123abc',       \"first.three_digits'123'|first.three_letters'abc'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar { strategy: 'first', }\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        #...................................................................................................\n        @eq ( Ωilxt_182 = -> g.cfg.strategy ), 'first'\n        @eq ( Ωilxt_183 = -> first.strategy ), 'first'\n        for [ source, matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_184 = -> condense_lexemes g.get_lexemes source ), matcher\n        return null\n      #.....................................................................................................\n      return null\n\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    demo: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #===========================================================================================================\n      g         = new Grammar { name: 'g', }\n      gnd       = g.new_level { name: 'gnd', }\n      string11  = g.new_level { name: 'string11', }\n      string12  = g.new_level { name: 'string12', }\n      # debug 'Ωilxt_185', [ string11, string12, ]\n      # console.debug 'Ωilxt_186', [ string11, string12, ]\n      # process.exit 111\n      #.........................................................................................................\n      gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11', }\n      gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12', }\n      gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n      #.........................................................................................................\n      string11.new_token  { name: 'string11_stop',  matcher: rx\"(?!<\\\\)'\",                jump: '..', }\n      string11.new_token  { name: 'text',           matcher: rx\"[^']*\",                   }\n      #.........................................................................................................\n      debug 'Ωilxt_187', g\n      debug 'Ωilxt_188', g.levels\n      debug 'Ωilxt_189', g.levels.gnd\n      debug 'Ωilxt_190', g.levels.gnd.tokens\n      debug 'Ωilxt_191', gnd\n      debug 'Ωilxt_192', token for token from gnd\n      #.........................................................................................................\n      show_lexeme = ( lexeme ) ->\n        { name\n          fqname\n          start\n          stop\n          hit\n          jump\n          jump_spec\n          groups  } = lexeme\n        groups_rpr  = if groups?  then ( rpr { groups..., } ) else ''\n        jump_rpr    = jump_spec ? ''\n        urge 'Ωilxt_193', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{fqname}:<20c; #{rpr hit}:<30c; #{jump_rpr}:<15c; #{groups_rpr}\"\n      #.........................................................................................................\n      sources = [\n        \"Alice in Cairo 1912 (approximately)\"\n        \"Alice in Cairo 1912 'approximately'\"\n        ]\n      #.........................................................................................................\n      for source from sources\n        info 'Ωilxt_194', rpr source\n        for lexeme from g.walk_lexemes source\n          show_lexeme lexeme\n      #.........................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @interlex_tasks\n  # ( new Test { throw_on_error: false, } ).test @interlex_tasks\n  # ( new Test { throw_on_error: true, } ).test { regexes: @interlex_tasks.basics.regexes, }\n  # ( new Test { throw_on_error: true, } ).test { new_implementation: @interlex_tasks.regexes.new_implementation, }\n  # ( new Test { throw_on_error: true, } ).test { can_use_zero_length_matchers: @interlex_tasks.basics.can_use_zero_length_matchers, }\n  # ( new Test { throw_on_error: true, } ).test { sort_lexemes_by_length_dec: @interlex_tasks.internals.sort_lexemes_by_length_dec, }\n  # ( new Test { throw_on_error: true, } ).test { demo: @interlex_tasks.demo.demo, }\n  # demo()\n  # demo_jsidentifier()\n  do =>\n  f = ->\n    help 'Ωilxt_195', Array.from 'a🈯z'\n    help 'Ωilxt_196', 'a🈯z'.split /(.)/u\n    help 'Ωilxt_197', 'a🈯z'.split( /(.)/v )\n    help 'Ωilxt_198', 'a🈯z'.split( /(.)/d )\n    help 'Ωilxt_199', match = 'a🈯z'.match /^(?<head>[a-z]+)(?<other>[^a-z]+)(?<tail>[a-z]+)/d\n    help 'Ωilxt_200', { match.groups..., }\n    help 'Ωilxt_201', { match.indices.groups..., }\n    # help 'Ωilxt_202', rx\".\"\n    # help 'Ωilxt_203', rx/./\n\n\n"
  ]
}