{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\ncondense_lexemes = ( lexemes ) ->\n  lexemes = [ lexemes, ] unless Array.isArray lexemes\n  ( \"#{lexeme?.fqname ? null}#{rpr lexeme?.hit ? null}\" for lexeme from lexemes ).join '|'\n\n#-----------------------------------------------------------------------------------------------------------\n# abbrlxm = ( lxm ) -> {\n#   level:  lxm?.level?.name ? null,\n#   fqname: lxm?.fqname      ? null,\n#   hit:    lxm?.hit         ? null,\n#   pos:    ( if lxm? then \"#{lxm.start}:#{lxm.stop}\" else null ), }\n\n#-----------------------------------------------------------------------------------------------------------\nabbrlxm = ( lxm ) ->\n  return null unless lxm?\n  R =\n    fqname: lxm.fqname\n    hit:    lxm.hit\n    pos:    \"#{lxm.lnr}:#{lxm.start}:#{lxm.stop}\"\n  R.data = { lxm.data..., } if lxm.has_data\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate_lexemes = ( lexemes ) ->\n  tabulate_lexeme lexeme for lexeme from lexemes\n  return lexemes\n\n#-----------------------------------------------------------------------------------------------------------\ntabulate_lexeme = ( lexeme ) ->\n  unless lexeme?\n    urge 'Ωilxt___1', lexeme\n  else\n    alxm      = abbrlxm lexeme\n    hit_rpr   = if lexeme.hit is '' then '' else rpr lexeme.hit\n    data_rpr  = if lexeme.has_data then rpr { lexeme.data..., } else ''\n    I         = GUY.trm.lime '▏'\n    # g         = GUY.trm.gold\n    urge 'Ωilxt___2', f\"\"\" \\\n      #{I} #{ lexeme.level.name }:<15c; \\\n      #{I} #{ lexeme.name       }:<15c; \\\n      #{I} #{ hit_rpr           }:<10c; \\\n      #{I} #{ alxm.pos          }:<10c; \\\n      #{I} #{ data_rpr          }:<50c; \\\n      #{I}\"\"\"\n  return lexeme\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  internals:\n\n    #-------------------------------------------------------------------------------------------------------\n    jsid_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { internals     } = require '../../../apps/interlex'\n      { slevithan_regex\n        jsid_re       } = internals\n      jsid_anchored_re  = slevithan_regex.regex\"^#{jsid_re}$\"\n      @eq ( Ωilxt___3 = -> jsid_anchored_re.flags ), 'v'\n      @eq ( Ωilxt___4 = -> ( ( '_abc3'  ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___5 = -> ( ( '_abc$'  ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___6 = -> ( ( '$abc'   ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___7 = -> ( ( 'abc'    ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___8 = -> ( ( '3_abc'  ).match jsid_anchored_re  )? ), false\n      @eq ( Ωilxt___9 = -> ( ( '&%'     ).match jsid_anchored_re  )? ), false\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    sort_lexemes_by_length_dec: ->\n      { internals } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt__10 = -> internals.sort_lexemes_by_length_dec []                                    ), []\n      @eq ( Ωilxt__11 = -> internals.sort_lexemes_by_length_dec [ '1', ]                              ), [ '1' ]\n      @eq ( Ωilxt__12 = -> internals.sort_lexemes_by_length_dec [ '1', 'i', ]                         ), [ '1', 'i' ]\n      @eq ( Ωilxt__13 = -> internals.sort_lexemes_by_length_dec [ '1', '123', '1', '1234', ]          ), [ '1234', '123', '1', '1' ]\n      @eq ( Ωilxt__14 = -> internals.sort_lexemes_by_length_dec [ 'abcd', '1234', '1', '123', 'i', ]  ), [ 'abcd', '1234', '123', '1', 'i' ]\n      @eq ( Ωilxt__15 = -> internals.sort_lexemes_by_length_dec [ '1234', 'abcd', '1', '123', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__16 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', 'abcd', '123', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__17 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', '123', 'abcd', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__18 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', '123', 'i', 'abcd', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  regexes:\n\n    #-------------------------------------------------------------------------------------------------------\n    new_implementation: ->\n      { rx\n        new_regex_tag\n        internals       } = require '../../../apps/interlex'\n      #=====================================================================================================\n      @throws ( Ωilxt__19 = -> internals.normalize_regex_flags()                ), /Cannot destructure property 'flags'/\n      @throws ( Ωilxt__20 = -> internals.normalize_regex_flags undefined        ), /Cannot destructure property 'flags'/\n      @throws ( Ωilxt__21 = -> internals.normalize_regex_flags null             ), /Cannot destructure property 'flags'/\n      @eq ( Ωilxt__22 = -> internals.normalize_regex_flags { flags: '',         mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__23 = -> internals.normalize_regex_flags { flags: 'd',        mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__24 = -> internals.normalize_regex_flags { flags: 'y',        mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__25 = -> internals.normalize_regex_flags { flags: 'dy',       mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__26 = -> internals.normalize_regex_flags { flags: 'yd',       mode: 'slr', } ), 'dy'\n      #.....................................................................................................\n      @eq ( Ωilxt__27 = -> internals.normalize_regex_flags { flags: 'i',        mode: 'slr', } ), 'diy'\n      @eq ( Ωilxt__28 = -> internals.normalize_regex_flags { flags: 'g',        mode: 'slr', } ), 'dgy'\n      @eq ( Ωilxt__29 = -> internals.normalize_regex_flags { flags: 'm',        mode: 'slr', } ), 'dmy'\n      @eq ( Ωilxt__30 = -> internals.normalize_regex_flags { flags: 's',        mode: 'slr', } ), 'dsy'\n      @eq ( Ωilxt__31 = -> internals.normalize_regex_flags { flags: 'dgimsuvy', mode: 'slr', } ), 'dgimsy'\n      #.....................................................................................................\n      @throws ( Ωilxt__32 = -> internals.normalize_regex_flags { flags: 'a',    mode: 'slr', } ), /illegal or duplicate flags/\n      @throws ( Ωilxt__33 = -> internals.normalize_regex_flags { flags: 'yy',   mode: 'slr', } ), /illegal or duplicate flags/\n      #-----------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__34 = -> internals.normalize_regex /./              ), /./dvy\n      @eq ( Ωilxt__35 = -> internals.normalize_regex /./d             ), /./dvy\n      @eq ( Ωilxt__36 = -> internals.normalize_regex /./y             ), /./dvy\n      @eq ( Ωilxt__37 = -> internals.normalize_regex /./dy            ), /./dvy\n      @eq ( Ωilxt__38 = -> internals.normalize_regex /./yd            ), /./dvy\n      #.....................................................................................................\n      @eq ( Ωilxt__39 = -> internals.normalize_regex /./i             ), /./divy\n      @eq ( Ωilxt__40 = -> internals.normalize_regex /./g             ), /./dgvy\n      @eq ( Ωilxt__41 = -> internals.normalize_regex /./m             ), /./dmvy\n      @eq ( Ωilxt__42 = -> internals.normalize_regex /./s             ), /./dsvy\n      @eq ( Ωilxt__43 = -> internals.normalize_regex /./dgimsvy       ), /./dgimsvy\n      @eq ( Ωilxt__44 = -> internals.normalize_regex /./dgimsuy       ), /./dgimsvy\n      #.....................................................................................................\n      @throws ( Ωilxt__45 = -> internals.normalize_regex()            ), /expected a regex, got/\n      @throws ( Ωilxt__46 = -> internals.normalize_regex 'helo'       ), /expected a regex, got/\n      #-----------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__47 = -> ( new_regex_tag ''       )'.'              ), /./dvy\n      @eq ( Ωilxt__48 = -> ( new_regex_tag 'd'      )'.'              ), /./dvy\n      @eq ( Ωilxt__49 = -> ( new_regex_tag 'y'      )'.'              ), /./dvy\n      @eq ( Ωilxt__50 = -> ( new_regex_tag 'dy'     )'.'              ), /./dvy\n      @eq ( Ωilxt__51 = -> ( new_regex_tag 'yd'     )'.'              ), /./dvy\n      @eq ( Ωilxt__52 = -> ( new_regex_tag 'd'      ).d'.'            ), /./dvy\n      @eq ( Ωilxt__53 = -> ( new_regex_tag 'y'      ).y'.'            ), /./dvy\n      @eq ( Ωilxt__54 = -> ( new_regex_tag 'dy'     ).dy'.'           ), /./dvy\n      @eq ( Ωilxt__55 = -> ( new_regex_tag 'yd'     ).yd'.'           ), /./dvy\n      @eq ( Ωilxt__56 = -> ( new_regex_tag ''       ).d'.'            ), /./dvy\n      @eq ( Ωilxt__57 = -> ( new_regex_tag ''       ).y'.'            ), /./dvy\n      @eq ( Ωilxt__58 = -> ( new_regex_tag ''       ).dy'.'           ), /./dvy\n      @eq ( Ωilxt__59 = -> ( new_regex_tag ''       ).yd'.'           ), /./dvy\n      #.....................................................................................................\n      @eq ( Ωilxt__60 = -> ( new_regex_tag ''       ).i'.'            ), /./divy\n      @eq ( Ωilxt__61 = -> ( new_regex_tag ''       ).g'.'            ), /./dgvy\n      @eq ( Ωilxt__62 = -> ( new_regex_tag ''       ).m'.'            ), /./dmvy\n      @eq ( Ωilxt__63 = -> ( new_regex_tag ''       ).s'.'            ), /./dsvy\n      @eq ( Ωilxt__64 = -> ( new_regex_tag ''       ).dgimsvy'.'      ), /./dgimsvy\n      @eq ( Ωilxt__65 = -> ( new_regex_tag ''       ).dgimsuy'.'      ), /./dgimsvy\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_1: ->\n      ILX                 = require '../../../apps/interlex'\n      { Grammar\n        Level\n        Token\n        Lexeme\n        rx\n        internals       } = ILX\n      #===========================================================================================================\n      g                 = new Grammar { name: 'g', }\n      gnd               = g.new_level { name: 'gnd', }\n      number_tk_matcher = rx\"[0-9]+\"\n      number_tk         = gnd.new_token { name: 'number', matcher: number_tk_matcher, }\n      number_lx         = null\n      #.....................................................................................................\n      @eq ( Ωilxt__66 = -> g.start_level instanceof Level                                 ), true\n      @eq ( Ωilxt__67 = -> g.start_level                                                  ), gnd\n      @eq ( Ωilxt__68 = -> g.start_level_name                                             ), 'gnd'\n      @eq ( Ωilxt__69 = -> g.name                                                         ), 'g'\n      @eq ( Ωilxt__70 = -> g.levels instanceof Object                                     ), true\n      @eq ( Ωilxt__71 = -> g.levels.gnd                                                   ), gnd\n      #.....................................................................................................\n      @eq ( Ωilxt__72 = -> gnd instanceof Level                                           ), true\n      @eq ( Ωilxt__73 = -> gnd.name                                                       ), 'gnd'\n      @eq ( Ωilxt__74 = -> gnd.grammar                                                    ), g\n      @eq ( Ωilxt__75 = -> gnd.tokens instanceof Array                                    ), true\n      @eq ( Ωilxt__76 = -> gnd.tokens.length                                              ), 1\n      @eq ( Ωilxt__77 = -> gnd.tokens[ 0 ]                                                ), number_tk\n      #.....................................................................................................\n      @eq ( Ωilxt__78 = -> number_tk instanceof Token                                     ), true\n      @eq ( Ωilxt__79 = -> number_tk.name                                                 ), 'number'\n      @eq ( Ωilxt__80 = -> number_tk.level                                                ), gnd\n      @eq ( Ωilxt__81 = -> number_tk.grammar                                              ), g\n      @eq ( Ωilxt__82 = -> number_tk.matcher                                              ), /[0-9]+/dvy\n      @eq ( Ωilxt__83 = -> number_tk.matcher.hasIndices                                   ), true\n      @eq ( Ωilxt__84 = -> number_tk.matcher.sticky                                       ), true\n      @eq ( Ωilxt__85 = -> number_tk.matcher.unicodeSets                                  ), true\n      @eq ( Ωilxt__86 = -> number_tk.jump                                                 ), null\n      #.....................................................................................................\n      @eq ( Ωilxt__87 = -> ( number_lx = number_tk.match_at 0, '398ä' )?                  ), true\n      @eq ( Ωilxt__88 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt__89 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt__90 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt__91 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt__92 = -> number_lx.hit                                                  ), '398'\n      @eq ( Ωilxt__93 = -> number_lx.start                                                ), 0\n      @eq ( Ωilxt__94 = -> number_lx.stop                                                 ), 3\n      #.....................................................................................................\n      @eq ( Ωilxt__95 = -> ( number_lx = number_tk.match_at 7, 'abcdefgh00102xyz' )?      ), false\n      @eq ( Ωilxt__96 = -> ( number_lx = number_tk.match_at 8, 'abcdefgh00102xyz' )?      ), true\n      @eq ( Ωilxt__97 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt__98 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt__99 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt_100 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt_101 = -> number_lx.hit                                                  ), '00102'\n      @eq ( Ωilxt_102 = -> number_lx.start                                                ), 8\n      @eq ( Ωilxt_103 = -> number_lx.stop                                                 ), 13\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    new_regex_tag: ->\n      { rx\n        regex\n        internals\n        new_regex_tag } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt_104 = -> typeof   new_regex_tag 'dy'                                  ), 'function'\n      @eq ( Ωilxt_105 = -> typeof ( new_regex_tag 'dy'    ).si                          ), 'function'\n      @eq ( Ωilxt_106 = -> ( (      new_regex_tag 'dyis'  )\"[a-z]\" ) instanceof RegExp  ), true\n      #.....................................................................................................\n      @eq ( Ωilxt_107 = -> ( new_regex_tag 'dyis'  )\"[a-z]\"     ), /[a-z]/disvy\n      @eq ( Ωilxt_108 = -> ( new_regex_tag 'dy'    ).si\"[a-z]\"  ), /[a-z]/disvy\n      @eq ( Ωilxt_109 = -> ( new_regex_tag 'dys'   ).si\"[a-z]\"  ), /[a-z]/disvy\n      @eq ( Ωilxt_110 = -> ( new_regex_tag 'dys'   ).i\"[a-z]\"   ), /[a-z]/disvy\n      @eq ( Ωilxt_111 = -> ( new_regex_tag 'dysi'  )\"[a-z]\"     ), /[a-z]/disvy\n      @eq ( Ωilxt_112 = -> ( new_regex_tag 'v'     ).si\"[a-z]\"  ), /[a-z]/disvy\n      #.....................................................................................................\n      @throws ( Ωilxt_113 = -> ( new_regex_tag 'dy'    ).ab\"[a-z]\"  ), /illegal or duplicate flags/\n      @throws ( Ωilxt_114 = -> ( new_regex_tag 'dyab'  )\"[a-z]\"     ), /illegal or duplicate flags/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    normalize_regex: ->\n      { internals       } = require '../../../apps/interlex'\n      { normalize_regex } = internals\n      @eq ( Ωilxt_115 = -> typeof normalize_regex     ), 'function'\n      @eq ( Ωilxt_116 = -> normalize_regex /[a-z]/ig  ), /[a-z]/dgivy\n      @eq ( Ωilxt_117 = -> normalize_regex /[a-z]/i   ), /[a-z]/divy\n      @eq ( Ωilxt_118 = -> normalize_regex /[a-z]/u   ), /[a-z]/dvy\n      @eq ( Ωilxt_119 = -> normalize_regex /[a-z]/gv  ), /[a-z]/dgvy\n      @eq ( Ωilxt_120 = -> normalize_regex /[a-z]/gu  ), /[a-z]/dgvy\n      @eq ( Ωilxt_121 = -> normalize_regex /[a-z]/v   ), /[a-z]/dvy\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    rx_flags: ->\n      { rx } = require '../../../apps/interlex'\n      @eq ( Ωilxt_122 = -> ( rx\"x\"        ).flags ), 'dvy'\n      @eq ( Ωilxt_123 = -> ( rx.si\"x\"     ).flags ), 'disvy'\n      # @eq ( Ωilxt_124 = -> ( rx.sidvy\"x\"  ).flags ), 'disvy'\n      @eq ( Ωilxt_125 = -> ( rx.y\"x\"      ).flags ), 'dvy'\n      @eq ( Ωilxt_126 = -> rpr rx\"[abc]+\" ), '/[abc]+/dvy'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    numbering: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        rx      } = ILX\n      #=====================================================================================================\n      new_grammar = ( cfg ) ->\n        g         = new Grammar { name: 'g', cfg..., }\n        gnd       = g.new_level { name: 'gnd', }\n        #.....................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n        gnd.new_token       { name: 'text',           matcher: rx\"[^a-zA-Z0-9\\s]+\",         }\n        #.....................................................................................................\n        return g\n      #.....................................................................................................\n      do =>\n        g = new_grammar { emit_signals: false, }\n        @eq ( Ωilxt_127 = -> g.state.lnr ), 1\n        probes_and_matchers = [\n          [ \"1st line\",           1, ]\n          [ \"2nd line\",           2, ]\n          [ \"3rd line\",           3, ]\n          [ \"4th line (and EOF)\", 4, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt_128', rpr probe\n          lexemes = g.scan_to_list probe\n          # urge 'Ωilxt_129', lexemes\n          @eq ( Ωilxt_130 = -> lexemes[ 0 ].lnr ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        g = new_grammar { emit_signals: false, }\n        @eq ( Ωilxt_131 = -> g.state.lnr ), 1\n        g.reset_lnr 10\n        @eq ( Ωilxt_132 = -> g.state.lnr ), 10\n        probes_and_matchers = [\n          [ \"1st line\",           10, ]\n          [ \"2nd line\",           11, ]\n          [ \"3rd line\",           12, ]\n          [ \"4th line (and EOF)\", 13, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt_133', rpr probe\n          lexeme = ( g.scan_to_list probe )[ 0 ]\n          @eq ( Ωilxt_134 = -> lexeme.lnr ), matcher\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_plain_regexes: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      probes_and_matchers = [\n        [ \"1st line\",           { length: 3, condensed: \"gnd.ordinal'1st'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"2nd line\",           { length: 3, condensed: \"gnd.ordinal'2nd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"3rd line\",           { length: 3, condensed: \"gnd.ordinal'3rd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"4th line (and EOF)\", { length: 9, condensed: \"gnd.ordinal'4th'|gnd.ws' '|gnd.word'line'|gnd.ws' '|gnd.other'('|gnd.word'and'|gnd.ws' '|gnd.word'EOF'|gnd.other')'\", }, ] ]\n      #-----------------------------------------------------------------------------------------------------\n      test = ( g ) =>\n        for [ probe, matcher, ] from probes_and_matchers\n          g.reset_lnr()\n          lexemes = g.scan_to_list probe\n          @eq ( Ωilxt_135 = -> condense_lexemes lexemes ), matcher.condensed\n          @eq ( Ωilxt_136 = -> lexemes.length ), matcher.length\n          g.reset_lnr()\n          @eq ( Ωilxt_137 = -> [ ( g.scan probe )..., ] ), lexemes\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]+\",           }\n        gnd.new_token       { name: 'ordinal',        matcher: rx\"(?<ordinal>[0-9]+)(st|nd|rd|th)\",   }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                            }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                               }\n        gnd.new_token       { name: 'word',           matcher: rx.i\"[a-z]+\",                          }\n        gnd.new_token       { name: 'other',          matcher: rx.i\"[^a-z0-9\\s]+\",                    }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/dvy,            }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/dvy,  }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/dvy,                             }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/dvy,                                }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/divy,                            }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/divy,                      }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/,               }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/,     }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/v,              }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/u,    }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  strategies:\n\n    #-------------------------------------------------------------------------------------------------------\n    levels_implement_strategies: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', shortest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.one_letter'a'\", ]\n          [ [ 1, 'abcd1234', ], \"first.one_letter'b'\", ]\n          [ [ 2, 'abcd1234', ], \"first.one_letter'c'\", ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\", ]\n          [ [ 4, 'abcd1234', ], \"first.one_digit'1'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.one_digit'2'\",  ]\n          [ [ 0, '123abc',   ], \"first.one_digit'1'\",  ]\n          [ [ 1, '123abc',   ], \"first.one_digit'2'\",  ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",  ]\n          [ [ 3, '123abc',   ], \"first.one_letter'a'\", ]\n          [ [ 4, '123abc',   ], \"first.one_letter'b'\", ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_138 = -> condense_lexemes first.match_first_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', longest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_139 = -> condense_lexemes first.match_first_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', shortest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_140 = -> condense_lexemes first.match_longest_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', longest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_141 = -> condense_lexemes first.match_longest_at position, source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', scrambled tokens ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        shuffle = GUY.rnd.get_shuffle 0.9876, 0.3456\n        for _ in [ 1 .. 100 ]\n          do =>\n            g           = new Grammar()\n            first       = g.new_level { name: 'first', }\n            token_cfgs  = shuffle [\n              { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n              { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n              { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n              { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n              { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n              { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n              { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n              { name: 'four_letters',   matcher: /[a-z]{4}/i, } ]\n            first.new_token token_cfg for token_cfg in token_cfgs\n            #...............................................................................................\n            for [ [ position, source, ], matcher, ] in probes_and_matchers\n              @eq ( Ωilxt_142 = -> condense_lexemes first.match_longest_at position, source ), matcher\n            #...............................................................................................\n            return null\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    grammars_use_strategies: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', scrambled tokens ###\n        probes_and_matchers = [\n          [ 'abcd1234',           \"first.four_letters'abcd'|first.four_digits'1234'\",                                                                       ]\n          [ 'abcdefgh1234567890', \"first.four_letters'abcd'|first.four_letters'efgh'|first.four_digits'1234'|first.four_digits'5678'|first.two_digits'90'\", ]\n          [ 'abcdefg123456789',   \"first.four_letters'abcd'|first.three_letters'efg'|first.four_digits'1234'|first.four_digits'5678'|first.one_digit'9'\",   ]\n          [ '123abc',             \"first.three_digits'123'|first.three_letters'abc'\",                                                                       ]\n          ]\n        #.....................................................................................................\n        shuffle = GUY.rnd.get_shuffle 0.9876, 0.3456\n        for _ in [ 1 .. 100 ]\n          do =>\n            g           = new Grammar { strategy: 'longest', emit_signals: false, }\n            first       = g.new_level { name: 'first', }\n            token_cfgs  = shuffle [\n              { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n              { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n              { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n              { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n              { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n              { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n              { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n              { name: 'four_letters',   matcher: /[a-z]{4}/i, } ]\n            first.new_token token_cfg for token_cfg in token_cfgs\n            #...............................................................................................\n            @eq ( Ωilxt_143 = -> g.cfg.strategy ), 'longest'\n            @eq ( Ωilxt_144 = -> first.strategy ), 'longest'\n            for [ source, matcher, ] in probes_and_matchers\n              @eq ( Ωilxt_145 = -> condense_lexemes g.scan_to_list source ), matcher\n            #...............................................................................................\n            return null\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', scrambled tokens ###\n        probes_and_matchers = [\n          [ 'abcd1234',     \"first.two_letters'ab'|first.two_letters'cd'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'\", ]\n          [ 'abcde12345',   \"first.two_letters'ab'|first.two_letters'cd'|first.one_letter'e'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'|first.one_digit'5'\", ]\n          [ 'abcdef123456', \"first.two_letters'ab'|first.two_letters'cd'|first.two_letters'ef'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'|first.one_digit'5'|first.one_digit'6'\", ]\n          [ '123abc',       \"first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.two_letters'ab'|first.one_letter'c'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar { strategy: 'first', emit_signals: false, }\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        #...................................................................................................\n        @eq ( Ωilxt_146 = -> g.cfg.strategy ), 'first'\n        @eq ( Ωilxt_147 = -> first.strategy ), 'first'\n        for [ source, matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_148 = -> condense_lexemes g.scan_to_list source ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', long tokens first ###\n        probes_and_matchers = [\n          [ 'abcd1234',     \"first.four_letters'abcd'|first.four_digits'1234'\", ]\n          [ 'abcde12345',   \"first.four_letters'abcd'|first.one_letter'e'|first.four_digits'1234'|first.one_digit'5'\", ]\n          [ 'abcdef123456', \"first.four_letters'abcd'|first.two_letters'ef'|first.four_digits'1234'|first.two_digits'56'\", ]\n          [ '123abc',       \"first.three_digits'123'|first.three_letters'abc'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar { strategy: 'first', emit_signals: false, }\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_letters',   matcher: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  matcher: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    matcher: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     matcher: /[a-z]{1}/i, }\n        first.new_token { name: 'four_digits',    matcher: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   matcher: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     matcher: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      matcher: /[0-9]{1}/i, }\n        #...................................................................................................\n        @eq ( Ωilxt_149 = -> g.cfg.strategy ), 'first'\n        @eq ( Ωilxt_150 = -> first.strategy ), 'first'\n        for [ source, matcher, ] in probes_and_matchers\n          @eq ( Ωilxt_151 = -> condense_lexemes g.scan_to_list source ), matcher\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    all_strategies_refuse_jumpless_empty_matches: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g = new Grammar { strategy: 'first', emit_signals: false, }\n        gnd = g.new_level { name: 'gnd', }\n        gnd.new_token { name: 'a', matcher: /a/, }\n        gnd.new_token { name: 'b', matcher: /(?=b)/, }\n        @throws ( Ωilxt_152 = -> g.scan_to_list \"ab\" ), /encountered zero-length match/\n      #.....................................................................................................\n      do =>\n        g = new Grammar { strategy: 'longest', emit_signals: false, }\n        gnd = g.new_level { name: 'gnd', }\n        gnd.new_token { name: 'a', matcher: /a/, }\n        gnd.new_token { name: 'b', matcher: /(?=b)/, }\n        @throws ( Ωilxt_153 = -> g.scan_to_list \"ab\" ), /encountered zero-length match/\n      #.....................................................................................................\n      do =>\n        ### We accept the empty match here since while it does get produced as an intermediate value to find\n        the longest match, it does not get passed on as a resulting lexeme. ###\n        g = new Grammar { strategy: 'longest', emit_signals: false, }\n        gnd = g.new_level { name: 'gnd', }\n        gnd.new_token { name: 'a', matcher: /[ab]/, }\n        gnd.new_token { name: 'b', matcher: /(?=b)/, }\n        @eq ( Ωilxt_154 = -> condense_lexemes g.scan_to_list \"ab\" ), \"gnd.a'a'|gnd.a'b'\"\n      #.....................................................................................................\n      return null\n\n\n  #=========================================================================================================\n  levels:\n\n    #-------------------------------------------------------------------------------------------------------\n    illegal_to_declare_jump_to_same_level: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g       = new Grammar()\n        first   = g.new_level { name: 'first', }\n        @throws ( Ωilxt_155 = -> first.new_token { name: 'digit', matcher: /[0-9]/, jump: 'first',  } ), /cannot jump to same level/\n        @throws ( Ωilxt_156 = -> first.new_token { name: 'digit', matcher: /[0-9]/, jump: 'first!', } ), /cannot jump to same level/\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_jumps: ->\n      { Token } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq     ( Ωilxt_157 = -> Token._parse_jump()                                   ), null\n      @eq     ( Ωilxt_158 = -> Token._parse_jump '..'                                ), { spec: '..',       carry: false, action: 'back', target: '..',      }\n      @eq     ( Ωilxt_159 = -> Token._parse_jump 'mylevel'                           ), { spec: 'mylevel',  carry: false, action: 'fore', target: 'mylevel', }\n      @eq     ( Ωilxt_160 = -> Token._parse_jump '..!'                               ), { spec: '..!',      carry: true,  action: 'back', target: '..',      }\n      @eq     ( Ωilxt_161 = -> Token._parse_jump 'mylevel!'                          ), { spec: 'mylevel!', carry: true,  action: 'fore', target: 'mylevel', }\n      @eq     ( Ωilxt_162 = -> Token._parse_jump 'mylevel!', { name: 'otherlevel', } ), { spec: 'mylevel!', carry: true,  action: 'fore', target: 'mylevel', }\n      @throws ( Ωilxt_163 = -> Token._parse_jump '..]'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_164 = -> Token._parse_jump ']..'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_165 = -> Token._parse_jump '[mylevel'                          ), /encountered illegal jump spec/\n      @throws ( Ωilxt_166 = -> Token._parse_jump 'mylevel['                          ), /encountered illegal jump spec/\n      @throws ( Ωilxt_167 = -> Token._parse_jump 'mylevel[', { name: 'otherlevel', } ), /encountered illegal jump spec/\n      @throws ( Ωilxt_168 = -> Token._parse_jump '[mylevel['                         ), /encountered illegal jump spec/\n      @throws ( Ωilxt_169 = -> Token._parse_jump '[mylevel]'                         ), /encountered illegal jump spec/\n      @throws ( Ωilxt_170 = -> Token._parse_jump ']mylevel'                          ), /encountered illegal jump spec/\n      @throws ( Ωilxt_171 = -> Token._parse_jump '[..'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_172 = -> Token._parse_jump '[..]'                              ), /encountered illegal jump spec/\n      @throws ( Ωilxt_173 = -> Token._parse_jump '..['                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_174 = -> Token._parse_jump '[...'                              ), /encountered illegal jump spec/\n      @throws ( Ωilxt_175 = -> Token._parse_jump '...'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_176 = -> Token._parse_jump '%'                                 ), /encountered illegal jump spec/\n      @throws ( Ωilxt_177 = -> Token._parse_jump 'my-name'                           ), /encountered illegal jump spec/\n      @throws ( Ωilxt_178 = -> Token._parse_jump 'mylevel',  { name: 'mylevel', }    ), /cannot jump to same level/\n      @throws ( Ωilxt_179 = -> Token._parse_jump 'mylevel!', { name: 'mylevel', }    ), /cannot jump to same level/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_set_lexeme_level: ->\n      { Grammar\n        Token\n        Lexeme } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g       = new Grammar { emit_signals: false, }\n        #...................................................................................................\n        first   = g.new_level { name: 'first', }\n        first.new_token   { name: 'digit',      matcher: /[0-9]/,     jump: 'number',   }\n        first.new_token   { name: 'other',      matcher: /[^0-9]+/,                     }\n        #...................................................................................................\n        number  = g.new_level { name: 'number', }\n        number.new_token  { name: 'digits',     matcher: /[0-9]+/,                      }\n        number.new_token  { name: 'other',      matcher: /[^0-9]/,    jump: '..',       }\n        #...................................................................................................\n        [ lexeme, ] = g.scan_to_list '5'\n        @eq ( Ωilxt_180 = -> lexeme instanceof Lexeme       ), true\n        @eq ( Ωilxt_181 = -> lexeme.token instanceof Token  ), true\n        @eq ( Ωilxt_182 = -> lexeme.name                    ), 'digit'\n        @eq ( Ωilxt_183 = -> lexeme.level.name              ), 'first'\n        @eq ( Ωilxt_184 = -> lexeme.fqname                  ), 'first.digit'\n        lexeme.set_level number\n        @eq ( Ωilxt_185 = -> lexeme instanceof Lexeme       ), true\n        @eq ( Ωilxt_186 = -> lexeme.token instanceof Token  ), true\n        @eq ( Ωilxt_187 = -> lexeme.name                    ), 'digit'\n        @eq ( Ωilxt_188 = -> lexeme.level.name              ), 'number'\n        @eq ( Ωilxt_189 = -> lexeme.fqname                  ), 'number.digit'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    carrying_and_sticking_jumps: ->\n      { Grammar } = require '../../../apps/interlex'\n      g_cfg = { emit_signals: false, }\n      #.....................................................................................................\n      do =>\n        ### forejump carries, backjump sticks ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      matcher: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         matcher: /\"/,             jump: 'dqstring!',  }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      matcher: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         matcher: /\"/,             jump: '..'          }\n        #...................................................................................................\n        @eq ( Ωilxt_190 = -> first.tokens[ 1 ].name     ), 'dq'\n        @eq ( Ωilxt_191 = -> first.tokens[ 1 ].jump     ), { spec: 'dqstring!', carry: true, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_192 = -> dqstring.tokens[ 1 ].name  ), 'dq'\n        @eq ( Ωilxt_193 = -> dqstring.tokens[ 1 ].jump  ), { spec: '..', carry: false, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_194 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ',  pos: '1:0:9',   }\n        @eq ( Ωilxt_195 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',          pos: '1:9:10',  }\n        @eq ( Ωilxt_196 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',        pos: '1:10:13', }\n        @eq ( Ωilxt_197 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',          pos: '1:13:14', }\n        @eq ( Ωilxt_198 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',          pos: '1:14:15', }\n        @eq ( Ωilxt_199 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      do =>\n        ### forejump sticks, backjump carries ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      matcher: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         matcher: /\"/,             jump: 'dqstring',   }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      matcher: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         matcher: /\"/,             jump: '..!'         }\n        #...................................................................................................\n        @eq ( Ωilxt_200 = -> first.tokens[ 1 ].name     ), 'dq'\n        @eq ( Ωilxt_201 = -> first.tokens[ 1 ].jump     ), { spec: 'dqstring', carry: false, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_202 = -> dqstring.tokens[ 1 ].name  ), 'dq'\n        @eq ( Ωilxt_203 = -> dqstring.tokens[ 1 ].jump  ), { spec: '..!', carry: true, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_204 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ', pos: '1:0:9',   }\n        @eq ( Ωilxt_205 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:9:10',  }\n        @eq ( Ωilxt_206 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',       pos: '1:10:13', }\n        @eq ( Ωilxt_207 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:13:14', }\n        @eq ( Ωilxt_208 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',         pos: '1:14:15', }\n        @eq ( Ωilxt_209 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      do =>\n        ### forejump carries, backjump carries ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      matcher: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         matcher: /\"/,             jump: 'dqstring!',  }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      matcher: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         matcher: /\"/,             jump: '..!'         }\n        #...................................................................................................\n        @eq ( Ωilxt_210 = -> first.tokens[ 1 ].name     ), 'dq'\n        @eq ( Ωilxt_211 = -> first.tokens[ 1 ].jump     ), { spec: 'dqstring!', carry: true, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_212 = -> dqstring.tokens[ 1 ].name  ), 'dq'\n        @eq ( Ωilxt_213 = -> dqstring.tokens[ 1 ].jump  ), { spec: '..!', carry: true, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_214 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ', pos: '1:0:9',   }\n        @eq ( Ωilxt_215 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',         pos: '1:9:10',  }\n        @eq ( Ωilxt_216 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',       pos: '1:10:13', }\n        @eq ( Ωilxt_217 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:13:14', }\n        @eq ( Ωilxt_218 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',         pos: '1:14:15', }\n        @eq ( Ωilxt_219 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      do =>\n        ### forejump sticks, backjump sticks ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      matcher: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         matcher: /\"/,             jump: 'dqstring',   }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      matcher: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         matcher: /\"/,             jump: '..'          }\n        #...................................................................................................\n        @eq ( Ωilxt_220 = -> first.tokens[ 1 ].name     ), 'dq'\n        @eq ( Ωilxt_221 = -> first.tokens[ 1 ].jump     ), { spec: 'dqstring', carry: false, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_222 = -> dqstring.tokens[ 1 ].name  ), 'dq'\n        @eq ( Ωilxt_223 = -> dqstring.tokens[ 1 ].jump  ), { spec: '..', carry: false, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_224 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ', pos: '1:0:9',   }\n        @eq ( Ωilxt_225 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:9:10',  }\n        @eq ( Ωilxt_226 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',       pos: '1:10:13', }\n        @eq ( Ωilxt_227 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',         pos: '1:13:14', }\n        @eq ( Ωilxt_228 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',         pos: '1:14:15', }\n        @eq ( Ωilxt_229 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_zero_length_matchers_with_jumps: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      probes_and_matchers = [\n        [ \"Alice has 431 owls\", { length: 8, condensed: \"gnd.letters'Alice'|gnd.ws' '|gnd.letters'has'|gnd.ws' '|gnd.before_digits''|number.digits'431'|gnd.ws' '|gnd.letters'owls'\", }, ]\n        [ \"99kg\",               { length: 3, condensed: \"gnd.before_digits''|number.digits'99'|gnd.letters'kg'\", }, ]\n        ]\n      #-----------------------------------------------------------------------------------------------------\n      test = ( g ) =>\n        for [ probe, matcher, ] from probes_and_matchers\n          g.reset_lnr()\n          lexemes = g.scan_to_list probe\n          @eq ( Ωilxt_230 = -> condense_lexemes lexemes ), matcher.condensed\n          @eq ( Ωilxt_231 = -> lexemes.length ), matcher.length\n          g.reset_lnr()\n          @eq ( Ωilxt_232 = -> [ ( g.scan probe )..., ] ), lexemes\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        number    = g.new_level { name: 'number', }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher: /[a-z]+/i,                      }\n        gnd.new_token     { name: 'before_digits',    matcher: /(?=[0-9])/i,  jump: 'number',  }\n        gnd.new_token     { name: 'ws',               matcher: /\\s+/i,                         }\n        #...................................................................................................\n        number.new_token  { name: 'digits',           matcher: /[0-9]+/i,     jump: '..',      }\n        #...................................................................................................\n        test g\n        source = probes_and_matchers[ 0 ][ 0 ]\n        info 'Ωilxt_233', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_zero_length_matchers_with_jumps_2: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        number    = g.new_level { name: 'number', }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    matcher:  /(?=[0-9])/,  jump: 'number',  }\n        gnd.new_token     { name: 'ws',               matcher:  /\\s+/,                         }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          matcher:  /[0-9]+/,           }\n        number.new_token  { name: 'unit',             matcher:  /[a-zA-Z]+/,     jump: '..',      }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        info 'Ωilxt_234', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_235 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits', hit: '',   pos: '1:0:0', }\n        @eq ( Ωilxt_236 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',    hit: '99', pos: '1:0:2', }\n        @eq ( Ωilxt_237 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',       hit: 'kg', pos: '1:2:4', }\n        @eq ( Ωilxt_238 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits', hit: '',   pos: '1:4:4', }\n        @eq ( Ωilxt_239 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',    hit: '23', pos: '1:4:6', }\n        @eq ( Ωilxt_240 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',       hit: 'mm', pos: '1:6:8', }\n        @eq ( Ωilxt_241 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  stack: ->\n    Levelstack = ( require '../../../apps/interlex' ).internals.Levelstack\n    do =>\n      stack = new Levelstack()\n      @eq     ( Ωilxt_242 = -> stack.is_empty                   ), true\n      stack.push { name: '1', }\n      @eq     ( Ωilxt_243 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_244 = -> stack.peek()                     ), { name: '1', }\n      @eq     ( Ωilxt_245 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_246 = -> stack.length                     ), 0\n    do =>\n      stack = new Levelstack { name: '1', }\n      @eq     ( Ωilxt_247 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_248 = -> stack.peek()                     ), { name: '1', }\n      @eq     ( Ωilxt_249 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_250 = -> stack.length                     ), 0\n    do =>\n      stack = new Levelstack { name: '1', }, { name: '2', }\n      @eq     ( Ωilxt_251 = -> stack.length                     ), 2\n      @eq     ( Ωilxt_252 = -> stack.peek()                     ), { name: '2', }\n      @eq     ( Ωilxt_253 = -> stack.popnpeek()                 ), { name: '1', }\n      @eq     ( Ωilxt_254 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_255 = -> stack.peek()                     ), { name: '1', }\n      @eq     ( Ωilxt_256 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_257 = -> stack.length                     ), 0\n    do =>\n      stack = new Levelstack { name: '1', }, { name: '2', }\n      @eq     ( Ωilxt_258 = -> stack.length                     ), 2\n      @eq     ( Ωilxt_259 = -> stack.peek_name()                ), '2'\n      @eq     ( Ωilxt_260 = -> stack.popnpeek_name()            ), '1'\n      @eq     ( Ωilxt_261 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_262 = -> stack.is_empty                   ), false\n      @eq     ( Ωilxt_263 = -> stack.peek_name()                ), '1'\n      @eq     ( Ωilxt_264 = -> stack.pop_name()                 ), '1'\n      @eq     ( Ωilxt_265 = -> stack.length                     ), 0\n      @eq     ( Ωilxt_266 = -> stack.is_empty                   ), true\n    do =>\n      stack = new Levelstack { name: '1', }, { name: '2', }\n      @eq     ( Ωilxt_267 = -> stack.pop()                      ), { name: '2', }\n      @eq     ( Ωilxt_268 = -> stack.is_empty                   ), false\n      @eq     ( Ωilxt_269 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_270 = -> stack.is_empty                   ), true\n      @throws ( Ωilxt_271 = -> stack.pop()                      ), /stack is empty/\n      @throws ( Ωilxt_272 = -> stack.popnpeek()                 ), /stack is empty/\n      @throws ( Ωilxt_273 = -> stack.pop_name()                 ), /stack is empty/\n      @throws ( Ωilxt_274 = -> stack.popnpeek_name()            ), /stack is empty/\n      @eq     ( Ωilxt_275 = -> stack.pop            'fallback'  ), 'fallback'\n      @eq     ( Ωilxt_276 = -> stack.popnpeek       'fallback'  ), 'fallback'\n      @eq     ( Ωilxt_277 = -> stack.pop_name       'fallback'  ), 'fallback'\n      @eq     ( Ωilxt_278 = -> stack.popnpeek_name  'fallback'  ), 'fallback'\n    return null\n\n  #=========================================================================================================\n  lexeme_merging:\n\n    #-------------------------------------------------------------------------------------------------------\n    no_merging: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      number    = g.new_level { name: 'number', }\n      #.....................................................................................................\n      text.new_token    { name: 'text',         matcher: /// \\\\ \\p{Decimal_Number} | \\p{Letter} ///v,                 }\n      text.new_token    { name: 'ws',           matcher: /// \\p{White_Space}                    ///v,                 }\n      text.new_token    { name: 'number_start', matcher: /// (?= (?!< \\\\ ) \\p{Decimal_Number} ) ///v, jump: 'number', }\n      number.new_token  { name: 'digit',        matcher: /// \\p{Decimal_Number} | \\. | e        ///v,                 }\n      number.new_token  { name: 'number_stop',  matcher: /// (?= \\P{Decimal_Number} )           ///v, jump: '..',     }\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 has 3556.3 Petabytes\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_279', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_280', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_281 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'R', pos: '1:0:1' }\n        @eq ( Ωilxt_282 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: '\\\\2', pos: '1:1:3' }\n        @eq ( Ωilxt_283 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'D', pos: '1:3:4' }\n        @eq ( Ωilxt_284 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: '\\\\2', pos: '1:4:6' }\n        @eq ( Ωilxt_285 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ', pos: '1:6:7' }\n        @eq ( Ωilxt_286 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'h', pos: '1:7:8' }\n        @eq ( Ωilxt_287 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'a', pos: '1:8:9' }\n        @eq ( Ωilxt_288 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 's', pos: '1:9:10' }\n        @eq ( Ωilxt_289 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ', pos: '1:10:11' }\n        @eq ( Ωilxt_290 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.number_start',  hit: '', pos: '1:11:11' }\n        @eq ( Ωilxt_291 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '3', pos: '1:11:12' }\n        @eq ( Ωilxt_292 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '5', pos: '1:12:13' }\n        @eq ( Ωilxt_293 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '5', pos: '1:13:14' }\n        @eq ( Ωilxt_294 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '6', pos: '1:14:15' }\n        @eq ( Ωilxt_295 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '.', pos: '1:15:16' }\n        @eq ( Ωilxt_296 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '3', pos: '1:16:17' }\n        @eq ( Ωilxt_297 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number_stop', hit: '', pos: '1:17:17' }\n        @eq ( Ωilxt_298 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ', pos: '1:17:18' }\n        @eq ( Ωilxt_299 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'P', pos: '1:18:19' }\n        @eq ( Ωilxt_300 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'e', pos: '1:19:20' }\n        @eq ( Ωilxt_301 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 't', pos: '1:20:21' }\n        @eq ( Ωilxt_302 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'a', pos: '1:21:22' }\n        @eq ( Ωilxt_303 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'b', pos: '1:22:23' }\n        @eq ( Ωilxt_304 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'y', pos: '1:23:24' }\n        @eq ( Ωilxt_305 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 't', pos: '1:24:25' }\n        @eq ( Ωilxt_306 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'e', pos: '1:25:26' }\n        @eq ( Ωilxt_307 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 's', pos: '1:26:27' }\n        @eq ( Ωilxt_308 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      number    = g.new_level { name: 'number', }\n      #.....................................................................................................\n      text.new_token    { name: 'text',         matcher: /// \\\\ \\p{Decimal_Number} | \\p{Letter} ///v, merge: true,    }\n      text.new_token    { name: 'ws',           matcher: /// \\p{White_Space}                    ///v, merge: true,    }\n      text.new_token    { name: 'number_start', matcher: /// (?= (?!< \\\\ ) \\p{Decimal_Number} ) ///v, jump: 'number', }\n      number.new_token  { name: 'digit',        matcher: /// \\p{Decimal_Number} | \\. | e        ///v, merge: true,    }\n      number.new_token  { name: 'number_stop',  matcher: /// (?= \\P{Decimal_Number} )           ///v, jump: '..',     }\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 has 3556.3 Petabytes\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_309', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        info 'Ωilxt_310', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_311 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'R\\\\2D\\\\2',  pos: '1:0:6' }\n        @eq ( Ωilxt_312 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ',         pos: '1:6:7' }\n        @eq ( Ωilxt_313 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'has',       pos: '1:7:10' }\n        @eq ( Ωilxt_314 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ',         pos: '1:10:11' }\n        @eq ( Ωilxt_315 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.number_start',  hit: '',          pos: '1:11:11' }\n        @eq ( Ωilxt_316 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '3556.3',    pos: '1:11:17' }\n        @eq ( Ωilxt_317 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number_stop', hit: '',          pos: '1:17:17' }\n        @eq ( Ωilxt_318 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ',         pos: '1:17:18' }\n        @eq ( Ωilxt_319 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'Petabytes', pos: '1:18:27' }\n        @eq ( Ωilxt_320 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_default: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      text.new_token { name: 'name', matcher: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge: true,    }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_321', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        info 'Ωilxt_322', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_323 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { initial: [ 'A', 'B', 'C', 'D' ] }, }\n        @eq ( Ωilxt_324 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_assign: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      text.new_token { name: 'name', matcher: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge: 'assign',    }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_325', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        info 'Ωilxt_326', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_327 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { initial: 'D' }, }\n        @eq ( Ωilxt_328 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_default_and_single_match: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      text.new_token { name: 'name', matcher: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge: true,    }\n      #.....................................................................................................\n      do =>\n        source = \"Arc\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_329', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        info 'Ωilxt_330', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_331 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'Arc', pos: '1:0:3', data: { initial: [ 'A', ] }, }\n        @eq ( Ωilxt_332 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_merge_function: ->\n      { Grammar\n        internals\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      merge     = ({ merged, lexemes, }) ->\n        merged.assign { initial: ( lxm.data.initial for lxm in lexemes ), }\n        return null\n      text.new_token { name: 'name', matcher: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge, }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_333', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        info 'Ωilxt_334', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_335 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { initial: [ 'A', 'B', 'C', 'D', ], } }\n        @eq ( Ωilxt_336 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_merge_list: ->\n      { Grammar\n        internals\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      matcher = /// (?<parts> (?<initials> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ) ///v\n      text.new_token { name: 'name', matcher, merge: 'list', }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr 1; echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_337', source; g.reset_lnr 1; tabulate_lexemes g.scan source\n        info 'Ωilxt_338', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_339 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { parts: [ 'Arc', 'Bo', 'Cy', 'Deen' ], initials: [ 'A', 'B', 'C', 'D' ] } }\n        @eq ( Ωilxt_340 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n  #=========================================================================================================\n  data_capture:\n\n    #-------------------------------------------------------------------------------------------------------\n    data_property: ->\n      { Grammar } = require '../../../apps/interlex'\n      g     = new Grammar()\n      gnd   = g.new_level { name: 'gnd', }\n      name  = gnd.new_token { name: 'name', matcher: ///\n        (?<initial> \\p{Uppercase_Letter} ) (?<tail> \\p{Lowercase_Letter}* ) ///, }\n      lexeme = g.scan_first 'Brobdignac'\n      @eq ( Ωilxt_341 = -> lexeme.groups              ), undefined\n      @eq ( Ωilxt_342 = -> lexeme.data?               ), true\n      @eq ( Ωilxt_343 = -> lexeme.has_data            ), true\n      @eq ( Ωilxt_344 = -> lexeme.data.constructor    ), undefined\n      @eq ( Ωilxt_345 = -> lexeme.data.initial        ), 'B'\n      @eq ( Ωilxt_346 = -> lexeme.data.tail           ), 'robdignac'\n      return null\n\n  #=========================================================================================================\n  signals:\n\n    #-------------------------------------------------------------------------------------------------------\n    cfg_settings: ->\n      { Grammar } = require '../../../apps/interlex'\n      @eq ( Ωilxt_347 = -> ( new Grammar { emit_signals: false,         } ).cfg.emit_signals ), false\n      @eq ( Ωilxt_348 = -> ( new Grammar { emit_signals: true,          } ).cfg.emit_signals ), true\n      @eq ( Ωilxt_349 = -> ( new Grammar {}                               ).cfg.emit_signals ), true\n      @eq ( Ωilxt_350 = -> ( new Grammar()                                ).cfg.emit_signals ), true\n      @eq ( Ωilxt_351 = -> ( new Grammar { emit_signals: false,         } ).cfg.merge_jumps  ), false\n      @eq ( Ωilxt_352 = -> ( new Grammar { emit_signals: true,          } ).cfg.merge_jumps  ), true\n      @eq ( Ωilxt_353 = -> ( new Grammar {}                               ).cfg.merge_jumps  ), true\n      @eq ( Ωilxt_354 = -> ( new Grammar()                                ).cfg.merge_jumps  ), true\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    detailed_jump_signals: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      ### fore jump sticky, back jump sticky ###\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, merge_jumps: false, }\n        @eq ( Ωilxt_355 = -> g.cfg.merge_jumps ), false\n        gnd       = g.new_level { name: 'gnd',      }\n        number    = g.new_level { name: 'number',   }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    matcher:  /(?=[0-9])/,  jump: 'number',     }\n        gnd.new_token     { name: 'ws',               matcher:  /\\s+/,                            }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          matcher:  /[0-9]+/,                         }\n        number.new_token  { name: 'unit',             matcher:  /[a-zA-Z]+/,     jump: '..',      }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        # info 'Ωilxt_356', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_357', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_358 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',     hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_359 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',      hit: '',   pos: '1:0:0', data: { from_level: null, to_level: 'gnd' }, }\n        @eq ( Ωilxt_360 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits', hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_361 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',      hit: '',   pos: '1:0:0', data: { from_level: 'gnd', to_level: 'number' }, }\n        @eq ( Ωilxt_362 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',    hit: '99', pos: '1:0:2' }\n        @eq ( Ωilxt_363 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',       hit: 'kg', pos: '1:2:4' }\n        @eq ( Ωilxt_364 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',      hit: '',   pos: '1:4:4', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_365 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits', hit: '',   pos: '1:4:4' }\n        @eq ( Ωilxt_366 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',      hit: '',   pos: '1:4:4', data: { from_level: 'gnd', to_level: 'number' }, }\n        @eq ( Ωilxt_367 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',    hit: '23', pos: '1:4:6' }\n        @eq ( Ωilxt_368 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',       hit: 'mm', pos: '1:6:8' }\n        @eq ( Ωilxt_369 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',      hit: '',   pos: '1:8:8', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_370 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',      hit: '',   pos: '1:8:8', data: { from_level: 'gnd', to_level: null }, }\n        @eq ( Ωilxt_371 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',      hit: '',   pos: '1:8:8' }\n        @eq ( Ωilxt_372 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      ### fore jump carry, back jump sticky ###\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, merge_jumps: false, }\n        @eq ( Ωilxt_373 = -> g.cfg.merge_jumps ), false\n        gnd       = g.new_level { name: 'gnd',      }\n        number    = g.new_level { name: 'number',   }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    matcher:  /(?=[0-9])/,  jump: 'number!',    }\n        gnd.new_token     { name: 'ws',               matcher:  /\\s+/,                            }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          matcher:  /[0-9]+/,                         }\n        number.new_token  { name: 'unit',             matcher:  /[a-zA-Z]+/,     jump: '..',      }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        # info 'Ωilxt_374', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_375', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_376 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',        hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_377 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: null,     to_level: 'gnd' }, }\n        @eq ( Ωilxt_378 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: 'gnd',    to_level: 'number' }, }\n        @eq ( Ωilxt_379 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_380 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '99', pos: '1:0:2' }\n        @eq ( Ωilxt_381 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',          hit: 'kg', pos: '1:2:4' }\n        @eq ( Ωilxt_382 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:4:4', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_383 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:4:4', data: { from_level: 'gnd',    to_level: 'number' }, }\n        @eq ( Ωilxt_384 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:4:4' }\n        @eq ( Ωilxt_385 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '23', pos: '1:4:6' }\n        @eq ( Ωilxt_386 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',          hit: 'mm', pos: '1:6:8' }\n        @eq ( Ωilxt_387 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:8:8', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_388 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:8:8', data: { from_level: 'gnd',    to_level: null }, }\n        @eq ( Ωilxt_389 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',         hit: '',   pos: '1:8:8' }\n        @eq ( Ωilxt_390 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      ### fore jump carry, back jump carry ###\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, merge_jumps: false, }\n        @eq ( Ωilxt_391 = -> g.cfg.merge_jumps ), false\n        gnd       = g.new_level { name: 'gnd',      }\n        number    = g.new_level { name: 'number',   }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    matcher:  /(?=[0-9])/,  jump: 'number!',    }\n        gnd.new_token     { name: 'ws',               matcher:  /\\s+/,                            }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          matcher:  /[0-9]+/,                         }\n        number.new_token  { name: 'unit',             matcher:  /[a-zA-Z]+/,     jump: '..!',     }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        # info 'Ωilxt_392', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_393', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_394 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',        hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_395 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: null,     to_level: 'gnd' }, }\n        @eq ( Ωilxt_396 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: 'gnd',    to_level: 'number' }, }\n        @eq ( Ωilxt_397 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_398 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '99', pos: '1:0:2' }\n        @eq ( Ωilxt_399 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:2:2', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_400 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.unit',             hit: 'kg', pos: '1:2:4' }\n        @eq ( Ωilxt_401 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:4:4', data: { from_level: 'gnd',    to_level: 'number' }, }\n        @eq ( Ωilxt_402 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:4:4' }\n        @eq ( Ωilxt_403 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '23', pos: '1:4:6' }\n        @eq ( Ωilxt_404 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:6:6', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_405 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.unit',             hit: 'mm', pos: '1:6:8' }\n        @eq ( Ωilxt_406 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:8:8', data: { from_level: 'gnd',    to_level: null }, }\n        @eq ( Ωilxt_407 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',         hit: '',   pos: '1:8:8' }\n        @eq ( Ωilxt_408 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      ### fore jump sticky, back jump carry ###\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, merge_jumps: false, }\n        @eq ( Ωilxt_409 = -> g.cfg.merge_jumps ), false\n        gnd       = g.new_level { name: 'gnd',      }\n        number    = g.new_level { name: 'number',   }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    matcher:  /(?=[0-9])/,  jump: 'number',     }\n        gnd.new_token     { name: 'ws',               matcher:  /\\s+/,                            }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          matcher:  /[0-9]+/,                         }\n        number.new_token  { name: 'unit',             matcher:  /[a-zA-Z]+/,     jump: '..!',     }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        # info 'Ωilxt_410', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_411', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_412 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',        hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_413 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: null,     to_level: 'gnd' }, }\n        @eq ( Ωilxt_414 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits',    hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_415 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: 'gnd',    to_level: 'number' }, }\n        @eq ( Ωilxt_416 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '99', pos: '1:0:2' }\n        @eq ( Ωilxt_417 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:2:2', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_418 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.unit',             hit: 'kg', pos: '1:2:4' }\n        @eq ( Ωilxt_419 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits',    hit: '',   pos: '1:4:4' }\n        @eq ( Ωilxt_420 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:4:4', data: { from_level: 'gnd',    to_level: 'number' }, }\n        @eq ( Ωilxt_421 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '23', pos: '1:4:6' }\n        @eq ( Ωilxt_422 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:6:6', data: { from_level: 'number', to_level: 'gnd' }, }\n        @eq ( Ωilxt_423 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.unit',             hit: 'mm', pos: '1:6:8' }\n        @eq ( Ωilxt_424 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:8:8', data: { from_level: 'gnd',    to_level: null }, }\n        @eq ( Ωilxt_425 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',         hit: '',   pos: '1:8:8' }\n        @eq ( Ωilxt_426 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n        #...................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    merge_jump_signals: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      ### fore jump carry, back jump sticky ###\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, }\n        @eq ( Ωilxt_427 = -> g.cfg.merge_jumps ), true\n        gnd       = g.new_level { name: 'gnd',      }\n        number    = g.new_level { name: 'number',   }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          matcher:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    matcher:  /(?=[0-9])/,  jump: 'number!',    }\n        gnd.new_token     { name: 'ws',               matcher:  /\\s+/,                            }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          matcher:  /[0-9]+/,                         }\n        number.new_token  { name: 'unit',             matcher:  /[a-zA-Z]+/,     jump: '..',      }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        # info 'Ωilxt_428', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_429', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_430 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',        hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_431 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { from_level: null,     to_level: 'number' }, }\n        @eq ( Ωilxt_432 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_433 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '99', pos: '1:0:2' }\n        @eq ( Ωilxt_434 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',          hit: 'kg', pos: '1:2:4' }\n        @eq ( Ωilxt_435 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:4:4', data: { from_level: 'number', to_level: 'number' }, }\n        @eq ( Ωilxt_436 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:4:4' }\n        @eq ( Ωilxt_437 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '23', pos: '1:4:6' }\n        @eq ( Ωilxt_438 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',          hit: 'mm', pos: '1:6:8' }\n        @eq ( Ωilxt_439 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:8:8', data: { from_level: 'number', to_level: null }, }\n        @eq ( Ωilxt_440 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',         hit: '',   pos: '1:8:8' }\n        @eq ( Ωilxt_441 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n        #...................................................................................................\n      return null\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    demo_nr_1: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', }\n      gnd       = g.new_level { name: 'gnd', }\n      #.....................................................................................................\n      gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n      #.....................................................................................................\n      source = \"Alice in Cairo 1912 (approximately)\"\n      info 'Ωilxt_442', source; tabulate_lexemes g.scan source\n      info 'Ωilxt_443', source; g.reset_lnr 1; lexemes = g.scan source\n      @eq ( Ωilxt_444 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',   hit: '',              pos: '1:0:0' }\n      @eq ( Ωilxt_445 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '',              pos: '1:0:0', data: { from_level: null, to_level: 'gnd' } }\n      @eq ( Ωilxt_446 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',        hit: 'Alice',         pos: '1:0:5', data: { initial: 'A', }, }\n      @eq ( Ωilxt_447 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:5:6' }\n      @eq ( Ωilxt_448 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.other',       hit: 'in',            pos: '1:6:8' }\n      @eq ( Ωilxt_449 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:8:9' }\n      @eq ( Ωilxt_450 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',        hit: 'Cairo',         pos: '1:9:14', data: { initial: 'C', } }\n      @eq ( Ωilxt_451 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:14:15' }\n      @eq ( Ωilxt_452 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number',      hit: '1912',          pos: '1:15:19' }\n      @eq ( Ωilxt_453 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:19:20' }\n      @eq ( Ωilxt_454 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.paren_start', hit: '(',             pos: '1:20:21' }\n      @eq ( Ωilxt_455 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.other',       hit: 'approximately', pos: '1:21:34' }\n      @eq ( Ωilxt_456 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.paren_stop',  hit: ')',             pos: '1:34:35' }\n      @eq ( Ωilxt_457 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '',              pos: '1:35:35', data: { from_level: 'gnd', to_level: null } }\n      @eq ( Ωilxt_ACCEPT_458 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',    hit: '',              pos: '1:35:35', }\n      @eq ( Ωilxt_459 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    demo_nr_2: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'faulty', }\n      gnd       = g.new_level { name: 'gnd', }\n      string11  = g.new_level { name: 'string11', }\n      #.....................................................................................................\n      gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11', }\n      gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n      #.....................................................................................................\n      # string11.new_token  { name: 'string11_stop',  matcher: rx\"(?!<\\\\)'\",                jump: '..!', }\n      string11.new_token  { name: 'text',           matcher: rx\"[^']+\",                   }\n      #.....................................................................................................\n      source = \"Alice in Cairo 1912 'approximately'\"\n      info 'Ωilxt_460', source; tabulate_lexemes g.scan source\n      info 'Ωilxt_461', source; g.reset_lnr 1; lexemes = g.scan source\n      @eq ( Ωilxt_462 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',      hit: '',       pos: '1:0:0' }\n      @eq ( Ωilxt_463 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',       hit: '',       pos: '1:0:0', data: { from_level: null, to_level: 'gnd' } }\n      @eq ( Ωilxt_464 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',           hit: 'Alice',  pos: '1:0:5', data: { initial: 'A', }, }\n      @eq ( Ωilxt_465 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:5:6' }\n      @eq ( Ωilxt_466 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.other',          hit: 'in',     pos: '1:6:8' }\n      @eq ( Ωilxt_467 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:8:9' }\n      @eq ( Ωilxt_468 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',           hit: 'Cairo',  pos: '1:9:14', data: { initial: 'C', }, }\n      @eq ( Ωilxt_469 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:14:15' }\n      @eq ( Ωilxt_470 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number',         hit: '1912',   pos: '1:15:19' }\n      @eq ( Ωilxt_471 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:19:20' }\n      @eq ( Ωilxt_472 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.string11_start', hit: \"'\",      pos: '1:20:21' }\n      @eq ( Ωilxt_473 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',       hit: '',       pos: '1:21:21', data: { from_level: 'gnd', to_level: 'string11' } }\n      @eq ( Ωilxt_474 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'string11.text',      hit: 'approximately', pos: '1:21:34' }\n      @eq ( Ωilxt_475 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',       hit: '',       pos: '1:34:34', data: { from_level: 'string11', to_level: null } }\n      @eq ( Ωilxt_476 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.error',      hit: \"'\",      pos: '1:34:35', data: { kind: 'earlystop', message: 'expected stop at 35, got 34' } }\n      @eq ( Ωilxt_477 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',       hit: '',       pos: '1:34:34', }\n      @eq ( Ωilxt_478 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    demo_nr_3: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'faulty', emit_signals: false, }\n      gnd       = g.new_level { name: 'gnd', }\n      number    = g.new_level { name: 'number', }\n      #.....................................................................................................\n      gnd.new_token       { name: 'text',           matcher: rx.i\"\\\\[0-9]|[a-z\\s]+\",                  }\n      gnd.new_token       { name: 'number_start',   matcher: rx\"(?=(?!<\\\\)[0-9])\",    jump: 'number', }\n      number.new_token    { name: 'number',         matcher: rx\"[0-9]+\",                              }\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 on Charon 3\"\n        # info 'Ωilxt_479', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_480', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_481 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'R',           pos: '1:0:1' }\n        @eq ( Ωilxt_482 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:1:3' }\n        @eq ( Ωilxt_483 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'D',           pos: '1:3:4' }\n        @eq ( Ωilxt_484 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:4:6' }\n        @eq ( Ωilxt_485 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: ' on Charon ', pos: '1:6:17' }\n        @eq ( Ωilxt_486 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number_start', hit: '',            pos: '1:17:17' }\n        @eq ( Ωilxt_487 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number',    hit: '3',           pos: '1:17:18' }\n        @eq ( Ωilxt_488 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 on Charon 3!!\"\n        # echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_489', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_490', source; g.reset_lnr 1; lexemes = g.scan source\n        @eq ( Ωilxt_491 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'R',           pos: '1:0:1' }\n        @eq ( Ωilxt_492 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:1:3' }\n        @eq ( Ωilxt_493 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'D',           pos: '1:3:4' }\n        @eq ( Ωilxt_494 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:4:6' }\n        @eq ( Ωilxt_495 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: ' on Charon ', pos: '1:6:17' }\n        @eq ( Ωilxt_496 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number_start', hit: '',            pos: '1:17:17' }\n        @eq ( Ωilxt_497 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number',    hit: '3',           pos: '1:17:18' }\n        @eq ( Ωilxt_498 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.error',    hit: '!!',          pos: '1:18:20', data: { kind: 'earlystop', message: 'expected stop at 20, got 18' } }\n        @eq ( Ωilxt_499 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n  #=========================================================================================================\n  cfg_settings:\n\n    #-------------------------------------------------------------------------------------------------------\n    grammar: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.........................................................................................................\n      do =>\n        g = new Grammar()\n        @eq ( Ωilxt_500 = -> g.cfg.name           ), 'g'\n        @eq ( Ωilxt_501 = -> g.cfg.strategy       ), 'first'\n        @eq ( Ωilxt_502 = -> g.cfg.emit_signals   ), true\n        @eq ( Ωilxt_503 = -> g.cfg.merge_jumps    ), true\n        return null\n      #.........................................................................................................\n      do =>\n        g = new Grammar { emit_signals: false, }\n        @eq ( Ωilxt_504 = -> g.cfg.name           ), 'g'\n        @eq ( Ωilxt_505 = -> g.cfg.strategy       ), 'first'\n        @eq ( Ωilxt_506 = -> g.cfg.emit_signals   ), false\n        @eq ( Ωilxt_507 = -> g.cfg.merge_jumps    ), false\n        return null\n      #.........................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true, show_passes: false, report_checks: false, }\n  # guytest_cfg = { throw_on_error: false, show_passes: true, report_checks: true, }\n  ( new Test guytest_cfg ).test @interlex_tasks\n  ( new Test guytest_cfg ).test { lexeme_merging: @interlex_tasks.lexeme_merging, }\n  # ( new Test guytest_cfg ).test { cfg_settings: @interlex_tasks.cfg_settings, }\n  # ( new Test guytest_cfg ).test { numbering: @interlex_tasks.basics.numbering, }\n  # ( new Test guytest_cfg ).test { stack: @interlex_tasks.stack, }\n\n\n"
  ]
}