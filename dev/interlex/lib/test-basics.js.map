{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ condense_lexemes\n  abbrlxm\n  tabulate_lexemes\n  tabulate_lexeme       } = require './helpers'\n{ isa\n  std\n  type_of               } = require '../../../apps/cleartype'\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  internals:\n\n    #-------------------------------------------------------------------------------------------------------\n    jsid_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { internals     } = require '../../../apps/interlex'\n      { slevithan_regex\n        jsid_re       } = internals\n      jsid_anchored_re  = slevithan_regex.regex\"^#{jsid_re}$\"\n      @eq ( Ωilxt___1 = -> jsid_anchored_re.flags ), 'v'\n      @eq ( Ωilxt___2 = -> ( ( '_abc3'  ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___3 = -> ( ( '_abc$'  ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___4 = -> ( ( '$abc'   ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___5 = -> ( ( 'abc'    ).match jsid_anchored_re  )? ), true\n      @eq ( Ωilxt___6 = -> ( ( '3_abc'  ).match jsid_anchored_re  )? ), false\n      @eq ( Ωilxt___7 = -> ( ( '&%'     ).match jsid_anchored_re  )? ), false\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    sort_lexemes_by_length_dec: ->\n      { internals } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt___8 = -> internals.sort_lexemes_by_length_dec []                                    ), []\n      @eq ( Ωilxt___9 = -> internals.sort_lexemes_by_length_dec [ '1', ]                              ), [ '1' ]\n      @eq ( Ωilxt__10 = -> internals.sort_lexemes_by_length_dec [ '1', 'i', ]                         ), [ '1', 'i' ]\n      @eq ( Ωilxt__11 = -> internals.sort_lexemes_by_length_dec [ '1', '123', '1', '1234', ]          ), [ '1234', '123', '1', '1' ]\n      @eq ( Ωilxt__12 = -> internals.sort_lexemes_by_length_dec [ 'abcd', '1234', '1', '123', 'i', ]  ), [ 'abcd', '1234', '123', '1', 'i' ]\n      @eq ( Ωilxt__13 = -> internals.sort_lexemes_by_length_dec [ '1234', 'abcd', '1', '123', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__14 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', 'abcd', '123', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__15 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', '123', 'abcd', 'i', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      @eq ( Ωilxt__16 = -> internals.sort_lexemes_by_length_dec [ '1234', '1', '123', 'i', 'abcd', ]  ), [ '1234', 'abcd', '123', '1', 'i' ]\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  regexes:\n\n    #-------------------------------------------------------------------------------------------------------\n    new_implementation: ->\n      { rx\n        new_regex_tag\n        internals       } = require '../../../apps/interlex'\n      #=====================================================================================================\n      @throws ( Ωilxt__17 = -> internals.normalize_regex_flags()                ), /Cannot destructure property 'flags'/\n      @throws ( Ωilxt__18 = -> internals.normalize_regex_flags undefined        ), /Cannot destructure property 'flags'/\n      @throws ( Ωilxt__19 = -> internals.normalize_regex_flags null             ), /Cannot destructure property 'flags'/\n      @eq ( Ωilxt__20 = -> internals.normalize_regex_flags { flags: '',         mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__21 = -> internals.normalize_regex_flags { flags: 'd',        mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__22 = -> internals.normalize_regex_flags { flags: 'y',        mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__23 = -> internals.normalize_regex_flags { flags: 'dy',       mode: 'slr', } ), 'dy'\n      @eq ( Ωilxt__24 = -> internals.normalize_regex_flags { flags: 'yd',       mode: 'slr', } ), 'dy'\n      #.....................................................................................................\n      @eq ( Ωilxt__25 = -> internals.normalize_regex_flags { flags: 'i',        mode: 'slr', } ), 'diy'\n      @eq ( Ωilxt__26 = -> internals.normalize_regex_flags { flags: 'g',        mode: 'slr', } ), 'dgy'\n      @eq ( Ωilxt__27 = -> internals.normalize_regex_flags { flags: 'm',        mode: 'slr', } ), 'dmy'\n      @eq ( Ωilxt__28 = -> internals.normalize_regex_flags { flags: 's',        mode: 'slr', } ), 'dsy'\n      @eq ( Ωilxt__29 = -> internals.normalize_regex_flags { flags: 'dgimsuvy', mode: 'slr', } ), 'dgimsy'\n      #.....................................................................................................\n      @throws ( Ωilxt__30 = -> internals.normalize_regex_flags { flags: 'a',    mode: 'slr', } ), /illegal or duplicate flags/\n      @throws ( Ωilxt__31 = -> internals.normalize_regex_flags { flags: 'yy',   mode: 'slr', } ), /illegal or duplicate flags/\n      #-----------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__32 = -> internals.normalize_regex /./              ), /./dvy\n      @eq ( Ωilxt__33 = -> internals.normalize_regex /./d             ), /./dvy\n      @eq ( Ωilxt__34 = -> internals.normalize_regex /./y             ), /./dvy\n      @eq ( Ωilxt__35 = -> internals.normalize_regex /./dy            ), /./dvy\n      @eq ( Ωilxt__36 = -> internals.normalize_regex /./yd            ), /./dvy\n      #.....................................................................................................\n      @eq ( Ωilxt__37 = -> internals.normalize_regex /./i             ), /./divy\n      @eq ( Ωilxt__38 = -> internals.normalize_regex /./g             ), /./dgvy\n      @eq ( Ωilxt__39 = -> internals.normalize_regex /./m             ), /./dmvy\n      @eq ( Ωilxt__40 = -> internals.normalize_regex /./s             ), /./dsvy\n      @eq ( Ωilxt__41 = -> internals.normalize_regex /./dgimsvy       ), /./dgimsvy\n      @eq ( Ωilxt__42 = -> internals.normalize_regex /./dgimsuy       ), /./dgimsvy\n      #.....................................................................................................\n      @throws ( Ωilxt__43 = -> internals.normalize_regex()            ), /expected a regex, got/\n      @throws ( Ωilxt__44 = -> internals.normalize_regex 'helo'       ), /expected a regex, got/\n      #-----------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__45 = -> ( new_regex_tag ''       )'.'              ), /./dvy\n      @eq ( Ωilxt__46 = -> ( new_regex_tag 'd'      )'.'              ), /./dvy\n      @eq ( Ωilxt__47 = -> ( new_regex_tag 'y'      )'.'              ), /./dvy\n      @eq ( Ωilxt__48 = -> ( new_regex_tag 'dy'     )'.'              ), /./dvy\n      @eq ( Ωilxt__49 = -> ( new_regex_tag 'yd'     )'.'              ), /./dvy\n      @eq ( Ωilxt__50 = -> ( new_regex_tag 'd'      ).d'.'            ), /./dvy\n      @eq ( Ωilxt__51 = -> ( new_regex_tag 'y'      ).y'.'            ), /./dvy\n      @eq ( Ωilxt__52 = -> ( new_regex_tag 'dy'     ).dy'.'           ), /./dvy\n      @eq ( Ωilxt__53 = -> ( new_regex_tag 'yd'     ).yd'.'           ), /./dvy\n      @eq ( Ωilxt__54 = -> ( new_regex_tag ''       ).d'.'            ), /./dvy\n      @eq ( Ωilxt__55 = -> ( new_regex_tag ''       ).y'.'            ), /./dvy\n      @eq ( Ωilxt__56 = -> ( new_regex_tag ''       ).dy'.'           ), /./dvy\n      @eq ( Ωilxt__57 = -> ( new_regex_tag ''       ).yd'.'           ), /./dvy\n      #.....................................................................................................\n      @eq ( Ωilxt__58 = -> ( new_regex_tag ''       ).i'.'            ), /./divy\n      @eq ( Ωilxt__59 = -> ( new_regex_tag ''       ).g'.'            ), /./dgvy\n      @eq ( Ωilxt__60 = -> ( new_regex_tag ''       ).m'.'            ), /./dmvy\n      @eq ( Ωilxt__61 = -> ( new_regex_tag ''       ).s'.'            ), /./dsvy\n      @eq ( Ωilxt__62 = -> ( new_regex_tag ''       ).dgimsvy'.'      ), /./dgimsvy\n      @eq ( Ωilxt__63 = -> ( new_regex_tag ''       ).dgimsuy'.'      ), /./dgimsvy\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_1: ->\n      ILX                 = require '../../../apps/interlex'\n      { Grammar\n        Level\n        Token\n        Lexeme\n        rx\n        internals       } = ILX\n      #===========================================================================================================\n      g                 = new Grammar { name: 'g', }\n      gnd               = g.new_level { name: 'gnd', }\n      number_tk_matcher = rx\"[0-9]+\"\n      number_tk         = gnd.new_token { name: 'number', fit: number_tk_matcher, }\n      number_lx         = null\n      #.....................................................................................................\n      @eq ( Ωilxt__64 = -> g.start_level instanceof Level                                 ), true\n      @eq ( Ωilxt__65 = -> g.start_level                                                  ), gnd\n      @eq ( Ωilxt__66 = -> g.start_level_name                                             ), 'gnd'\n      @eq ( Ωilxt__67 = -> g.name                                                         ), 'g'\n      @eq ( Ωilxt__68 = -> g.levels.constructor                                           ), undefined\n      @eq ( Ωilxt__69 = -> g.levels.gnd                                                   ), gnd\n      #.....................................................................................................\n      @eq ( Ωilxt__70 = -> gnd instanceof Level                                           ), true\n      @eq ( Ωilxt__71 = -> gnd.name                                                       ), 'gnd'\n      @eq ( Ωilxt__72 = -> gnd.grammar                                                    ), g\n      @eq ( Ωilxt__73 = -> gnd.tokens.constructor                                         ), undefined\n      @eq ( Ωilxt__74 = -> gnd.tokens.length                                              ), undefined\n      @eq ( Ωilxt__75 = -> gnd.tokens.number                                              ), number_tk\n      #.....................................................................................................\n      @eq ( Ωilxt__76 = -> number_tk instanceof Token                                     ), true\n      @eq ( Ωilxt__77 = -> number_tk.name                                                 ), 'number'\n      @eq ( Ωilxt__78 = -> number_tk.level                                                ), gnd\n      @eq ( Ωilxt__79 = -> number_tk.grammar                                              ), g\n      @eq ( Ωilxt__80 = -> number_tk.fit                                                  ), /[0-9]+/dvy\n      @eq ( Ωilxt__81 = -> number_tk.fit.hasIndices                                       ), true\n      @eq ( Ωilxt__82 = -> number_tk.fit.sticky                                           ), true\n      @eq ( Ωilxt__83 = -> number_tk.fit.unicodeSets                                      ), true\n      @eq ( Ωilxt__84 = -> number_tk.jump                                                 ), null\n      #.....................................................................................................\n      @eq ( Ωilxt__85 = -> ( number_lx = number_tk.match_at 0, '398ä' )?                  ), true\n      @eq ( Ωilxt__86 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt__87 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt__88 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt__89 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt__90 = -> number_lx.hit                                                  ), '398'\n      @eq ( Ωilxt__91 = -> number_lx.start                                                ), 0\n      @eq ( Ωilxt__92 = -> number_lx.stop                                                 ), 3\n      #.....................................................................................................\n      @eq ( Ωilxt__93 = -> ( number_lx = number_tk.match_at 7, 'abcdefgh00102xyz' )?      ), false\n      @eq ( Ωilxt__94 = -> ( number_lx = number_tk.match_at 8, 'abcdefgh00102xyz' )?      ), true\n      @eq ( Ωilxt__95 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt__96 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt__97 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt__98 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt__99 = -> number_lx.hit                                                  ), '00102'\n      @eq ( Ωilxt_100 = -> number_lx.start                                                ), 8\n      @eq ( Ωilxt_101 = -> number_lx.stop                                                 ), 13\n      #.....................................................................................................\n      @eq ( Ωilxt_102 = -> g.levels.gnd                                                   ), gnd\n      @eq ( Ωilxt_103 = -> g.levels.gnd.tokens.number                                     ), number_tk\n      @eq ( Ωilxt_104 = -> isa std.function, g.token_from_fqname                          ), true\n      @eq ( Ωilxt_105 = -> g.token_from_fqname 'gnd.number'                               ), number_tk\n      @throws ( Ωilxt_106 = -> g.token_from_fqname 'XXX.XXX'                              ), /unknown level 'XXX'/\n      @throws ( Ωilxt_107 = -> g.token_from_fqname 'gnd.XXX'                              ), /unknown token 'XXX'/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    new_regex_tag: ->\n      { rx\n        regex\n        internals\n        new_regex_tag } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt_108 = -> typeof   new_regex_tag 'dy'                                  ), 'function'\n      @eq ( Ωilxt_109 = -> typeof ( new_regex_tag 'dy'    ).si                          ), 'function'\n      @eq ( Ωilxt_110 = -> ( (      new_regex_tag 'dyis'  )\"[a-z]\" ) instanceof RegExp  ), true\n      #.....................................................................................................\n      @eq ( Ωilxt_111 = -> ( new_regex_tag 'dyis'  )\"[a-z]\"     ), /[a-z]/disvy\n      @eq ( Ωilxt_112 = -> ( new_regex_tag 'dy'    ).si\"[a-z]\"  ), /[a-z]/disvy\n      @eq ( Ωilxt_113 = -> ( new_regex_tag 'dys'   ).si\"[a-z]\"  ), /[a-z]/disvy\n      @eq ( Ωilxt_114 = -> ( new_regex_tag 'dys'   ).i\"[a-z]\"   ), /[a-z]/disvy\n      @eq ( Ωilxt_115 = -> ( new_regex_tag 'dysi'  )\"[a-z]\"     ), /[a-z]/disvy\n      @eq ( Ωilxt_116 = -> ( new_regex_tag 'v'     ).si\"[a-z]\"  ), /[a-z]/disvy\n      #.....................................................................................................\n      @throws ( Ωilxt_117 = -> ( new_regex_tag 'dy'    ).ab\"[a-z]\"  ), /illegal or duplicate flags/\n      @throws ( Ωilxt_118 = -> ( new_regex_tag 'dyab'  )\"[a-z]\"     ), /illegal or duplicate flags/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    normalize_regex: ->\n      { internals       } = require '../../../apps/interlex'\n      { normalize_regex } = internals\n      @eq ( Ωilxt_119 = -> typeof normalize_regex     ), 'function'\n      @eq ( Ωilxt_120 = -> normalize_regex /[a-z]/ig  ), /[a-z]/dgivy\n      @eq ( Ωilxt_121 = -> normalize_regex /[a-z]/i   ), /[a-z]/divy\n      @eq ( Ωilxt_122 = -> normalize_regex /[a-z]/u   ), /[a-z]/dvy\n      @eq ( Ωilxt_123 = -> normalize_regex /[a-z]/gv  ), /[a-z]/dgvy\n      @eq ( Ωilxt_124 = -> normalize_regex /[a-z]/gu  ), /[a-z]/dgvy\n      @eq ( Ωilxt_125 = -> normalize_regex /[a-z]/v   ), /[a-z]/dvy\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    rx_flags: ->\n      { rx } = require '../../../apps/interlex'\n      @eq ( Ωilxt_126 = -> ( rx\"x\"        ).flags ), 'dvy'\n      @eq ( Ωilxt_127 = -> ( rx.si\"x\"     ).flags ), 'disvy'\n      # @eq ( Ωilxt_128 = -> ( rx.sidvy\"x\"  ).flags ), 'disvy'\n      @eq ( Ωilxt_129 = -> ( rx.y\"x\"      ).flags ), 'dvy'\n      @eq ( Ωilxt_130 = -> rpr rx\"[abc]+\" ), '/[abc]+/dvy'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    numbering: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        rx      } = ILX\n      #=====================================================================================================\n      new_grammar = ( cfg ) ->\n        g         = new Grammar { name: 'g', cfg..., }\n        gnd       = g.new_level { name: 'gnd', }\n        #.....................................................................................................\n        gnd.new_token       { name: 'name',           fit: rx\"(?<initial>[A-Z])[a-z]*\", }\n        gnd.new_token       { name: 'number',         fit: rx\"[0-9]+\",                  }\n        gnd.new_token       { name: 'ws',             fit: rx\"\\s+\",                     }\n        gnd.new_token       { name: 'text',           fit: rx\"[^a-zA-Z0-9\\s]+\",         }\n        #.....................................................................................................\n        return g\n      #.....................................................................................................\n      do =>\n        g = new_grammar { emit_signals: false, }\n        @eq ( Ωilxt_131 = -> g.state.lnr ), 1\n        probes_and_matchers = [\n          [ \"1st line\",           1, ]\n          [ \"2nd line\",           2, ]\n          [ \"3rd line\",           3, ]\n          [ \"4th line (and EOF)\", 4, ] ]\n        #...................................................................................................\n        for [ probe, fit, ] from probes_and_matchers\n          info 'Ωilxt_132', rpr probe\n          lexemes = g.scan_to_list probe\n          # urge 'Ωilxt_133', lexemes\n          @eq ( Ωilxt_134 = -> lexemes[ 0 ].lnr ), fit\n        return null\n      #.....................................................................................................\n      do =>\n        g = new_grammar { lnr: 10, emit_signals: false, }\n        @eq ( Ωilxt_135 = -> g.state.lnr ), 10\n        @throws ( Ωilxt_136 = -> g.reset_lnr 10 ), /does not accept arguments/\n        probes_and_matchers = [\n          [ \"1st line\",           10, ]\n          [ \"2nd line\",           11, ]\n          [ \"3rd line\",           12, ]\n          [ \"4th line (and EOF)\", 13, ] ]\n        #...................................................................................................\n        for [ probe, fit, ] from probes_and_matchers\n          info 'Ωilxt_137', rpr probe\n          lexeme = ( g.scan_to_list probe )[ 0 ]\n          @eq ( Ωilxt_138 = -> lexeme.lnr ), fit\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_plain_regexes: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      probes_and_matchers = [\n        [ \"1st line\",           { length: 3, condensed: \"gnd.ordinal'1st'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"2nd line\",           { length: 3, condensed: \"gnd.ordinal'2nd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"3rd line\",           { length: 3, condensed: \"gnd.ordinal'3rd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"4th line (and EOF)\", { length: 9, condensed: \"gnd.ordinal'4th'|gnd.ws' '|gnd.word'line'|gnd.ws' '|gnd.other'('|gnd.word'and'|gnd.ws' '|gnd.word'EOF'|gnd.other')'\", }, ] ]\n      #-----------------------------------------------------------------------------------------------------\n      test = ( g ) =>\n        for [ probe, fit, ] from probes_and_matchers\n          g.reset_lnr()\n          lexemes = g.scan_to_list probe\n          @eq ( Ωilxt_139 = -> condense_lexemes lexemes ), fit.condensed\n          @eq ( Ωilxt_140 = -> lexemes.length ), fit.length\n          g.reset_lnr()\n          @eq ( Ωilxt_141 = -> [ ( g.scan probe )..., ] ), lexemes\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           fit: rx\"(?<initial>[A-Z])[a-z]+\",           }\n        gnd.new_token       { name: 'ordinal',        fit: rx\"(?<ordinal>[0-9]+)(st|nd|rd|th)\",   }\n        gnd.new_token       { name: 'number',         fit: rx\"[0-9]+\",                            }\n        gnd.new_token       { name: 'ws',             fit: rx\"\\s+\",                               }\n        gnd.new_token       { name: 'word',           fit: rx.i\"[a-z]+\",                          }\n        gnd.new_token       { name: 'other',          fit: rx.i\"[^a-z0-9\\s]+\",                    }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           fit: /(?<initial>[A-Z])[a-z]+/dvy,            }\n        gnd.new_token       { name: 'ordinal',        fit: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/dvy,  }\n        gnd.new_token       { name: 'number',         fit: /[0-9]+/dvy,                             }\n        gnd.new_token       { name: 'ws',             fit: /\\s+/dvy,                                }\n        gnd.new_token       { name: 'word',           fit: /[a-z]+/divy,                            }\n        gnd.new_token       { name: 'other',          fit: /[^a-z0-9\\s]+/divy,                      }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           fit: /(?<initial>[A-Z])[a-z]+/,               }\n        gnd.new_token       { name: 'ordinal',        fit: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/,     }\n        gnd.new_token       { name: 'number',         fit: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             fit: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           fit: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          fit: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           fit: /(?<initial>[A-Z])[a-z]+/v,              }\n        gnd.new_token       { name: 'ordinal',        fit: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/u,    }\n        gnd.new_token       { name: 'number',         fit: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             fit: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           fit: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          fit: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  strategies:\n\n    #-------------------------------------------------------------------------------------------------------\n    levels_implement_strategies: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', shortest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.one_letter'a'\", ]\n          [ [ 1, 'abcd1234', ], \"first.one_letter'b'\", ]\n          [ [ 2, 'abcd1234', ], \"first.one_letter'c'\", ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\", ]\n          [ [ 4, 'abcd1234', ], \"first.one_digit'1'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.one_digit'2'\",  ]\n          [ [ 0, '123abc',   ], \"first.one_digit'1'\",  ]\n          [ [ 1, '123abc',   ], \"first.one_digit'2'\",  ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",  ]\n          [ [ 3, '123abc',   ], \"first.one_letter'a'\", ]\n          [ [ 4, '123abc',   ], \"first.one_letter'b'\", ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'one_digit',      fit: /[0-9]{1}/i, }\n        first.new_token { name: 'two_digits',     fit: /[0-9]{2}/i, }\n        first.new_token { name: 'three_digits',   fit: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    fit: /[0-9]{4}/i, }\n        first.new_token { name: 'one_letter',     fit: /[a-z]{1}/i, }\n        first.new_token { name: 'two_letters',    fit: /[a-z]{2}/i, }\n        first.new_token { name: 'three_letters',  fit: /[a-z]{3}/i, }\n        first.new_token { name: 'four_letters',   fit: /[a-z]{4}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], fit, ] in probes_and_matchers\n          @eq ( Ωilxt_142 = -> condense_lexemes first.match_first_at position, source ), fit\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', longest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_digits',    fit: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   fit: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     fit: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      fit: /[0-9]{1}/i, }\n        first.new_token { name: 'four_letters',   fit: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  fit: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    fit: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     fit: /[a-z]{1}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], fit, ] in probes_and_matchers\n          @eq ( Ωilxt_143 = -> condense_lexemes first.match_first_at position, source ), fit\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', shortest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'one_digit',      fit: /[0-9]{1}/i, }\n        first.new_token { name: 'two_digits',     fit: /[0-9]{2}/i, }\n        first.new_token { name: 'three_digits',   fit: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    fit: /[0-9]{4}/i, }\n        first.new_token { name: 'one_letter',     fit: /[a-z]{1}/i, }\n        first.new_token { name: 'two_letters',    fit: /[a-z]{2}/i, }\n        first.new_token { name: 'three_letters',  fit: /[a-z]{3}/i, }\n        first.new_token { name: 'four_letters',   fit: /[a-z]{4}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], fit, ] in probes_and_matchers\n          @eq ( Ωilxt_144 = -> condense_lexemes first.match_longest_at position, source ), fit\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', longest tokens first ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        g     = new Grammar()\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_digits',    fit: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   fit: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     fit: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      fit: /[0-9]{1}/i, }\n        first.new_token { name: 'four_letters',   fit: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  fit: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    fit: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     fit: /[a-z]{1}/i, }\n        #.....................................................................................................\n        for [ [ position, source, ], fit, ] in probes_and_matchers\n          @eq ( Ωilxt_145 = -> condense_lexemes first.match_longest_at position, source ), fit\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', scrambled tokens ###\n        probes_and_matchers = [\n          [ [ 0, 'abcd1234', ], \"first.four_letters'abcd'\", ]\n          [ [ 1, 'abcd1234', ], \"first.three_letters'bcd'\", ]\n          [ [ 2, 'abcd1234', ], \"first.two_letters'cd'\",    ]\n          [ [ 3, 'abcd1234', ], \"first.one_letter'd'\",      ]\n          [ [ 4, 'abcd1234', ], \"first.four_digits'1234'\",  ]\n          [ [ 5, 'abcd1234', ], \"first.three_digits'234'\",  ]\n          [ [ 0, '123abc',   ], \"first.three_digits'123'\",  ]\n          [ [ 1, '123abc',   ], \"first.two_digits'23'\",     ]\n          [ [ 2, '123abc',   ], \"first.one_digit'3'\",       ]\n          [ [ 3, '123abc',   ], \"first.three_letters'abc'\", ]\n          [ [ 4, '123abc',   ], \"first.two_letters'bc'\",    ]\n          [ [ 5, '123abc',   ], \"first.one_letter'c'\",      ]\n          ]\n        #...................................................................................................\n        shuffle = GUY.rnd.get_shuffle 0.9876, 0.3456\n        for _ in [ 1 .. 100 ]\n          do =>\n            g           = new Grammar()\n            first       = g.new_level { name: 'first', }\n            token_cfgs  = shuffle [\n              { name: 'one_digit',      fit: /[0-9]{1}/i, }\n              { name: 'two_digits',     fit: /[0-9]{2}/i, }\n              { name: 'three_digits',   fit: /[0-9]{3}/i, }\n              { name: 'four_digits',    fit: /[0-9]{4}/i, }\n              { name: 'one_letter',     fit: /[a-z]{1}/i, }\n              { name: 'two_letters',    fit: /[a-z]{2}/i, }\n              { name: 'three_letters',  fit: /[a-z]{3}/i, }\n              { name: 'four_letters',   fit: /[a-z]{4}/i, } ]\n            first.new_token token_cfg for token_cfg in token_cfgs\n            #...............................................................................................\n            for [ [ position, source, ], fit, ] in probes_and_matchers\n              @eq ( Ωilxt_146 = -> condense_lexemes first.match_longest_at position, source ), fit\n            #...............................................................................................\n            return null\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    grammars_use_strategies: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        ### strategy 'longest', scrambled tokens ###\n        probes_and_matchers = [\n          [ 'abcd1234',           \"first.four_letters'abcd'|first.four_digits'1234'\",                                                                       ]\n          [ 'abcdefgh1234567890', \"first.four_letters'abcd'|first.four_letters'efgh'|first.four_digits'1234'|first.four_digits'5678'|first.two_digits'90'\", ]\n          [ 'abcdefg123456789',   \"first.four_letters'abcd'|first.three_letters'efg'|first.four_digits'1234'|first.four_digits'5678'|first.one_digit'9'\",   ]\n          [ '123abc',             \"first.three_digits'123'|first.three_letters'abc'\",                                                                       ]\n          ]\n        #.....................................................................................................\n        shuffle = GUY.rnd.get_shuffle 0.9876, 0.3456\n        for _ in [ 1 .. 100 ]\n          do =>\n            g           = new Grammar { strategy: 'longest', emit_signals: false, }\n            first       = g.new_level { name: 'first', }\n            token_cfgs  = shuffle [\n              { name: 'one_digit',      fit: /[0-9]{1}/i, }\n              { name: 'two_digits',     fit: /[0-9]{2}/i, }\n              { name: 'three_digits',   fit: /[0-9]{3}/i, }\n              { name: 'four_digits',    fit: /[0-9]{4}/i, }\n              { name: 'one_letter',     fit: /[a-z]{1}/i, }\n              { name: 'two_letters',    fit: /[a-z]{2}/i, }\n              { name: 'three_letters',  fit: /[a-z]{3}/i, }\n              { name: 'four_letters',   fit: /[a-z]{4}/i, } ]\n            first.new_token token_cfg for token_cfg in token_cfgs\n            #...............................................................................................\n            @eq ( Ωilxt_147 = -> g.cfg.strategy ), 'longest'\n            @eq ( Ωilxt_148 = -> first.strategy ), 'longest'\n            for [ source, fit, ] in probes_and_matchers\n              @eq ( Ωilxt_149 = -> condense_lexemes g.scan_to_list source ), fit\n            #...............................................................................................\n            return null\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', scrambled tokens ###\n        probes_and_matchers = [\n          [ 'abcd1234',     \"first.two_letters'ab'|first.two_letters'cd'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'\", ]\n          [ 'abcde12345',   \"first.two_letters'ab'|first.two_letters'cd'|first.one_letter'e'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'|first.one_digit'5'\", ]\n          [ 'abcdef123456', \"first.two_letters'ab'|first.two_letters'cd'|first.two_letters'ef'|first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.one_digit'4'|first.one_digit'5'|first.one_digit'6'\", ]\n          [ '123abc',       \"first.one_digit'1'|first.one_digit'2'|first.one_digit'3'|first.two_letters'ab'|first.one_letter'c'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar { strategy: 'first', emit_signals: false, }\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'two_letters',    fit: /[a-z]{2}/i, }\n        first.new_token { name: 'one_digit',      fit: /[0-9]{1}/i, }\n        first.new_token { name: 'three_digits',   fit: /[0-9]{3}/i, }\n        first.new_token { name: 'four_digits',    fit: /[0-9]{4}/i, }\n        first.new_token { name: 'two_digits',     fit: /[0-9]{2}/i, }\n        first.new_token { name: 'one_letter',     fit: /[a-z]{1}/i, }\n        first.new_token { name: 'four_letters',   fit: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  fit: /[a-z]{3}/i, }\n        #...................................................................................................\n        @eq ( Ωilxt_150 = -> g.cfg.strategy ), 'first'\n        @eq ( Ωilxt_151 = -> first.strategy ), 'first'\n        for [ source, fit, ] in probes_and_matchers\n          @eq ( Ωilxt_152 = -> condense_lexemes g.scan_to_list source ), fit\n        return null\n      #.....................................................................................................\n      do =>\n        ### strategy 'first', long tokens first ###\n        probes_and_matchers = [\n          [ 'abcd1234',     \"first.four_letters'abcd'|first.four_digits'1234'\", ]\n          [ 'abcde12345',   \"first.four_letters'abcd'|first.one_letter'e'|first.four_digits'1234'|first.one_digit'5'\", ]\n          [ 'abcdef123456', \"first.four_letters'abcd'|first.two_letters'ef'|first.four_digits'1234'|first.two_digits'56'\", ]\n          [ '123abc',       \"first.three_digits'123'|first.three_letters'abc'\", ]\n          ]\n        #...................................................................................................\n        g     = new Grammar { strategy: 'first', emit_signals: false, }\n        first = g.new_level { name: 'first', }\n        first.new_token { name: 'four_letters',   fit: /[a-z]{4}/i, }\n        first.new_token { name: 'three_letters',  fit: /[a-z]{3}/i, }\n        first.new_token { name: 'two_letters',    fit: /[a-z]{2}/i, }\n        first.new_token { name: 'one_letter',     fit: /[a-z]{1}/i, }\n        first.new_token { name: 'four_digits',    fit: /[0-9]{4}/i, }\n        first.new_token { name: 'three_digits',   fit: /[0-9]{3}/i, }\n        first.new_token { name: 'two_digits',     fit: /[0-9]{2}/i, }\n        first.new_token { name: 'one_digit',      fit: /[0-9]{1}/i, }\n        #...................................................................................................\n        @eq ( Ωilxt_153 = -> g.cfg.strategy ), 'first'\n        @eq ( Ωilxt_154 = -> first.strategy ), 'first'\n        for [ source, fit, ] in probes_and_matchers\n          @eq ( Ωilxt_155 = -> condense_lexemes g.scan_to_list source ), fit\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    all_strategies_refuse_jumpless_empty_matches: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g = new Grammar { strategy: 'first', emit_signals: false, }\n        gnd = g.new_level { name: 'gnd', }\n        gnd.new_token { name: 'a', fit: /a/, }\n        gnd.new_token { name: 'b', fit: /(?=b)/, }\n        @throws ( Ωilxt_156 = -> g.scan_to_list \"ab\" ), /encountered zero-length match/\n      #.....................................................................................................\n      do =>\n        g = new Grammar { strategy: 'longest', emit_signals: false, }\n        gnd = g.new_level { name: 'gnd', }\n        gnd.new_token { name: 'a', fit: /a/, }\n        gnd.new_token { name: 'b', fit: /(?=b)/, }\n        @throws ( Ωilxt_157 = -> g.scan_to_list \"ab\" ), /encountered zero-length match/\n      #.....................................................................................................\n      do =>\n        ### We accept the empty match here since while it does get produced as an intermediate value to find\n        the longest match, it does not get passed on as a resulting lexeme. ###\n        g = new Grammar { strategy: 'longest', emit_signals: false, }\n        gnd = g.new_level { name: 'gnd', }\n        gnd.new_token { name: 'a', fit: /[ab]/, }\n        gnd.new_token { name: 'b', fit: /(?=b)/, }\n        @eq ( Ωilxt_158 = -> condense_lexemes g.scan_to_list \"ab\" ), \"gnd.a'a'|gnd.a'b'\"\n      #.....................................................................................................\n      return null\n\n\n  #=========================================================================================================\n  levels:\n\n    #-------------------------------------------------------------------------------------------------------\n    illegal_to_declare_jump_to_same_level: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g       = new Grammar()\n        first   = g.new_level { name: 'first', }\n        @throws ( Ωilxt_159 = -> first.new_token { name: 'digit', fit: /[0-9]/, jump: 'first',  } ), /cannot jump to same level/\n        @throws ( Ωilxt_160 = -> first.new_token { name: 'digit', fit: /[0-9]/, jump: 'first!', } ), /cannot jump to same level/\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_jumps: ->\n      { Token } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq     ( Ωilxt_161 = -> Token._parse_jump()                                   ), null\n      @eq     ( Ωilxt_162 = -> Token._parse_jump '..'                                ), { spec: '..',       carry: false, action: 'back', target: '..',      }\n      @eq     ( Ωilxt_163 = -> Token._parse_jump 'mylevel'                           ), { spec: 'mylevel',  carry: false, action: 'fore', target: 'mylevel', }\n      @eq     ( Ωilxt_164 = -> Token._parse_jump '..!'                               ), { spec: '..!',      carry: true,  action: 'back', target: '..',      }\n      @eq     ( Ωilxt_165 = -> Token._parse_jump 'mylevel!'                          ), { spec: 'mylevel!', carry: true,  action: 'fore', target: 'mylevel', }\n      @eq     ( Ωilxt_166 = -> Token._parse_jump 'mylevel!', { name: 'otherlevel', } ), { spec: 'mylevel!', carry: true,  action: 'fore', target: 'mylevel', }\n      @throws ( Ωilxt_167 = -> Token._parse_jump '..]'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_168 = -> Token._parse_jump ']..'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_169 = -> Token._parse_jump '[mylevel'                          ), /encountered illegal jump spec/\n      @throws ( Ωilxt_170 = -> Token._parse_jump 'mylevel['                          ), /encountered illegal jump spec/\n      @throws ( Ωilxt_171 = -> Token._parse_jump 'mylevel[', { name: 'otherlevel', } ), /encountered illegal jump spec/\n      @throws ( Ωilxt_172 = -> Token._parse_jump '[mylevel['                         ), /encountered illegal jump spec/\n      @throws ( Ωilxt_173 = -> Token._parse_jump '[mylevel]'                         ), /encountered illegal jump spec/\n      @throws ( Ωilxt_174 = -> Token._parse_jump ']mylevel'                          ), /encountered illegal jump spec/\n      @throws ( Ωilxt_175 = -> Token._parse_jump '[..'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_176 = -> Token._parse_jump '[..]'                              ), /encountered illegal jump spec/\n      @throws ( Ωilxt_177 = -> Token._parse_jump '..['                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_178 = -> Token._parse_jump '[...'                              ), /encountered illegal jump spec/\n      @throws ( Ωilxt_179 = -> Token._parse_jump '...'                               ), /encountered illegal jump spec/\n      @throws ( Ωilxt_180 = -> Token._parse_jump '%'                                 ), /encountered illegal jump spec/\n      @throws ( Ωilxt_181 = -> Token._parse_jump 'my-name'                           ), /encountered illegal jump spec/\n      @throws ( Ωilxt_182 = -> Token._parse_jump 'mylevel',  { name: 'mylevel', }    ), /cannot jump to same level/\n      @throws ( Ωilxt_183 = -> Token._parse_jump 'mylevel!', { name: 'mylevel', }    ), /cannot jump to same level/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_set_lexeme_level: ->\n      { Grammar\n        Token\n        Lexeme } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g       = new Grammar { emit_signals: false, }\n        #...................................................................................................\n        first   = g.new_level { name: 'first', }\n        first.new_token   { name: 'digit',      fit: /[0-9]/,     jump: 'number',   }\n        first.new_token   { name: 'other',      fit: /[^0-9]+/,                     }\n        #...................................................................................................\n        number  = g.new_level { name: 'number', }\n        number.new_token  { name: 'digits',     fit: /[0-9]+/,                      }\n        number.new_token  { name: 'other',      fit: /[^0-9]/,    jump: '..',       }\n        #...................................................................................................\n        [ lexeme, ] = g.scan_to_list '5'\n        @eq ( Ωilxt_184 = -> lexeme instanceof Lexeme       ), true\n        @eq ( Ωilxt_185 = -> lexeme.token instanceof Token  ), true\n        @eq ( Ωilxt_186 = -> lexeme.name                    ), 'digit'\n        @eq ( Ωilxt_187 = -> lexeme.level.name              ), 'first'\n        @eq ( Ωilxt_188 = -> lexeme.fqname                  ), 'first.digit'\n        lexeme.set_level number\n        @eq ( Ωilxt_189 = -> lexeme instanceof Lexeme       ), true\n        @eq ( Ωilxt_190 = -> lexeme.token instanceof Token  ), true\n        @eq ( Ωilxt_191 = -> lexeme.name                    ), 'digit'\n        @eq ( Ωilxt_192 = -> lexeme.level.name              ), 'number'\n        @eq ( Ωilxt_193 = -> lexeme.fqname                  ), 'number.digit'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    carrying_and_sticking_jumps: ->\n      { Grammar } = require '../../../apps/interlex'\n      g_cfg = { emit_signals: false, }\n      #.....................................................................................................\n      do =>\n        ### forejump carries, backjump sticks ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      fit: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         fit: /\"/,             jump: 'dqstring!',  }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      fit: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         fit: /\"/,             jump: '..'          }\n        #...................................................................................................\n        @eq ( Ωilxt_194 = -> first.tokens.dq.name     ), 'dq'\n        @eq ( Ωilxt_195 = -> first.tokens.dq.jump     ), { spec: 'dqstring!', carry: true, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_196 = -> dqstring.tokens.dq.name  ), 'dq'\n        @eq ( Ωilxt_197 = -> dqstring.tokens.dq.jump  ), { spec: '..', carry: false, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_198 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ',  pos: '1:0:9',   }\n        @eq ( Ωilxt_199 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',          pos: '1:9:10',  }\n        @eq ( Ωilxt_200 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',        pos: '1:10:13', }\n        @eq ( Ωilxt_201 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',          pos: '1:13:14', }\n        @eq ( Ωilxt_202 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',          pos: '1:14:15', }\n        @eq ( Ωilxt_203 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      do =>\n        ### forejump sticks, backjump carries ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      fit: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         fit: /\"/,             jump: 'dqstring',   }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      fit: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         fit: /\"/,             jump: '..!'         }\n        #...................................................................................................\n        @eq ( Ωilxt_204 = -> first.tokens.dq.name     ), 'dq'\n        @eq ( Ωilxt_205 = -> first.tokens.dq.jump     ), { spec: 'dqstring', carry: false, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_206 = -> dqstring.tokens.dq.name  ), 'dq'\n        @eq ( Ωilxt_207 = -> dqstring.tokens.dq.jump  ), { spec: '..!', carry: true, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_208 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ', pos: '1:0:9',   }\n        @eq ( Ωilxt_209 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:9:10',  }\n        @eq ( Ωilxt_210 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',       pos: '1:10:13', }\n        @eq ( Ωilxt_211 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:13:14', }\n        @eq ( Ωilxt_212 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',         pos: '1:14:15', }\n        @eq ( Ωilxt_213 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      do =>\n        ### forejump carries, backjump carries ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      fit: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         fit: /\"/,             jump: 'dqstring!',  }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      fit: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         fit: /\"/,             jump: '..!'         }\n        #...................................................................................................\n        @eq ( Ωilxt_214 = -> first.tokens.dq.name     ), 'dq'\n        @eq ( Ωilxt_215 = -> first.tokens.dq.jump     ), { spec: 'dqstring!', carry: true, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_216 = -> dqstring.tokens.dq.name  ), 'dq'\n        @eq ( Ωilxt_217 = -> dqstring.tokens.dq.jump  ), { spec: '..!', carry: true, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_218 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ', pos: '1:0:9',   }\n        @eq ( Ωilxt_219 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',         pos: '1:9:10',  }\n        @eq ( Ωilxt_220 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',       pos: '1:10:13', }\n        @eq ( Ωilxt_221 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:13:14', }\n        @eq ( Ωilxt_222 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',         pos: '1:14:15', }\n        @eq ( Ωilxt_223 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      do =>\n        ### forejump sticks, backjump sticks ###\n        g = new Grammar g_cfg\n        #...................................................................................................\n        first     = g.new_level { name: 'first', }\n        first.new_token     { name: 'other',      fit: /[^\"]+/,                             }\n        first.new_token     { name: 'dq',         fit: /\"/,             jump: 'dqstring',   }\n        #...................................................................................................\n        dqstring  = g.new_level { name: 'dqstring', }\n        dqstring.new_token  { name: 'other',      fit: /[^\"]+/,                             }\n        dqstring.new_token  { name: 'dq',         fit: /\"/,             jump: '..'          }\n        #...................................................................................................\n        @eq ( Ωilxt_224 = -> first.tokens.dq.name     ), 'dq'\n        @eq ( Ωilxt_225 = -> first.tokens.dq.jump     ), { spec: 'dqstring', carry: false, action: 'fore', target: 'dqstring', }\n        @eq ( Ωilxt_226 = -> dqstring.tokens.dq.name  ), 'dq'\n        @eq ( Ωilxt_227 = -> dqstring.tokens.dq.jump  ), { spec: '..', carry: false, action: 'back', target: '..', }\n        #...................................................................................................\n        lexemes = g.scan 'Bob said \"wow\".'\n        @eq ( Ωilxt_228 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: 'Bob said ', pos: '1:0:9',   }\n        @eq ( Ωilxt_229 = -> abbrlxm lexemes.next().value ), { fqname: 'first.dq',       hit: '\"',         pos: '1:9:10',  }\n        @eq ( Ωilxt_230 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.other', hit: 'wow',       pos: '1:10:13', }\n        @eq ( Ωilxt_231 = -> abbrlxm lexemes.next().value ), { fqname: 'dqstring.dq',    hit: '\"',         pos: '1:13:14', }\n        @eq ( Ωilxt_232 = -> abbrlxm lexemes.next().value ), { fqname: 'first.other',    hit: '.',         pos: '1:14:15', }\n        @eq ( Ωilxt_233 = -> lexemes.next().done  ), true\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_zero_length_matchers_with_jumps: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      probes_and_matchers = [\n        [ \"Alice has 431 owls\", { length: 8, condensed: \"gnd.letters'Alice'|gnd.ws' '|gnd.letters'has'|gnd.ws' '|gnd.before_digits''|number.digits'431'|gnd.ws' '|gnd.letters'owls'\", }, ]\n        [ \"99kg\",               { length: 3, condensed: \"gnd.before_digits''|number.digits'99'|gnd.letters'kg'\", }, ]\n        ]\n      #-----------------------------------------------------------------------------------------------------\n      test = ( g ) =>\n        for [ probe, fit, ] from probes_and_matchers\n          g.reset_lnr()\n          lexemes = g.scan_to_list probe\n          @eq ( Ωilxt_234 = -> condense_lexemes lexemes ), fit.condensed\n          @eq ( Ωilxt_235 = -> lexemes.length ), fit.length\n          g.reset_lnr()\n          @eq ( Ωilxt_236 = -> [ ( g.scan probe )..., ] ), lexemes\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        number    = g.new_level { name: 'number', }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          fit: /[a-z]+/i,                      }\n        gnd.new_token     { name: 'before_digits',    fit: /(?=[0-9])/i,  jump: 'number',  }\n        gnd.new_token     { name: 'ws',               fit: /\\s+/i,                         }\n        #...................................................................................................\n        number.new_token  { name: 'digits',           fit: /[0-9]+/i,     jump: '..',      }\n        #...................................................................................................\n        test g\n        source = probes_and_matchers[ 0 ][ 0 ]\n        info 'Ωilxt_237', source; g.reset_lnr(); tabulate_lexemes g.scan source\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_zero_length_matchers_with_jumps_2: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        number    = g.new_level { name: 'number', }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          fit:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    fit:  /(?=[0-9])/,  jump: 'number',  }\n        gnd.new_token     { name: 'ws',               fit:  /\\s+/,                         }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          fit:  /[0-9]+/,           }\n        number.new_token  { name: 'unit',             fit:  /[a-zA-Z]+/,     jump: '..',      }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        info 'Ωilxt_238', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_239 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits', hit: '',   pos: '1:0:0', }\n        @eq ( Ωilxt_240 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',    hit: '99', pos: '1:0:2', }\n        @eq ( Ωilxt_241 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',       hit: 'kg', pos: '1:2:4', }\n        @eq ( Ωilxt_242 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.before_digits', hit: '',   pos: '1:4:4', }\n        @eq ( Ωilxt_243 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',    hit: '23', pos: '1:4:6', }\n        @eq ( Ωilxt_244 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',       hit: 'mm', pos: '1:6:8', }\n        @eq ( Ωilxt_245 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    duplicate_token_names_are_forbidden: ->\n      { Grammar\n        Token\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        @eq     ( Ωilxt_246 = -> ( gnd.new_token { name: 'letters', fit:  /[a-z]+/, } ) instanceof Token ), true\n        @throws ( Ωilxt_247 = ->   gnd.new_token { name: 'letters', fit:  /[A-Z]+/, } ), null\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  stack: ->\n    Levelstack = ( require '../../../apps/interlex' ).internals.Levelstack\n    do =>\n      stack = new Levelstack()\n      @eq     ( Ωilxt_248 = -> stack.is_empty                   ), true\n      stack.push { name: '1', }\n      @eq     ( Ωilxt_249 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_250 = -> stack.peek()                     ), { name: '1', }\n      @eq     ( Ωilxt_251 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_252 = -> stack.length                     ), 0\n    do =>\n      stack = new Levelstack { name: '1', }\n      @eq     ( Ωilxt_253 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_254 = -> stack.peek()                     ), { name: '1', }\n      @eq     ( Ωilxt_255 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_256 = -> stack.length                     ), 0\n    do =>\n      stack = new Levelstack { name: '1', }, { name: '2', }\n      @eq     ( Ωilxt_257 = -> stack.length                     ), 2\n      @eq     ( Ωilxt_258 = -> stack.peek()                     ), { name: '2', }\n      @eq     ( Ωilxt_259 = -> stack.popnpeek()                 ), { name: '1', }\n      @eq     ( Ωilxt_260 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_261 = -> stack.peek()                     ), { name: '1', }\n      @eq     ( Ωilxt_262 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_263 = -> stack.length                     ), 0\n    do =>\n      stack = new Levelstack { name: '1', }, { name: '2', }\n      @eq     ( Ωilxt_264 = -> stack.length                     ), 2\n      # @eq     ( Ωilxt_265 = -> stack.peek_name()                ), '2'\n      # @eq     ( Ωilxt_266 = -> stack.popnpeek_name()            ), '1'\n      stack.pop()\n      @eq     ( Ωilxt_267 = -> stack.length                     ), 1\n      @eq     ( Ωilxt_268 = -> stack.is_empty                   ), false\n      # @eq     ( Ωilxt_269 = -> stack.peek_name()                ), '1'\n      @eq     ( Ωilxt_270 = -> stack.pop_name()                 ), '1'\n      @eq     ( Ωilxt_271 = -> stack.length                     ), 0\n      @eq     ( Ωilxt_272 = -> stack.is_empty                   ), true\n    do =>\n      stack = new Levelstack { name: '1', }, { name: '2', }\n      @eq     ( Ωilxt_273 = -> stack.pop()                      ), { name: '2', }\n      @eq     ( Ωilxt_274 = -> stack.is_empty                   ), false\n      @eq     ( Ωilxt_275 = -> stack.pop()                      ), { name: '1', }\n      @eq     ( Ωilxt_276 = -> stack.is_empty                   ), true\n      @throws ( Ωilxt_277 = -> stack.pop()                      ), /stack is empty/\n      @throws ( Ωilxt_278 = -> stack.popnpeek()                 ), /stack is empty/\n      @throws ( Ωilxt_279 = -> stack.pop_name()                 ), /stack is empty/\n      # @throws ( Ωilxt_280 = -> stack.popnpeek_name()            ), /stack is empty/\n      @eq     ( Ωilxt_281 = -> stack.pop            'fallback'  ), 'fallback'\n      @eq     ( Ωilxt_282 = -> stack.popnpeek       'fallback'  ), 'fallback'\n      @eq     ( Ωilxt_283 = -> stack.pop_name       'fallback'  ), 'fallback'\n      # @eq     ( Ωilxt_284 = -> stack.popnpeek_name  'fallback'  ), 'fallback'\n    return null\n\n  #=========================================================================================================\n  lexeme_merging:\n\n    #-------------------------------------------------------------------------------------------------------\n    no_merging: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      number    = g.new_level { name: 'number', }\n      #.....................................................................................................\n      text.new_token    { name: 'text',         fit: /// \\\\ \\p{Decimal_Number} | \\p{Letter} ///v,                 }\n      text.new_token    { name: 'ws',           fit: /// \\p{White_Space}                    ///v,                 }\n      text.new_token    { name: 'number_start', fit: /// (?= (?!< \\\\ ) \\p{Decimal_Number} ) ///v, jump: 'number', }\n      number.new_token  { name: 'digit',        fit: /// \\p{Decimal_Number} | \\. | e        ///v,                 }\n      number.new_token  { name: 'number_stop',  fit: /// (?= \\P{Decimal_Number} )           ///v, jump: '..',     }\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 has 3556.3 Petabytes\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_285', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_286', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_287 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'R', pos: '1:0:1' }\n        @eq ( Ωilxt_288 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: '\\\\2', pos: '1:1:3' }\n        @eq ( Ωilxt_289 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'D', pos: '1:3:4' }\n        @eq ( Ωilxt_290 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: '\\\\2', pos: '1:4:6' }\n        @eq ( Ωilxt_291 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ', pos: '1:6:7' }\n        @eq ( Ωilxt_292 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'h', pos: '1:7:8' }\n        @eq ( Ωilxt_293 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'a', pos: '1:8:9' }\n        @eq ( Ωilxt_294 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 's', pos: '1:9:10' }\n        @eq ( Ωilxt_295 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ', pos: '1:10:11' }\n        @eq ( Ωilxt_296 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.number_start',  hit: '', pos: '1:11:11' }\n        @eq ( Ωilxt_297 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '3', pos: '1:11:12' }\n        @eq ( Ωilxt_298 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '5', pos: '1:12:13' }\n        @eq ( Ωilxt_299 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '5', pos: '1:13:14' }\n        @eq ( Ωilxt_300 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '6', pos: '1:14:15' }\n        @eq ( Ωilxt_301 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '.', pos: '1:15:16' }\n        @eq ( Ωilxt_302 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '3', pos: '1:16:17' }\n        @eq ( Ωilxt_303 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number_stop', hit: '', pos: '1:17:17' }\n        @eq ( Ωilxt_304 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ', pos: '1:17:18' }\n        @eq ( Ωilxt_305 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'P', pos: '1:18:19' }\n        @eq ( Ωilxt_306 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'e', pos: '1:19:20' }\n        @eq ( Ωilxt_307 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 't', pos: '1:20:21' }\n        @eq ( Ωilxt_308 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'a', pos: '1:21:22' }\n        @eq ( Ωilxt_309 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'b', pos: '1:22:23' }\n        @eq ( Ωilxt_310 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'y', pos: '1:23:24' }\n        @eq ( Ωilxt_311 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 't', pos: '1:24:25' }\n        @eq ( Ωilxt_312 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'e', pos: '1:25:26' }\n        @eq ( Ωilxt_313 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 's', pos: '1:26:27' }\n        @eq ( Ωilxt_314 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      number    = g.new_level { name: 'number', }\n      #.....................................................................................................\n      text.new_token    { name: 'text',         fit: /// \\\\ \\p{Decimal_Number} | \\p{Letter} ///v, merge: true,    }\n      text.new_token    { name: 'ws',           fit: /// \\p{White_Space}                    ///v, merge: true,    }\n      text.new_token    { name: 'number_start', fit: /// (?= (?!< \\\\ ) \\p{Decimal_Number} ) ///v, jump: 'number', }\n      number.new_token  { name: 'digit',        fit: /// \\p{Decimal_Number} | \\. | e        ///v, merge: true,    }\n      number.new_token  { name: 'number_stop',  fit: /// (?= \\P{Decimal_Number} )           ///v, jump: '..',     }\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 has 3556.3 Petabytes\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_315', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        info 'Ωilxt_316', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_317 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'R\\\\2D\\\\2',  pos: '1:0:6' }\n        @eq ( Ωilxt_318 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ',         pos: '1:6:7' }\n        @eq ( Ωilxt_319 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'has',       pos: '1:7:10' }\n        @eq ( Ωilxt_320 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ',         pos: '1:10:11' }\n        @eq ( Ωilxt_321 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.number_start',  hit: '',          pos: '1:11:11' }\n        @eq ( Ωilxt_322 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.digit',       hit: '3556.3',    pos: '1:11:17' }\n        @eq ( Ωilxt_323 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number_stop', hit: '',          pos: '1:17:17' }\n        @eq ( Ωilxt_324 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.ws',            hit: ' ',         pos: '1:17:18' }\n        @eq ( Ωilxt_325 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.text',          hit: 'Petabytes', pos: '1:18:27' }\n        @eq ( Ωilxt_326 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_default: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      text.new_token { name: 'name', fit: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge: true,    }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_327', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        info 'Ωilxt_328', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_329 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { initial: [ 'A', 'B', 'C', 'D' ] }, }\n        @eq ( Ωilxt_330 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_assign: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      text.new_token { name: 'name', fit: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge: 'assign',    }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_331', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        info 'Ωilxt_332', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_333 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { initial: 'D' }, }\n        @eq ( Ωilxt_334 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_default_and_single_match: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      text.new_token { name: 'name', fit: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge: true,    }\n      #.....................................................................................................\n      do =>\n        source = \"Arc\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_335', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        info 'Ωilxt_336', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_337 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'Arc', pos: '1:0:3', data: { initial: [ 'A', ] }, }\n        @eq ( Ωilxt_338 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_merge_function: ->\n      { Grammar\n        internals\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      merge     = ({ merged, lexemes, }) ->\n        merged.assign { initial: ( lxm.data.initial for lxm in lexemes ), }\n        return null\n      text.new_token { name: 'name', fit: /// (?<initial> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ///v, merge, }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_339', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        info 'Ωilxt_340', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_341 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { initial: [ 'A', 'B', 'C', 'D', ], } }\n        @eq ( Ωilxt_342 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    token_merging_with_merge_list: ->\n      { Grammar\n        internals\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', emit_signals: false, }\n      text      = g.new_level { name: 'text', }\n      #.....................................................................................................\n      fit = /// (?<parts> (?<initials> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ) ///v\n      text.new_token { name: 'name', fit, merge: 'list', }\n      #.....................................................................................................\n      do =>\n        source = \"ArcBoCyDeen\"\n        # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_343', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        info 'Ωilxt_344', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_345 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { parts: [ 'Arc', 'Bo', 'Cy', 'Deen' ], initials: [ 'A', 'B', 'C', 'D' ] } }\n        @eq ( Ωilxt_346 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n    # #-------------------------------------------------------------------------------------------------------\n    # token_merging_with_merge_join: ->\n    #   { Grammar\n    #     internals\n    #     rx      } = require '../../../apps/interlex'\n    #   #=====================================================================================================\n    #   g         = new Grammar { name: 'g', emit_signals: false, }\n    #   text      = g.new_level { name: 'text', }\n    #   #.....................................................................................................\n    #   fit = /// (?<parts> (?<initials> \\p{Uppercase_Letter} ) \\p{Lowercase_Letter}+ ) ///v\n    #   text.new_token { name: 'name', fit, merge: 'join', }\n    #   #.....................................................................................................\n    #   do =>\n    #     source = \"ArcBoCyDeen\"\n    #     # g.reset_lnr(); echo abbrlxm lxm for lxm from g.scan source\n    #     # info 'Ωilxt_347', source; g.reset_lnr(); tabulate_lexemes g.scan source\n    #     info 'Ωilxt_348', source; g.reset_lnr(); lexemes = g.scan source\n    #     @eq ( Ωilxt_349 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.name', hit: 'ArcBoCyDeen', pos: '1:0:11', data: { parts: [ 'ArcBoCyDeen' ], initials: [ 'ABCD' ] } }\n    #     @eq ( Ωilxt_350 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n    #     return null\n    #   return null\n\n  #=========================================================================================================\n  data_capture:\n\n    #-------------------------------------------------------------------------------------------------------\n    data_property: ->\n      { Grammar } = require '../../../apps/interlex'\n      g     = new Grammar()\n      gnd   = g.new_level { name: 'gnd', }\n      name  = gnd.new_token { name: 'name', fit: ///\n        (?<initial> \\p{Uppercase_Letter} ) (?<tail> \\p{Lowercase_Letter}* ) ///, }\n      lexeme = g.scan_first 'Brobdignac'\n      @eq ( Ωilxt_351 = -> lexeme.groups              ), undefined\n      @eq ( Ωilxt_352 = -> lexeme.data?               ), true\n      @eq ( Ωilxt_353 = -> lexeme.has_data            ), true\n      @eq ( Ωilxt_354 = -> lexeme.data.constructor    ), undefined\n      @eq ( Ωilxt_355 = -> lexeme.data.initial        ), 'B'\n      @eq ( Ωilxt_356 = -> lexeme.data.tail           ), 'robdignac'\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    reset_data: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g       = new Grammar()\n        g_data  = g.data\n        @eq ( Ωilxt_357 = -> type_of g.reset_data   ), 'function'\n        @eq ( Ωilxt_358 = -> type_of g.assign       ), 'function'\n        @eq ( Ωilxt_359 = -> g.data                 ), {}\n        @eq ( Ωilxt_360 = -> g.data is g_data       ), true\n        g.assign { key: 'value', }\n        @eq ( Ωilxt_361 = -> g.data                 ), { key: 'value', }\n        @eq ( Ωilxt_362 = -> g.data is g_data       ), true\n        return null\n      #.....................................................................................................\n      do =>\n        g       = new Grammar()\n        g_data  = g.data\n        g.assign { key: 'value', }\n        @throws ( Ωilxt_363 = -> g.reset_data false ), /does not accept arguments/\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    data_templating: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        template  = { one: 1, list: [], set: new Set(), }\n        g         = new Grammar { data: template, }\n        @eq ( Ωilxt_364 = -> g.data                           ), template\n        @eq ( Ωilxt_365 = -> g.data       is template         ), false\n        @eq ( Ωilxt_366 = -> g.data.list  is template.list    ), true\n        @eq ( Ωilxt_367 = -> g.data.set   is template.set     ), true\n        return null\n      #.....................................................................................................\n      do =>\n        template  = { one: 1, list: ( -> [] ), set: ( -> new Set() ), }\n        matcher   = { one: 1, list: [], set: new Set(), }\n        g         = new Grammar { data: template, }\n        ### guy_test doesn't currently recognize nested maps, sets so we're doing it the long way ###\n        # @eq ( Ωilxt_368 = -> g.data                           ), matcher\n        @eq ( Ωilxt_369 = -> g.data       is template         ), false\n        @eq ( Ωilxt_370 = -> g.data.list  is template.list    ), false\n        @eq ( Ωilxt_371 = -> g.data.set   is template.set     ), false\n        @eq ( Ωilxt_372 = -> type_of g.data.list              ), 'list'\n        @eq ( Ωilxt_373 = -> type_of g.data.set               ), 'set'\n        return null\n      #.....................................................................................................\n      do =>\n        template  = { count: 1, list: ( -> [] ), }\n        matcher   = { count: 1, list: (    [] ), }\n        g         = new Grammar { data: template, }\n        ### guy_test doesn't currently recognize nested maps, sets so we're doing it the long way ###\n        # @eq ( Ωilxt_374 = -> g.data                           ), matcher\n        @eq ( Ωilxt_375 = -> g.data.count                         ), matcher.count\n        @eq ( Ωilxt_376 = -> g.data.list                          ), matcher.list\n        @eq ( Ωilxt_377 = -> g.cfg.data.count is template.count   ), true\n        @eq ( Ωilxt_378 = -> g.cfg.data.list  is g.cfg.data.list  ), false\n        @eq ( Ωilxt_379 = -> isa std.list, g.cfg.data.list        ), true\n        g.data.count++\n        g.data.list.push 'value'\n        @eq ( Ωilxt_380 = -> g.data.count                         ), 2\n        @eq ( Ωilxt_381 = -> g.data.list                          ), [ 'value', ]\n        g.reset_data()\n        @eq ( Ωilxt_382 = -> g.data.count                         ), matcher.count\n        @eq ( Ωilxt_383 = -> g.data.list                          ), matcher.list\n        return null\n      #.....................................................................................................\n      do =>\n        template  = { count: 1, }\n        g         = new Grammar { data: template, }\n        ### guy_test doesn't currently recognize nested maps, sets so we're doing it the long way ###\n        # @eq ( Ωilxt_384 = -> g.data                           ), matcher\n        @eq (                                 Ωilxt_385 = -> g.data.count ), 1\n        g.data.count++;                 @eq ( Ωilxt_386 = -> g.data.count ), 2\n        g.reset_data();                 @eq ( Ωilxt_387 = -> g.data.count ), 1\n        g.data.count++; g.reset_data(); @eq ( Ωilxt_388 = -> g.data.count ), 1\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    grammar_cfg_reset_lnr: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        @eq ( Ωilxt_389 = -> ( new Grammar() ).cfg.reset_lnr ), false\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { reset_lnr: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        text      = gnd.new_token { name: 'text', fit: /.+/, }\n        @eq ( Ωilxt_390 = -> g.state.lnr  ), 1\n        lexeme = g.scan_first 'helo'\n        @eq ( Ωilxt_391 = -> lexeme.lnr   ), 1\n        @eq ( Ωilxt_392 = -> g.state.lnr  ), 2\n        lexeme = g.scan_first 'how'\n        @eq ( Ωilxt_393 = -> lexeme.lnr   ), 2\n        @eq ( Ωilxt_394 = -> g.state.lnr  ), 3\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { reset_lnr: true, }\n        gnd       = g.new_level { name: 'gnd', }\n        text      = gnd.new_token { name: 'text', fit: /.+/, }\n        @eq ( Ωilxt_395 = -> g.state.lnr  ), 1\n        lexeme = g.scan_first 'helo'\n        @eq ( Ωilxt_396 = -> lexeme.lnr   ), 1\n        @eq ( Ωilxt_397 = -> g.state.lnr  ), 1\n        lexeme = g.scan_first 'how'\n        @eq ( Ωilxt_398 = -> lexeme.lnr   ), 1\n        @eq ( Ωilxt_399 = -> g.state.lnr  ), 1\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    grammar_cfg_reset_data: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        @eq ( Ωilxt_400 = -> ( new Grammar() ).cfg.reset_data ), false\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { data: { count: 1, hits: ( -> [] ), }, reset_data: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        text      = gnd.new_token { name: 'text', fit: /.+/, }\n        hits      = g.data.hits\n        @eq ( Ωilxt_401 = -> g.data.count         ), 1\n        g.data.count++\n        lexeme = g.scan_first 'helo'\n        g.data.hits.push lexeme.hit\n        @eq ( Ωilxt_402 = -> g.data.count         ), 2\n        @eq ( Ωilxt_403 = -> g.data.hits          ), [ 'helo', ]\n        g.data.count++\n        lexeme = g.scan_first 'how'\n        g.data.hits.push lexeme.hit\n        @eq ( Ωilxt_404 = -> g.data.count         ), 3\n        @eq ( Ωilxt_405 = -> g.data.hits          ), [ 'helo', 'how', ]\n        @eq ( Ωilxt_406 = -> g.data.hits is hits  ), true\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { data: { count: 1, hits: ( -> [] ), }, reset_data: true, }\n        gnd       = g.new_level { name: 'gnd', }\n        text      = gnd.new_token { name: 'text', fit: /.+/, }\n        hits      = g.data.hits\n        @eq ( Ωilxt_407 = -> g.data.count         ), 1\n        g.data.count++\n        lexeme = g.scan_first 'helo'\n        g.data.hits.push lexeme.hit\n        @eq ( Ωilxt_408 = -> g.data.count         ), 1\n        @eq ( Ωilxt_409 = -> g.data.hits          ), [ 'helo', ]\n        g.data.count++\n        lexeme = g.scan_first 'how'\n        g.data.hits.push lexeme.hit\n        @eq ( Ωilxt_410 = -> g.data.count         ), 1\n        @eq ( Ωilxt_411 = -> g.data.hits          ), [ 'how', ]\n        @eq ( Ωilxt_412 = -> g.data.hits is hits  ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    grammar_cfg_reset_errors: ->\n      { Grammar } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        @eq ( Ωilxt_413 = -> ( new Grammar() ).cfg.reset_errors ), false\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { data: { count: 1, hits: ( -> [] ), }, reset_errors: false, }\n        gnd       = g.new_level { name: 'gnd', }\n        text      = gnd.new_token { name: 'text', fit: /[0-9]+/, }\n        hits      = g.data.hits\n        lexeme = g.scan_first 'helo'\n        @eq ( Ωilxt_414 = -> g.state.errors.length    ), 1\n        @eq ( Ωilxt_415 = -> g.has_errors             ), true\n        lexeme = g.scan_first 'how'\n        @eq ( Ωilxt_416 = -> g.state.errors.length    ), 2\n        @eq ( Ωilxt_417 = -> g.has_errors             ), true\n        lexeme = g.scan_first '753'\n        @eq ( Ωilxt_418 = -> g.state.errors.length    ), 2\n        @eq ( Ωilxt_419 = -> g.has_errors             ), true\n      # #.....................................................................................................\n      # do =>\n      #   g         = new Grammar { data: { count: 1, hits: ( -> [] ), }, reset_errors: true, }\n      #   gnd       = g.new_level { name: 'gnd', }\n      #   text      = gnd.new_token { name: 'text', fit: /[0-9]+/, }\n      #   hits      = g.data.hits\n      #   lexeme = g.scan_first 'helo'\n      #   @eq ( Ωilxt_420 = -> g.data.hits          ), [ 'helo', ]\n      #   lexeme = g.scan_first 'how'\n      #   @eq ( Ωilxt_421 = -> g.data.hits          ), [ 'how', ]\n      #   @eq ( Ωilxt_422 = -> g.data.hits is hits  ), false\n      #.....................................................................................................\n      return null\n\n    # #-------------------------------------------------------------------------------------------------------\n    # reset: ->\n    #   { Grammar } = require '../../../apps/interlex'\n    #   #.....................................................................................................\n    #   do =>\n    #     template  = { one: 1, list: [], set: new Set(), }\n    #     g         = new Grammar { data: template, }\n    #     @eq ( Ωilxt_423 = -> g.data                           ), template\n    #   #.....................................................................................................\n    #   return null\n\n    data_casting: ->\n    data_absorption: ->\n\n\n  # * **`[—]`** `Grammar::reset: ({ lnr: 1, data: null, }) ->`\n  # * **`[+]`** `reset_lnr: ( lnr = 1 ) ->`\n  # * **`[—]`** `reset_data: ( data = null ) ->`\n  # * **`[—]`** `grammar_cfg = { reset_on_scan: { lnr: 1, data: null }, }` (also `true`, `false`)\n  # * **`[—]`** `grammar_cfg = { absorb_data: false, }` (also `true`)\n\n\n  #=========================================================================================================\n  signals:\n\n    #-------------------------------------------------------------------------------------------------------\n    cfg_settings: ->\n      { Grammar } = require '../../../apps/interlex'\n      @eq ( Ωilxt_424 = -> ( new Grammar { emit_signals: false,         } ).cfg.emit_signals ), false\n      @eq ( Ωilxt_425 = -> ( new Grammar { emit_signals: true,          } ).cfg.emit_signals ), true\n      @eq ( Ωilxt_426 = -> ( new Grammar {}                               ).cfg.emit_signals ), true\n      @eq ( Ωilxt_427 = -> ( new Grammar()                                ).cfg.emit_signals ), true\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    lexeme_props: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, loop_errors: 'emit', }\n        level_one = g.new_level { name: 'level_one',  }\n        level_two = g.new_level { name: 'level_two',  }\n        #...................................................................................................\n        level_one.new_token { name: 'to_level_two', fit:  /(?=)/, jump: 'level_two', }\n        level_two.new_token { name: 'to_level_one', fit:  /|/,    jump: 'level_one', }\n        #...................................................................................................\n        extract_props = ( lexeme ) ->\n          return null unless lexeme?\n          return {\n            fqname:     lexeme.fqname\n            is_system:  lexeme.is_system\n            is_error:   lexeme.is_error\n            is_signal:  lexeme.is_signal\n            is_user:    lexeme.is_user    }\n        #...................................................................................................\n        source = \"doesn't matter\"\n        # info 'Ωilxt_428', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωilxt_429', source; g.reset_lnr(); echo extract_props lexeme for lexeme from g.scan source\n        info 'Ωilxt_430', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_431 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',          is_system: true,  is_error: false, is_signal: true,  is_user: false, }\n        @eq ( Ωilxt_432 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           is_system: true,  is_error: false, is_signal: true,  is_user: false, }\n        @eq ( Ωilxt_433 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: 'level_one.to_level_two', is_system: false, is_error: false, is_signal: false, is_user: true, }\n        @eq ( Ωilxt_434 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           is_system: true,  is_error: false, is_signal: true,  is_user: false, }\n        @eq ( Ωilxt_435 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: 'level_two.to_level_one', is_system: false, is_error: false, is_signal: false, is_user: true, }\n        @eq ( Ωilxt_436 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$error.loop',            is_system: true,  is_error: true,  is_signal: false, is_user: false, }\n        @eq ( Ωilxt_437 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           is_system: true,  is_error: false, is_signal: true,  is_user: false, }\n        @eq ( Ωilxt_438 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$error.earlystop',       is_system: true,  is_error: true,  is_signal: false, is_user: false, }\n        @eq ( Ωilxt_439 = -> extract_props tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',           is_system: true,  is_error: false, is_signal: true,  is_user: false, }\n        @eq ( Ωilxt_440 = -> extract_props tabulate_lexeme lexemes.next().value ), null\n        return null\n        #...................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    merge_jump_signals: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      ### fore jump carry, back jump sticky ###\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, }\n        gnd       = g.new_level { name: 'gnd',      }\n        number    = g.new_level { name: 'number',   }\n        #...................................................................................................\n        gnd.new_token     { name: 'letters',          fit:  /[a-zA-Z]+/,                      }\n        gnd.new_token     { name: 'before_digits',    fit:  /(?=[0-9])/,  jump: 'number!',    }\n        gnd.new_token     { name: 'ws',               fit:  /\\s+/,                            }\n        #...................................................................................................\n        number.new_token  { name: 'integer',          fit:  /[0-9]+/,                         }\n        number.new_token  { name: 'unit',             fit:  /[a-zA-Z]+/,     jump: '..',      }\n        #...................................................................................................\n        source = \"99kg23mm\"\n        info 'Ωilxt_441', source; tabulate_lexemes g.scan source\n        # info 'Ωilxt_442', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_443', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_444 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',        hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_445 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:0:0', data: { target: 'number' } }\n        @eq ( Ωilxt_446 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:0:0' }\n        @eq ( Ωilxt_447 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '99', pos: '1:0:2' }\n        @eq ( Ωilxt_448 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',          hit: 'kg', pos: '1:2:4' }\n        @eq ( Ωilxt_449 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:4:4', data: { target: 'number' } }\n        @eq ( Ωilxt_450 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.before_digits', hit: '',   pos: '1:4:4' }\n        @eq ( Ωilxt_451 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.integer',       hit: '23', pos: '1:4:6' }\n        @eq ( Ωilxt_452 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.unit',          hit: 'mm', pos: '1:6:8' }\n        @eq ( Ωilxt_453 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',         hit: '',   pos: '1:8:8', data: { target: null } }\n        @eq ( Ωilxt_454 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',         hit: '',   pos: '1:8:8' }\n        @eq ( Ωilxt_455 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n        #...................................................................................................\n      return null\n\n  #=========================================================================================================\n  infinite_loops:\n\n    #-------------------------------------------------------------------------------------------------------\n    zero_matches_with_jumps_as_exceptions: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, loop_errors: 'throw', }\n        level_one = g.new_level { name: 'level_one',  }\n        level_two = g.new_level { name: 'level_two',  }\n        #...................................................................................................\n        level_one.new_token { name: 'to_level_two', fit:  /(?=)/, jump: 'level_two', }\n        level_two.new_token { name: 'to_level_one', fit:  /|/,    jump: 'level_one', }\n        #...................................................................................................\n        source = \"doesn't matter\"\n        # info 'Ωilxt_456', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωilxt_457', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_458', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_459 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',          hit: '', pos: '1:0:0' }\n        @eq ( Ωilxt_460 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           hit: '', pos: '1:0:0', data: { target: 'level_one' } }\n        @eq ( Ωilxt_461 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'level_one.to_level_two', hit: '', pos: '1:0:0' }\n        @eq ( Ωilxt_462 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           hit: '', pos: '1:0:0', data: { target: 'level_two' } }\n        @eq ( Ωilxt_463 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'level_two.to_level_one', hit: '', pos: '1:0:0' }\n        @throws ( Ωilxt_464 = -> abbrlxm tabulate_lexeme lexemes.next().value ), /encountered loop/\n        return null\n        #...................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    zero_matches_with_jumps_as_error_signals: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, loop_errors: 'emit', }\n        level_one = g.new_level { name: 'level_one',  }\n        level_two = g.new_level { name: 'level_two',  }\n        #...................................................................................................\n        level_one.new_token { name: 'to_level_two', fit:  /(?=)/, jump: 'level_two', }\n        level_two.new_token { name: 'to_level_one', fit:  /|/,    jump: 'level_one', }\n        #...................................................................................................\n        source = \"doesn't matter\"\n        # info 'Ωilxt_465', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωilxt_466', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_467', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_468 = -> g.has_errors ), false\n        @eq ( Ωilxt_469 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',          hit: '',               pos: '1:0:0' }\n        @eq ( Ωilxt_470 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           hit: '',               pos: '1:0:0', data: { target: 'level_one' } }\n        @eq ( Ωilxt_471 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'level_one.to_level_two', hit: '',               pos: '1:0:0' }\n        @eq ( Ωilxt_472 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           hit: '',               pos: '1:0:0', data: { target: 'level_two' } }\n        @eq ( Ωilxt_473 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'level_two.to_level_one', hit: '',               pos: '1:0:0' }\n        @eq ( Ωilxt_474 = -> g.has_errors ), false\n        @eq ( Ωilxt_475 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$error.loop',            hit: '',               pos: '1:0:0', data: { message: \"encountered loop at position +0 (indicated by '⚠': '⚠doesn\\\\'t matter')\" } }\n        @eq ( Ωilxt_476 = -> g.has_errors ), true\n        @eq ( Ωilxt_477 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',           hit: '',               pos: '1:0:0', data: { target: null } }\n        @eq ( Ωilxt_478 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$error.earlystop',       hit: \"doesn't matter\", pos: '1:0:14', data: { message: 'expected stop at 14, got +0' } }\n        @eq ( Ωilxt_479 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',           hit: '',               pos: '1:0:0' }\n        @eq ( Ωilxt_480 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        @eq ( Ωilxt_481 = -> g.has_errors ), true\n        lexemes = g.scan source\n        abbrlxm lexemes.next().value\n        @eq ( Ωilxt_482 = -> g.has_errors ), true\n        return null\n        #...................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    has_errors: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      g         = new Grammar { name: 'g', reset_errors: true, emit_signals: true, loop_errors: 'emit', }\n      gnd       = g.new_level { name: 'gnd', }\n      @eq ( Ωilxt_483 = -> [ g.state.errors.length, g.has_errors, ] ), [ 0, false ]\n      #.....................................................................................................\n      g.state.errors.push null\n      g.state.errors.push null\n      @eq ( Ωilxt_484 = -> [ g.state.errors.length, g.has_errors, ] ), [ 2, true ]\n      lexemes = g.scan 'ghi'\n      @eq ( Ωilxt_485 = -> [ g.state.errors.length, g.has_errors, ] ), [ 2, true ]\n      @eq ( Ωilxt_486 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',    hit: '',    pos: '1:0:0' }\n      @eq ( Ωilxt_487 = -> [ g.state.errors.length, g.has_errors, ] ), [ 0, false ]\n      @eq ( Ωilxt_488 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',     hit: '',    pos: '1:0:0', data: { target: null } }\n      @eq ( Ωilxt_489 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$error.earlystop', hit: 'ghi', pos: '1:0:3', data: { message: 'expected stop at 3, got +0' } }\n      @eq ( Ωilxt_490 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',     hit: '',    pos: '1:0:0' }\n      @eq ( Ωilxt_491 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      @eq ( Ωilxt_492 = -> [ g.state.errors.length, g.has_errors, ] ), [ 1, true ]\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_throw_earlystop_errors: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      g         = new Grammar { name: 'g', reset_errors: true, emit_signals: true, loop_errors: 'emit', earlystop_errors: 'throw', }\n      gnd       = g.new_level { name: 'gnd', }\n      @eq ( Ωilxt_493 = -> [ g.state.errors.length, g.has_errors, ] ), [ 0, false ]\n      #.....................................................................................................\n      g.state.errors.push null\n      g.state.errors.push null\n      @eq ( Ωilxt_494 = -> [ g.state.errors.length, g.has_errors, ] ), [ 2, true ]\n      lexemes = g.scan 'ghi'\n      @eq ( Ωilxt_495 = -> [ g.state.errors.length, g.has_errors, ] ), [ 2, true ]\n      @eq ( Ωilxt_496 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',    hit: '',    pos: '1:0:0' }\n      @eq ( Ωilxt_497 = -> [ g.state.errors.length, g.has_errors, ] ), [ 0, false ]\n      @throws ( Ωilxt_498 = -> abbrlxm tabulate_lexeme lexemes.next().value ), /expected stop at 3/\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    ok_when_levels_back_to_back: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, }\n        text  = g.new_level { name: 'text', }\n        tag   = g.new_level { name: 'tag',  }\n        #...................................................................................................\n        text.new_token { name: 'pretag',    fit:  /(?=<)/,      jump: 'tag',  }\n        text.new_token { name: 'text',      fit:  /.+/,         jump: null,   }\n        tag.new_token  { name: 'tag',       fit:  /<[^>]*>+?/,  jump: 'text', }\n        #...................................................................................................\n        # source = \"<tag-a><tag-b><tag-c><tag-d>\"\n        # source = \"<tag-a><tag-b><tag-c>\"\n        source = \"<tag-a><tag-b>\"\n        # source = \"<tag-a>\"\n        # info 'Ωilxt_499', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωilxt_500', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_501', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_502 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start', hit: '',        pos: '1:0:0' }\n        @eq ( Ωilxt_503 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:0:0', data: { target: 'text' } }\n        @eq ( Ωilxt_504 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.pretag',   hit: '',        pos: '1:0:0' }\n        @eq ( Ωilxt_505 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:0:0', data: { target: 'tag' } }\n        @eq ( Ωilxt_506 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'tag.tag',       hit: '<tag-a>', pos: '1:0:7' }\n        @eq ( Ωilxt_507 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:7:7', data: { target: 'text' } }\n        @eq ( Ωilxt_508 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'text.pretag',   hit: '',        pos: '1:7:7' }\n        @eq ( Ωilxt_509 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:7:7', data: { target: 'tag' } }\n        @eq ( Ωilxt_510 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'tag.tag',       hit: '<tag-b>', pos: '1:7:14' }\n        @eq ( Ωilxt_511 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:14:14', data: { target: null } }\n        @eq ( Ωilxt_512 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',  hit: '',        pos: '1:14:14' }\n        @eq ( Ωilxt_513 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n        #...................................................................................................\n      return null\n\n  #=========================================================================================================\n  ghost_tokens:\n\n    #-------------------------------------------------------------------------------------------------------\n    ok_when_levels_back_to_back: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      do =>\n        g         = new Grammar { name: 'g', emit_signals: true, }\n        text  = g.new_level { name: 'text', }\n        tag   = g.new_level { name: 'tag',  }\n        #...................................................................................................\n        text.new_token { name: 'pretag',    fit:  /(?=<)/,      jump: 'tag',  emit: false, }\n        text.new_token { name: 'text',      fit:  /[^<]+/,      jump: null,   }\n        tag.new_token  { name: 'tag',       fit:  /<[^>]*>+?/,  jump: '..', }\n        #...................................................................................................\n        # source = \"<tag-a><tag-b><tag-c><tag-d>\"\n        # source = \"<tag-a><tag-b><tag-c>\"\n        # source = \"<tag-a>c<tag-b>\"\n        # source = \"<tag-a>\"\n        # source = \"text1<tag-a>text2<tag-b>text3\"\n        source = \"<tag-a><tag-b>\"\n        info 'Ωilxt_514', source; g.reset_lnr(); tabulate_lexemes g.scan source\n        # info 'Ωilxt_515', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n        info 'Ωilxt_516', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_517 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start', hit: '',        pos: '1:0:0' }\n        @eq ( Ωilxt_518 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:0:0', data: { target: 'tag' } }\n        @eq ( Ωilxt_519 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'tag.tag',       hit: '<tag-a>', pos: '1:0:7' }\n        @eq ( Ωilxt_520 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:7:7', data: { target: 'tag' } }\n        @eq ( Ωilxt_521 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'tag.tag',       hit: '<tag-b>', pos: '1:7:14' }\n        @eq ( Ωilxt_522 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',  hit: '',        pos: '1:14:14', data: { target: null } }\n        @eq ( Ωilxt_523 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',  hit: '',        pos: '1:14:14' }\n        @eq ( Ωilxt_524 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n        #...................................................................................................\n      return null\n\n  #=========================================================================================================\n  user_errors:\n\n    #-------------------------------------------------------------------------------------------------------\n    user_error_declared_on_level: ->\n      { Grammar\n        rx\n        internals } = require '../../../apps/interlex'\n      #=====================================================================================================\n      cast = ({ hit, start, source, new_lexeme, lexeme, }) ->\n        unless hit is 'c'\n          yield lexeme\n          return null\n        yield new_lexeme 'error.nolikedis', start, source, { letter: hit, }\n        return null\n      #.....................................................................................................\n      g         = new Grammar { name: 'g', emit_signals: true, }\n      gnd       = g.new_level { name: 'gnd', cast, }\n      error     = g.new_level { name: 'error', }\n      #.....................................................................................................\n      name1 = gnd.new_token { name: 'name1',           fit: rx\"(?<initial>[A-Z])\", merge: true, }\n      name2 = gnd.new_token { name: 'name2',           fit: rx\"(?<lower>[a-z])\",   merge: true, }\n      error.new_token       { name: 'nolikedis',       fit: rx\".\",                 merge: true, }\n      #.....................................................................................................\n      @eq ( Ωilxt_525 = -> g.cast               ), null\n      @eq ( Ωilxt_526 = -> g.cast_method        ), null\n      @eq ( Ωilxt_527 = -> gnd.cast is cast     ), true\n      @eq ( Ωilxt_528 = -> gnd.cast_method      ), 'walk'\n      @eq ( Ωilxt_529 = -> error.cast           ), null\n      @eq ( Ωilxt_530 = -> error.cast_method    ), null\n      @eq ( Ωilxt_531 = -> name2.cast           ), null\n      @eq ( Ωilxt_532 = -> name2.cast_method    ), null\n      #.....................................................................................................\n      source = \"Acceptreject\"\n      # info 'Ωilxt_533', source; tabulate_lexemes g.scan source\n      # info 'Ωilxt_534', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n      info 'Ωilxt_535', source; g.reset_lnr(); lexemes = g.scan source\n      @eq ( Ωilxt_536 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',   hit: '', pos: '1:0:0' }\n      @eq ( Ωilxt_537 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:0:0', data: { target: 'gnd' } }\n      @eq ( Ωilxt_538 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name1',       hit: 'A', pos: '1:0:1', data: { initial: [ 'A' ] } }\n      @eq ( Ωilxt_539 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:1:1', data: { target: 'error' } }\n      @eq ( Ωilxt_540 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'error.nolikedis', hit: 'cc', pos: '1:1:3', data: { letter: [ 'c', 'c' ] } }\n      @eq ( Ωilxt_541 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:3:3', data: { target: 'gnd' } }\n      @eq ( Ωilxt_542 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name2',       hit: 'eptreje', pos: '1:3:10', data: { lower: [ 'e', 'p', 't', 'r', 'e', 'j', 'e' ] } }\n      @eq ( Ωilxt_543 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:10:10', data: { target: 'error' } }\n      @eq ( Ωilxt_544 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'error.nolikedis', hit: 'c', pos: '1:10:11', data: { letter: [ 'c' ] } }\n      @eq ( Ωilxt_545 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:11:11', data: { target: 'gnd' } }\n      @eq ( Ωilxt_546 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name2',       hit: 't', pos: '1:11:12', data: { lower: [ 't' ] } }\n      @eq ( Ωilxt_547 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:12:12', data: { target: null } }\n      @eq ( Ωilxt_548 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',    hit: '', pos: '1:12:12' }\n      @eq ( Ωilxt_549 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    user_error_declared_on_grammar: ->\n      { Grammar\n        rx\n        internals } = require '../../../apps/interlex'\n      #=====================================================================================================\n      cast = ({ hit, start, source, new_lexeme, lexeme, }) ->\n        unless hit is 'c'\n          yield lexeme\n          return null\n        yield new_lexeme 'error.nolikedis', start, source, { letter: hit, }\n        return null\n      #.....................................................................................................\n      g         = new Grammar { name: 'g', emit_signals: true, cast, }\n      gnd       = g.new_level { name: 'gnd', }\n      error     = g.new_level { name: 'error', }\n      #.....................................................................................................\n      name1 = gnd.new_token { name: 'name1',           fit: rx\"(?<initial>[A-Z])\", merge: true, }\n      name2 = gnd.new_token { name: 'name2',           fit: rx\"(?<lower>[a-z])\",   merge: true, }\n      error.new_token       { name: 'nolikedis',       fit: rx\".\",                 merge: true, }\n      #.....................................................................................................\n      @eq ( Ωilxt_550 = -> g.cast is cast       ), true\n      @eq ( Ωilxt_551 = -> g.cast_method        ), 'walk'\n      @eq ( Ωilxt_552 = -> gnd.cast             ), null\n      @eq ( Ωilxt_553 = -> gnd.cast_method      ), null\n      @eq ( Ωilxt_554 = -> error.cast           ), null\n      @eq ( Ωilxt_555 = -> error.cast_method    ), null\n      @eq ( Ωilxt_556 = -> name2.cast           ), null\n      @eq ( Ωilxt_557 = -> name2.cast_method    ), null\n      #.....................................................................................................\n      source = \"Acceptreject\"\n      # info 'Ωilxt_558', source; tabulate_lexemes g.scan source\n      # info 'Ωilxt_559', source; g.reset_lnr(); echo abbrlxm lexeme for lexeme from g.scan source\n      info 'Ωilxt_560', source; g.reset_lnr(); lexemes = g.scan source\n      @eq ( Ωilxt_561 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',   hit: '', pos: '1:0:0' }\n      @eq ( Ωilxt_562 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:0:0', data: { target: 'gnd' } }\n      @eq ( Ωilxt_563 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name1',       hit: 'A', pos: '1:0:1', data: { initial: [ 'A' ] } }\n      @eq ( Ωilxt_564 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:1:1', data: { target: 'error' } }\n      @eq ( Ωilxt_565 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'error.nolikedis', hit: 'cc', pos: '1:1:3', data: { letter: [ 'c', 'c' ] } }\n      @eq ( Ωilxt_566 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:3:3', data: { target: 'gnd' } }\n      @eq ( Ωilxt_567 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name2',       hit: 'eptreje', pos: '1:3:10', data: { lower: [ 'e', 'p', 't', 'r', 'e', 'j', 'e' ] } }\n      @eq ( Ωilxt_568 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:10:10', data: { target: 'error' } }\n      @eq ( Ωilxt_569 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'error.nolikedis', hit: 'c', pos: '1:10:11', data: { letter: [ 'c' ] } }\n      @eq ( Ωilxt_570 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:11:11', data: { target: 'gnd' } }\n      @eq ( Ωilxt_571 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name2',       hit: 't', pos: '1:11:12', data: { lower: [ 't' ] } }\n      @eq ( Ωilxt_572 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '', pos: '1:12:12', data: { target: null } }\n      @eq ( Ωilxt_573 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',    hit: '', pos: '1:12:12' }\n      @eq ( Ωilxt_574 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    demo_nr_1: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'g', }\n      gnd       = g.new_level { name: 'gnd', }\n      #.....................................................................................................\n      gnd.new_token       { name: 'name',           fit: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         fit: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'paren_start',    fit: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     fit: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          fit: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             fit: rx\"\\s+\",                     }\n      #.....................................................................................................\n      source = \"Alice in Cairo 1912 (approximately)\"\n      # info 'Ωilxt_575', source; tabulate_lexemes g.scan source\n      info 'Ωilxt_576', source; g.reset_lnr(); lexemes = g.scan source\n      @eq ( Ωilxt_577 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',   hit: '',              pos: '1:0:0' }\n      @eq ( Ωilxt_578 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '',              pos: '1:0:0', data: { target: 'gnd' } }\n      @eq ( Ωilxt_579 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',        hit: 'Alice',         pos: '1:0:5', data: { initial: 'A', }, }\n      @eq ( Ωilxt_580 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:5:6' }\n      @eq ( Ωilxt_581 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.other',       hit: 'in',            pos: '1:6:8' }\n      @eq ( Ωilxt_582 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:8:9' }\n      @eq ( Ωilxt_583 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',        hit: 'Cairo',         pos: '1:9:14', data: { initial: 'C', } }\n      @eq ( Ωilxt_584 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:14:15' }\n      @eq ( Ωilxt_585 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number',      hit: '1912',          pos: '1:15:19' }\n      @eq ( Ωilxt_586 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',          hit: ' ',             pos: '1:19:20' }\n      @eq ( Ωilxt_587 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.paren_start', hit: '(',             pos: '1:20:21' }\n      @eq ( Ωilxt_588 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.other',       hit: 'approximately', pos: '1:21:34' }\n      @eq ( Ωilxt_589 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.paren_stop',  hit: ')',             pos: '1:34:35' }\n      @eq ( Ωilxt_590 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',    hit: '',              pos: '1:35:35', data: { target: null } }\n      @eq ( Ωilxt_ACCEPT_591 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',    hit: '',              pos: '1:35:35', }\n      @eq ( Ωilxt_592 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    demo_nr_2: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'faulty', }\n      gnd       = g.new_level { name: 'gnd', }\n      string11  = g.new_level { name: 'string11', }\n      #.....................................................................................................\n      gnd.new_token       { name: 'name',           fit: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         fit: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'string11_start', fit: rx\"(?!<\\\\)'\",                jump: 'string11', }\n      gnd.new_token       { name: 'paren_start',    fit: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     fit: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          fit: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             fit: rx\"\\s+\",                     }\n      #.....................................................................................................\n      # string11.new_token  { name: 'string11_stop',  fit: rx\"(?!<\\\\)'\",                jump: '..!', }\n      string11.new_token  { name: 'text',           fit: rx\"[^']+\",                   }\n      #.....................................................................................................\n      source = \"Alice in Cairo 1912 'approximately'\"\n      # info 'Ωilxt_593', source; tabulate_lexemes g.scan source\n      info 'Ωilxt_594', source; g.reset_lnr(); lexemes = g.scan source\n      @eq ( Ωilxt_595 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.start',      hit: '',       pos: '1:0:0' }\n      @eq ( Ωilxt_596 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',       hit: '',       pos: '1:0:0', data: { target: 'gnd' } }\n      @eq ( Ωilxt_597 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',           hit: 'Alice',  pos: '1:0:5', data: { initial: 'A', }, }\n      @eq ( Ωilxt_598 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:5:6' }\n      @eq ( Ωilxt_599 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.other',          hit: 'in',     pos: '1:6:8' }\n      @eq ( Ωilxt_600 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:8:9' }\n      @eq ( Ωilxt_601 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.name',           hit: 'Cairo',  pos: '1:9:14', data: { initial: 'C', }, }\n      @eq ( Ωilxt_602 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:14:15' }\n      @eq ( Ωilxt_603 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number',         hit: '1912',   pos: '1:15:19' }\n      @eq ( Ωilxt_604 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.ws',             hit: ' ',      pos: '1:19:20' }\n      @eq ( Ωilxt_605 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.string11_start', hit: \"'\",      pos: '1:20:21' }\n      @eq ( Ωilxt_606 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',       hit: '',       pos: '1:21:21', data: { target: 'string11' } }\n      @eq ( Ωilxt_607 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'string11.text',      hit: 'approximately', pos: '1:21:34' }\n      @eq ( Ωilxt_608 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.jump',       hit: '',       pos: '1:34:34', data: { target: null } }\n      @eq ( Ωilxt_609 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$error.earlystop',   hit: \"'\",      pos: '1:34:35', data: { message: 'expected stop at 35, got 34' } }\n      @eq ( Ωilxt_610 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$signal.stop',       hit: '',       pos: '1:34:34', }\n      @eq ( Ωilxt_611 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    demo_nr_3: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #=====================================================================================================\n      g         = new Grammar { name: 'faulty', emit_signals: false, }\n      gnd       = g.new_level { name: 'gnd', }\n      number    = g.new_level { name: 'number', }\n      #.....................................................................................................\n      gnd.new_token       { name: 'text',           fit: rx.i\"\\\\[0-9]|[a-z\\s]+\",                  }\n      gnd.new_token       { name: 'number_start',   fit: rx\"(?=(?!<\\\\)[0-9])\",    jump: 'number', }\n      number.new_token    { name: 'number',         fit: rx\"[0-9]+\",                              }\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 on Charon 3\"\n        # info 'Ωilxt_612', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_613', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_614 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'R',           pos: '1:0:1' }\n        @eq ( Ωilxt_615 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:1:3' }\n        @eq ( Ωilxt_616 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'D',           pos: '1:3:4' }\n        @eq ( Ωilxt_617 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:4:6' }\n        @eq ( Ωilxt_618 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: ' on Charon ', pos: '1:6:17' }\n        @eq ( Ωilxt_619 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number_start', hit: '',            pos: '1:17:17' }\n        @eq ( Ωilxt_620 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number',    hit: '3',           pos: '1:17:18' }\n        @eq ( Ωilxt_621 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      #.....................................................................................................\n      do =>\n        source = \"R\\\\2D\\\\2 on Charon 3!!\"\n        # echo abbrlxm lxm for lxm from g.scan source\n        # info 'Ωilxt_622', source; tabulate_lexemes g.scan source\n        info 'Ωilxt_623', source; g.reset_lnr(); lexemes = g.scan source\n        @eq ( Ωilxt_624 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'R',           pos: '1:0:1' }\n        @eq ( Ωilxt_625 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:1:3' }\n        @eq ( Ωilxt_626 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: 'D',           pos: '1:3:4' }\n        @eq ( Ωilxt_627 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: '\\\\2',         pos: '1:4:6' }\n        @eq ( Ωilxt_628 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.text',         hit: ' on Charon ', pos: '1:6:17' }\n        @eq ( Ωilxt_629 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'gnd.number_start', hit: '',            pos: '1:17:17' }\n        @eq ( Ωilxt_630 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: 'number.number',    hit: '3',           pos: '1:17:18' }\n        @eq ( Ωilxt_631 = -> abbrlxm tabulate_lexeme lexemes.next().value ), { fqname: '$error.earlystop', hit: '!!',          pos: '1:18:20', data: { message: 'expected stop at 20, got 18' } }\n        @eq ( Ωilxt_632 = -> abbrlxm tabulate_lexeme lexemes.next().value ), null\n        return null\n      return null\n\n  #=========================================================================================================\n  cfg_settings:\n\n    #-------------------------------------------------------------------------------------------------------\n    grammar: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #.........................................................................................................\n      do =>\n        g = new Grammar()\n        @eq ( Ωilxt_633 = -> g.cfg.name           ), 'g'\n        @eq ( Ωilxt_634 = -> g.cfg.strategy       ), 'first'\n        @eq ( Ωilxt_635 = -> g.cfg.emit_signals   ), true\n        return null\n      #.........................................................................................................\n      do =>\n        g = new Grammar { emit_signals: false, }\n        @eq ( Ωilxt_636 = -> g.cfg.name           ), 'g'\n        @eq ( Ωilxt_637 = -> g.cfg.strategy       ), 'first'\n        @eq ( Ωilxt_638 = -> g.cfg.emit_signals   ), false\n        return null\n      #.........................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true, show_passes: false, report_checks: false, }\n  # guytest_cfg = { throw_on_error: false, show_passes: false, report_checks: false, }\n  # guytest_cfg = { throw_on_error: false, show_passes: true, report_checks: true, }\n  ( new Test guytest_cfg ).test @interlex_tasks\n  # ( new Test guytest_cfg ).test { ghost_tokens: @interlex_tasks.ghost_tokens, }\n  # ( new Test guytest_cfg ).test { signals: @interlex_tasks.signals, }\n  ( new Test guytest_cfg ).test { user_errors: @interlex_tasks.user_errors, }\n  # ( new Test guytest_cfg ).test { zero_matches_with_jumps_as_error_signals: @interlex_tasks.infinite_loops.zero_matches_with_jumps_as_error_signals, }\n  # ( new Test guytest_cfg ).test { cfg_settings: @interlex_tasks.cfg_settings, }\n  # ( new Test guytest_cfg ).test { numbering: @interlex_tasks.basics.numbering, }\n  # ( new Test guytest_cfg ).test { stack: @interlex_tasks.stack, }\n\n"
  ]
}