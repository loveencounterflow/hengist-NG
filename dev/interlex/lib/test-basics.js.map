{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n#===========================================================================================================\ndemo = ->\n  ILX         = require '../../../apps/interlex'\n  { Grammar\n    rx      } = ILX\n  #===========================================================================================================\n  show_jump = ( jump_literal ) ->\n    if ( match = jump_literal.match ILX._jump_literal_re  )?\n      for key, value of match.groups\n        continue unless value?\n        info 'Ω__10', ( rpr jump_literal ), ( GUY.trm.grey key ), ( rpr value )\n    else\n      info 'Ω__11', ( rpr jump_literal ), null\n    return null\n  show_jump 'abc'\n  show_jump '[abc['\n  show_jump '[abc'\n  show_jump 'abc['\n  show_jump '[string11'\n  show_jump 'string11['\n  show_jump 'abc]'\n  show_jump ']abc'\n  show_jump '.]'\n  show_jump '].'\n  #===========================================================================================================\n  g         = new Grammar { name: 'g', }\n  gnd       = g.new_level { name: 'gnd', }\n  string11  = g.new_level { name: 'string11', }\n  string12  = g.new_level { name: 'string12', }\n  #.........................................................................................................\n  gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n  gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n  gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11[', }\n  gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12[', }\n  gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n  gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n  gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n  gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n  #.........................................................................................................\n  string11.new_token  { name: 'string11_stop',  matcher: rx\"'\",                       jump: '].', }\n  string11.new_token  { name: 'text',           matcher: rx\"[^']*\",                   }\n  #.........................................................................................................\n  debug 'Ω__12', g\n  debug 'Ω__13', g.levels\n  debug 'Ω__14', g.levels.gnd\n  debug 'Ω__15', g.levels.gnd.tokens\n  debug 'Ω__16', gnd\n  debug 'Ω__17', token for token from gnd\n  #.........................................................................................................\n  texts = [\n    \"Alice in Cairo 1912 (approximately)\"\n    \"Alice in Cairo 1912 'approximately'\"\n    ]\n  #.........................................................................................................\n  for text in texts\n    g.tokenize text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo()\n"
  ]
}