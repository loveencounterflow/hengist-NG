{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  internals:\n\n    #-------------------------------------------------------------------------------------------------------\n    jsid_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { _jsid_re } = require '../../../apps/interlex'\n      debug 'Ωilxt___1', _jsid_re\n      @eq ( Ωilxt___2 = -> ( 'abc'.match _jsid_re    )? ), true\n      @eq ( Ωilxt___3 = -> ( '$abc'.match _jsid_re   )? ), true\n      @eq ( Ωilxt___4 = -> ( '_abc$'.match _jsid_re  )? ), true\n      @eq ( Ωilxt___5 = -> ( '_abc3'.match _jsid_re  )? ), true\n      @eq ( Ωilxt___6 = -> ( '3_abc'.match _jsid_re  )? ), false\n      @eq ( Ωilxt___7 = -> ( '&%'.match _jsid_re     )? ), false\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    jump_spec_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { _jump_spec_re } = require '../../../apps/interlex'\n      debug 'Ωilxt___8', _jump_spec_re\n      #.....................................................................................................\n      @eq ( Ωilxt___9 = -> ( 'abc'.match _jump_spec_re     )? ), true\n      @eq ( Ωilxt__10 = -> ( '$abc'.match _jump_spec_re    )? ), true\n      @eq ( Ωilxt__11 = -> ( '_abc$'.match _jump_spec_re   )? ), true\n      @eq ( Ωilxt__12 = -> ( '_abc3'.match _jump_spec_re   )? ), true\n      @eq ( Ωilxt__13 = -> ( '..'.match _jump_spec_re      )? ), true\n      #.....................................................................................................\n      @eq ( Ωilxt__14 = -> ( 'abc'.match _jump_spec_re     ).groups ), { back: undefined, fore: 'abc' }\n      @eq ( Ωilxt__15 = -> ( '$abc'.match _jump_spec_re    ).groups ), { back: undefined, fore: '$abc' }\n      @eq ( Ωilxt__16 = -> ( '_abc$'.match _jump_spec_re   ).groups ), { back: undefined, fore: '_abc$' }\n      @eq ( Ωilxt__17 = -> ( '_abc3'.match _jump_spec_re   ).groups ), { back: undefined, fore: '_abc3' }\n      @eq ( Ωilxt__18 = -> ( '..'.match _jump_spec_re      ).groups ), { back: '..', fore: undefined }\n      #.....................................................................................................\n      @eq ( Ωilxt__19 = -> ( '[abc'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__20 = -> ( 'abc['.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__21 = -> ( ']abc'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__22 = -> ( 'abc]'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__23 = -> ( '3_abc'.match _jump_spec_re   )? ), false\n      @eq ( Ωilxt__24 = -> ( '&%'.match _jump_spec_re      )? ), false\n      @eq ( Ωilxt__25 = -> ( '.'.match _jump_spec_re       )? ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_jump: ->\n      { Grammar\n        Level\n        Token\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt__26 = -> Token._parse_jump 'somewhere'  ), { action: 'fore', target: 'somewhere', }\n      @eq ( Ωilxt__27 = -> Token._parse_jump '..'         ), { action: 'back', target: null, }\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    regexes: ->\n      { rx\n        new_regex_tag\n        internals       } = require '../../../apps/interlex'\n      { slevithan_regex } = internals\n      { regex           } = slevithan_regex\n      #===========================================================================================================\n      @eq ( Ωilxt__28 = -> rpr regex'..'                                      ), '/../v'\n      @eq ( Ωilxt__29 = -> rpr rx'..'                                         ), '/../dvy'\n      @eq ( Ωilxt__30 = -> ( ( new_regex_tag 'dy'   )'..' ).flags             ), 'dvy'\n      @eq ( Ωilxt__31 = -> ( ( new_regex_tag 'dy'   )'..' ).flags             ), 'dvy'\n      #.....................................................................................................\n      @eq ( Ωilxt__32 = -> ( ( new_regex_tag 'd'    )'..' ).flags             ), 'dvy'\n      @eq ( Ωilxt__33 = -> ( ( new_regex_tag 'y'    )'..' ).flags             ), 'dvy'\n      # @eq ( Ωilxt__34 = -> ( ( new_regex_tag 'dvy'  )'..' ).flags             ), 'dvy'\n      # @eq ( Ωilxt__35 = -> ( ( new_regex_tag 'dv'   )'..' ).flags             ), 'dvy'\n      # @eq ( Ωilxt__36 = -> ( ( new_regex_tag 'v'    )'..' ).flags             ), 'dvy'\n      # @eq ( Ωilxt__37 = -> ( ( new_regex_tag 'x'   )'..' ).flags              ), 'dvy'\n      # @eq ( Ωilxt__38 = -> ( ( new_regex_tag 'n'   )'..' ).flags              ), 'dvy'\n      @throws ( Ωilxt__39 = -> ( ( new_regex_tag 'duy' )'..' ).flags          ), /———————————/\n      @throws ( Ωilxt__40 = -> ( ( new_regex_tag 'u'   )'..' ).flags          ), /———————————/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    regexes_new_implementation: ->\n      { rx\n        new_regex_tag\n        internals       } = require '../../../apps/interlex'\n      { slevithan_regex } = internals\n      { regex           } = slevithan_regex\n      #=====================================================================================================\n      internals                 =\n        regex_flags_re:           /^(?!.*(.).*\\1)[dgimsuvy]*$/\n        mandatory_flags_txt:      'dy'\n        forbidden_flags_re:       /[uv]/g\n        #---------------------------------------------------------------------------------------------------------\n        normalize_flags: ( flags = '' ) ->\n          ### Given a RegExp flags text, sets `d`, `y`, removes `u`, `v`, and returns sorted text with unique\n          flags. ###\n          unless ( typeof flags )\n            throw new Error \"Ωilx__41 expected a text, got #{rpr flags}\"\n          unless internals.regex_flags_re.test flags\n            throw new Error \"Ωilx__42 illegal or duplicate flags in #{rpr flags}\"\n          flags   = flags.replace internals.forbidden_flags_re, ''\n          flags  += internals.mandatory_flags_txt\n          return [ ( new Set flags)..., ].sort().join ''\n        #---------------------------------------------------------------------------------------------------------\n        copy_regex: ( regex, new_flags ) ->\n          flags = new Set regex.flags\n          for new_flag from new_flags\n            switch true\n              when _regex_flag_lower_re.test new_flag then flags.add    new_flag\n              when _regex_flag_upper_re.test new_flag then flags.delete new_flag.toLowerCase()\n              else throw new Error \"Ωilx___1 invalid regex flag #{rpr new_flag} in #{rpr new_flags}\"\n          return new RegExp regex.source, [ flags..., ].join ''\n      #-----------------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__43 = -> internals.normalize_flags()                ), 'dy'\n      @eq ( Ωilxt__44 = -> internals.normalize_flags ''               ), 'dy'\n      @eq ( Ωilxt__45 = -> internals.normalize_flags 'd'              ), 'dy'\n      @eq ( Ωilxt__46 = -> internals.normalize_flags 'y'              ), 'dy'\n      @eq ( Ωilxt__47 = -> internals.normalize_flags 'dy'             ), 'dy'\n      @eq ( Ωilxt__48 = -> internals.normalize_flags 'yd'             ), 'dy'\n      #-----------------------------------------------------------------------------------------------------------\n      @eq ( Ωilxt__49 = -> internals.normalize_flags 'i'              ), 'diy'\n      @eq ( Ωilxt__50 = -> internals.normalize_flags 'g'              ), 'dgy'\n      @eq ( Ωilxt__51 = -> internals.normalize_flags 'm'              ), 'dmy'\n      @eq ( Ωilxt__52 = -> internals.normalize_flags 's'              ), 'dsy'\n      @eq ( Ωilxt__53 = -> internals.normalize_flags 'dgimsuvy'       ), 'dgimsy'\n      #-----------------------------------------------------------------------------------------------------------\n      @throws ( Ωilxt__54 = -> internals.normalize_flags 'a'          ), /illegal or duplicate flags/\n      @throws ( Ωilxt__55 = -> internals.normalize_flags 'yy'         ), /illegal or duplicate flags/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_1: ->\n      ILX                 = require '../../../apps/interlex'\n      { Grammar\n        Level\n        Token\n        Lexeme\n        rx\n        internals       } = ILX\n      { slevithan_regex } = internals\n      #===========================================================================================================\n      g                 = new Grammar { name: 'g', }\n      gnd               = g.new_level { name: 'gnd', }\n      number_tk_matcher = rx\"[0-9]+\\P{Letter}\"\n      number_tk         = gnd.new_token { name: 'number', matcher: number_tk_matcher, }\n      number_lx         = null\n      #.....................................................................................................\n      @eq ( Ωilxt__69 = -> g.start_level instanceof Level                                 ), true\n      @eq ( Ωilxt__70 = -> g.start_level                                                  ), gnd\n      @eq ( Ωilxt__71 = -> g.start_level_name                                             ), 'gnd'\n      @eq ( Ωilxt__72 = -> g.name                                                         ), 'g'\n      @eq ( Ωilxt__73 = -> g.levels instanceof Object                                     ), true\n      @eq ( Ωilxt__74 = -> g.levels.gnd                                                   ), gnd\n      #.....................................................................................................\n      @eq ( Ωilxt__75 = -> gnd instanceof Level                                           ), true\n      @eq ( Ωilxt__76 = -> gnd.name                                                       ), 'gnd'\n      @eq ( Ωilxt__77 = -> gnd.grammar                                                    ), g\n      @eq ( Ωilxt__78 = -> gnd.tokens instanceof Array                                    ), true\n      @eq ( Ωilxt__79 = -> gnd.tokens.length                                              ), 1\n      @eq ( Ωilxt__80 = -> gnd.tokens[ 0 ]                                                ), number_tk\n      #.....................................................................................................\n      @eq ( Ωilxt__81 = -> number_tk instanceof Token                                     ), true\n      @eq ( Ωilxt__82 = -> number_tk.name                                                 ), 'number'\n      @eq ( Ωilxt__83 = -> number_tk.level                                                ), gnd\n      @eq ( Ωilxt__84 = -> number_tk.grammar                                              ), g\n      @eq ( Ωilxt__85 = -> rpr number_tk.matcher                                          ), '/[0-9]+/dvy'\n      @eq ( Ωilxt__86 = -> number_tk.matcher.hasIndices                                   ), true\n      @eq ( Ωilxt__87 = -> number_tk.matcher.sticky                                       ), true\n      @eq ( Ωilxt__88 = -> number_tk.matcher.unicodeSets                                  ), true\n      @eq ( Ωilxt__89 = -> number_tk.jump                                                 ), null\n      @eq ( Ωilxt__90 = -> number_tk.jump_spec                                            ), null\n      #.....................................................................................................\n      @eq ( Ωilxt__91 = -> ( number_lx = number_tk.match_at 0, '398ä' )?                  ), true\n      @eq ( Ωilxt__92 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt__93 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt__94 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt__95 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt__96 = -> number_lx.hit                                                  ), '398'\n      @eq ( Ωilxt__97 = -> number_lx.start                                                ), 0\n      @eq ( Ωilxt__98 = -> number_lx.stop                                                 ), 3\n      #.....................................................................................................\n      @eq ( Ωilxt__99 = -> ( number_lx = number_tk.match_at 7, 'abcdefgh00102xyz' )?      ), false\n      @eq ( Ωilxt_100 = -> ( number_lx = number_tk.match_at 8, 'abcdefgh00102xyz' )?      ), true\n      @eq ( Ωilxt_101 = -> number_lx instanceof Lexeme                                    ), true\n      @eq ( Ωilxt_102 = -> number_lx.name                                                 ), 'number'\n      @eq ( Ωilxt_103 = -> number_lx.fqname                                               ), 'gnd.number'\n      @eq ( Ωilxt_104 = -> number_lx.level                                                ), gnd\n      @eq ( Ωilxt_105 = -> number_lx.hit                                                  ), '00102'\n      @eq ( Ωilxt_106 = -> number_lx.start                                                ), 8\n      @eq ( Ωilxt_107 = -> number_lx.stop                                                 ), 13\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    new_regex_tag: ->\n      { rx\n        regex\n        new_regex_tag } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt_108 = -> typeof   new_regex_tag 'dy'                                  ), 'function'\n      @eq ( Ωilxt_109 = -> ( (      new_regex_tag 'dyis'  )\"[a-z]\" ) instanceof RegExp  ), true\n      @eq ( Ωilxt_110 = -> rpr (    new_regex_tag 'dyis'  )\"[a-z]\"                      ), '/[a-z]/disvy'\n      @eq ( Ωilxt_111 = -> typeof ( new_regex_tag 'dy'    ).si                          ), 'function'\n      @eq ( Ωilxt_112 = -> rpr (    new_regex_tag 'dy'    ).si\"[a-z]\"                   ), '/[a-z]/disvy'\n      @eq ( Ωilxt_113 = -> rpr (    new_regex_tag 'dys'   ).si\"[a-z]\"                   ), '/[a-z]/disvy'\n      @eq ( Ωilxt_114 = -> rpr (    new_regex_tag 'dys'   ).i\"[a-z]\"                    ), '/[a-z]/disvy'\n      @eq ( Ωilxt_115 = -> rpr (    new_regex_tag 'dysi'  )\"[a-z]\"                      ), '/[a-z]/disvy'\n      @eq ( Ωilxt_116 = -> rpr (    new_regex_tag 'v'     ).si\"[a-z]\"                   ), '/[a-z]/disvy'\n      @throws ( Ωilxt_117 = -> (    new_regex_tag 'dy'    ).ab\"[a-z]\"                   ), /invalid flags/\n      @throws ( Ωilxt_118 = -> (    new_regex_tag 'dyab'  )\"[a-z]\"                      ), /invalid flags/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    copy_regex: ->\n      { _copy_regex } = require '../../../apps/interlex'\n      @eq ( Ωilxt_119 = -> typeof _copy_regex                                         ), 'function'\n      @eq ( Ωilxt_120 = -> ( _copy_regex /[a-z]/i, 'I'          ) instanceof RegExp   ), true\n      @eq ( Ωilxt_121 = -> ( _copy_regex /[a-z]/i, 'I'          ).source              ), '[a-z]'\n      @eq ( Ωilxt_122 = -> ( _copy_regex /[a-z]/i, 'I'          ).flags               ), ''\n      @eq ( Ωilxt_123 = -> ( _copy_regex /[a-z]/i, 'Ig'         ).flags               ), 'g'\n      @eq ( Ωilxt_124 = -> ( _copy_regex /[a-z]/i, 'IgV'        ).flags               ), 'g'\n      @eq ( Ωilxt_125 = -> ( _copy_regex /[a-z]/i, 'gv'         ).flags               ), 'giv'\n      @eq ( Ωilxt_126 = -> ( _copy_regex /[a-z]/i, 'gu'         ).flags               ), 'giu'\n      @eq ( Ωilxt_127 = -> ( _copy_regex /[a-z]/igvys, 'SYVGI'  ).flags               ), ''\n      @throws ( Ωilxt_128 = -> _copy_regex /[a-z]/i, 'guv'      ), /Invalid flags supplied to RegExp constructor/\n      @throws ( Ωilxt_129 = -> _copy_regex /[a-z]/u, 'v'        ), /Invalid flags supplied to RegExp constructor/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    rx_flags: ->\n      { rx } = require '../../../apps/interlex'\n      @eq ( Ωilxt_130 = -> ( rx\"x\"        ).flags ), 'dvy'\n      @eq ( Ωilxt_131 = -> ( rx.si\"x\"     ).flags ), 'disvy'\n      # @eq ( Ωilxt_132 = -> ( rx.sidvy\"x\"  ).flags ), 'disvy'\n      @eq ( Ωilxt_133 = -> ( rx.y\"x\"      ).flags ), 'dvy'\n      @eq ( Ωilxt_134 = -> rpr rx\"[abc]+\" ), '/[abc]+/dvy'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    numbering: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        rx      } = ILX\n      #=====================================================================================================\n      new_grammar = ( cfg ) ->\n        g         = new Grammar { name: 'g', cfg..., }\n        gnd       = g.new_level { name: 'gnd', }\n        #.....................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n        gnd.new_token       { name: 'text',           matcher: rx\"[^a-zA-Z0-9\\s]+\",         }\n        #.....................................................................................................\n        return g\n      #.....................................................................................................\n      do =>\n        g = new_grammar()\n        @eq ( Ωilxt_135 = -> g.cfg.counter_name   ), 'line_nr'\n        @eq ( Ωilxt_136 = -> g.cfg.counter_step   ), +1\n        @eq ( Ωilxt_137 = -> g.cfg.counter_value  ), 1\n        @eq ( Ωilxt_138 = -> g.state.count        ), 1\n        probes_and_matchers = [\n          [ \"1st line\",           1, ]\n          [ \"2nd line\",           2, ]\n          [ \"3rd line\",           3, ]\n          [ \"4th line (and EOF)\", 4, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt_139', rpr probe\n          lexemes = g.get_lexemes probe\n          urge 'Ωilxt_140', lexemes\n          @eq ( Ωilxt_141 = -> lexemes[ 0 ].line_nr ), matcher\n        return null\n      #.....................................................................................................\n      do =>\n        g = new_grammar { counter_name: 'test_id', counter_step: -1, counter_value: 10, }\n        @eq ( Ωilxt_142 = -> g.cfg.counter_name   ), 'test_id'\n        @eq ( Ωilxt_143 = -> g.cfg.counter_step   ), -1\n        @eq ( Ωilxt_144 = -> g.cfg.counter_value  ), 10\n        @eq ( Ωilxt_145 = -> g.state.count        ), 10\n        probes_and_matchers = [\n          [ \"1st line\",           10, ]\n          [ \"2nd line\",           9, ]\n          [ \"3rd line\",           8, ]\n          [ \"4th line (and EOF)\", 7, ] ]\n        #...................................................................................................\n        for [ probe, matcher, ] from probes_and_matchers\n          info 'Ωilxt_146', rpr probe\n          lexemes = g.get_lexemes probe\n          # urge 'Ωilxt_147', lexemes\n          urge 'Ωilxt_148', g\n          urge 'Ωilxt_149', g.cfg\n          urge 'Ωilxt_150', g.state\n          @eq ( Ωilxt_151 = -> lexemes[ 0 ].test_id ), matcher\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_use_plain_regexes: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #-----------------------------------------------------------------------------------------------------\n      condense_lexemes = ( lexemes ) ->\n        ( \"#{lexeme.fqname}#{rpr lexeme.hit}\" for lexeme from lexemes ).join '|'\n      #-----------------------------------------------------------------------------------------------------\n      probes_and_matchers = [\n        [ \"1st line\",           { length: 3, condensed: \"gnd.ordinal'1st'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"2nd line\",           { length: 3, condensed: \"gnd.ordinal'2nd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"3rd line\",           { length: 3, condensed: \"gnd.ordinal'3rd'|gnd.ws' '|gnd.word'line'\", }, ]\n        [ \"4th line (and EOF)\", { length: 9, condensed: \"gnd.ordinal'4th'|gnd.ws' '|gnd.word'line'|gnd.ws' '|gnd.other'('|gnd.word'and'|gnd.ws' '|gnd.word'EOF'|gnd.other')'\", }, ] ]\n      #-----------------------------------------------------------------------------------------------------\n      test = ( g ) =>\n        for [ probe, matcher, ] from probes_and_matchers\n          g.reset_count()\n          lexemes = g.get_lexemes probe\n          @eq ( Ωilxt_152 = -> condense_lexemes lexemes ), matcher.condensed\n          @eq ( Ωilxt_153 = -> lexemes.length ), matcher.length\n          g.reset_count()\n          @eq ( Ωilxt_154 = -> [ ( g.walk_lexemes probe )..., ] ), lexemes\n        return null\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]+\",           }\n        gnd.new_token       { name: 'ordinal',        matcher: rx\"(?<ordinal>[0-9]+)(st|nd|rd|th)\",   }\n        gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                            }\n        gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                               }\n        gnd.new_token       { name: 'word',           matcher: rx.i\"[a-z]+\",                          }\n        gnd.new_token       { name: 'other',          matcher: rx.i\"[^a-z0-9\\s]+\",                    }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/dvy,            }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/dvy,  }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/dvy,                             }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/dvy,                                }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/divy,                            }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/divy,                      }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/,               }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/,     }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #-----------------------------------------------------------------------------------------------------\n      do =>\n        g         = new Grammar { name: 'g', }\n        gnd       = g.new_level { name: 'gnd', }\n        #...................................................................................................\n        gnd.new_token       { name: 'name',           matcher: /(?<initial>[A-Z])[a-z]+/v,              }\n        gnd.new_token       { name: 'ordinal',        matcher: /(?<ordinal>[0-9]+)(?:st|nd|rd|th)/u,    }\n        gnd.new_token       { name: 'number',         matcher: /[0-9]+/,                                }\n        gnd.new_token       { name: 'ws',             matcher: /\\s+/,                                   }\n        gnd.new_token       { name: 'word',           matcher: /[a-z]+/i,                               }\n        gnd.new_token       { name: 'other',          matcher: /[^a-z0-9\\s]+/i,                         }\n        #...................................................................................................\n        test g\n      #.....................................................................................................\n      return null\n\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    demo: ->\n      { Grammar\n        rx      } = require '../../../apps/interlex'\n      #===========================================================================================================\n      g         = new Grammar { name: 'g', }\n      gnd       = g.new_level { name: 'gnd', }\n      string11  = g.new_level { name: 'string11', }\n      string12  = g.new_level { name: 'string12', }\n      # debug 'Ωilxt_155', [ string11, string12, ]\n      # console.debug 'Ωilxt_156', [ string11, string12, ]\n      # process.exit 111\n      #.........................................................................................................\n      gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11', }\n      gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12', }\n      gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n      #.........................................................................................................\n      string11.new_token  { name: 'string11_stop',  matcher: rx\"(?!<\\\\)'\",                jump: '..', }\n      string11.new_token  { name: 'text',           matcher: rx\"[^']*\",                   }\n      #.........................................................................................................\n      debug 'Ωilxt_157', g\n      debug 'Ωilxt_158', g.levels\n      debug 'Ωilxt_159', g.levels.gnd\n      debug 'Ωilxt_160', g.levels.gnd.tokens\n      debug 'Ωilxt_161', gnd\n      debug 'Ωilxt_162', token for token from gnd\n      #.........................................................................................................\n      show_lexeme = ( lexeme ) ->\n        { name\n          fqname\n          start\n          stop\n          hit\n          jump\n          jump_spec\n          groups  } = lexeme\n        groups_rpr  = if groups?  then ( rpr { groups..., } ) else ''\n        jump_rpr    = jump_spec ? ''\n        urge 'Ωilxt_163', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{fqname}:<20c; #{rpr hit}:<30c; #{jump_rpr}:<15c; #{groups_rpr}\"\n      #.........................................................................................................\n      sources = [\n        \"Alice in Cairo 1912 (approximately)\"\n        \"Alice in Cairo 1912 'approximately'\"\n        ]\n      #.........................................................................................................\n      for source from sources\n        info 'Ωilxt_164', rpr source\n        for lexeme from g.walk_lexemes source\n          show_lexeme lexeme\n      #.........................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # ( new Test { throw_on_error: true, } ).test @interlex_tasks\n  # ( new Test { throw_on_error: false, } ).test @interlex_tasks\n  # ( new Test { throw_on_error: true, } ).test { regexes: @interlex_tasks.basics.regexes, }\n  ( new Test { throw_on_error: true, } ).test { regexes_new_implementation: @interlex_tasks.basics.regexes_new_implementation, }\n  # ( new Test { throw_on_error: true, } ).test { can_use_plain_regexes: @interlex_tasks.basics.can_use_plain_regexes, }\n  # ( new Test { throw_on_error: true, } ).test { demo: @interlex_tasks.demo.demo, }\n  # demo()\n  # demo_jsidentifier()\n  do =>\n  f = ->\n    help 'Ωilxt_165', Array.from 'a🈯z'\n    help 'Ωilxt_166', 'a🈯z'.split /(.)/u\n    help 'Ωilxt_167', 'a🈯z'.split( /(.)/v )\n    help 'Ωilxt_168', 'a🈯z'.split( /(.)/d )\n    help 'Ωilxt_169', match = 'a🈯z'.match /^(?<head>[a-z]+)(?<other>[^a-z]+)(?<tail>[a-z]+)/d\n    help 'Ωilxt_170', { match.groups..., }\n    help 'Ωilxt_171', { match.indices.groups..., }\n    # help 'Ωilxt_172', rx\".\"\n    # help 'Ωilxt_173', rx/./\n\n\n"
  ]
}