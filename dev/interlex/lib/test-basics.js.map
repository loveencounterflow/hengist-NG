{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'interlex/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@interlex_tasks =\n\n  #=========================================================================================================\n  internals:\n\n    #-------------------------------------------------------------------------------------------------------\n    jsid_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { _jsid_re } = require '../../../apps/interlex'\n      debug 'Ωilxt___1', _jsid_re\n      @eq ( Ωilxt___2 = -> ( 'abc'.match _jsid_re    )? ), true\n      @eq ( Ωilxt___3 = -> ( '$abc'.match _jsid_re   )? ), true\n      @eq ( Ωilxt___4 = -> ( '_abc$'.match _jsid_re  )? ), true\n      @eq ( Ωilxt___5 = -> ( '_abc3'.match _jsid_re  )? ), true\n      @eq ( Ωilxt___6 = -> ( '3_abc'.match _jsid_re  )? ), false\n      @eq ( Ωilxt___7 = -> ( '&%'.match _jsid_re     )? ), false\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    jump_spec_re: ->\n      # { partial, regex, }       = require '../../../apps/interlex/node_modules/regex'\n      # _jsid_re = regex\"\"\" ^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $ \"\"\"\n      { _jump_spec_re } = require '../../../apps/interlex'\n      debug 'Ωilxt___8', _jump_spec_re\n      #.....................................................................................................\n      @eq ( Ωilxt___9 = -> ( 'abc'.match _jump_spec_re     )? ), true\n      @eq ( Ωilxt__10 = -> ( '$abc'.match _jump_spec_re    )? ), true\n      @eq ( Ωilxt__11 = -> ( '_abc$'.match _jump_spec_re   )? ), true\n      @eq ( Ωilxt__12 = -> ( '_abc3'.match _jump_spec_re   )? ), true\n      @eq ( Ωilxt__13 = -> ( '..'.match _jump_spec_re      )? ), true\n      #.....................................................................................................\n      @eq ( Ωilxt__14 = -> ( 'abc'.match _jump_spec_re     ).groups ), { back: undefined, fore: 'abc' }\n      @eq ( Ωilxt__15 = -> ( '$abc'.match _jump_spec_re    ).groups ), { back: undefined, fore: '$abc' }\n      @eq ( Ωilxt__16 = -> ( '_abc$'.match _jump_spec_re   ).groups ), { back: undefined, fore: '_abc$' }\n      @eq ( Ωilxt__17 = -> ( '_abc3'.match _jump_spec_re   ).groups ), { back: undefined, fore: '_abc3' }\n      @eq ( Ωilxt__18 = -> ( '..'.match _jump_spec_re      ).groups ), { back: '..', fore: undefined }\n      #.....................................................................................................\n      @eq ( Ωilxt__19 = -> ( '[abc'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__20 = -> ( 'abc['.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__21 = -> ( ']abc'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__22 = -> ( 'abc]'.match _jump_spec_re    )? ), false\n      @eq ( Ωilxt__23 = -> ( '3_abc'.match _jump_spec_re   )? ), false\n      @eq ( Ωilxt__24 = -> ( '&%'.match _jump_spec_re      )? ), false\n      @eq ( Ωilxt__25 = -> ( '.'.match _jump_spec_re       )? ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_jump: ->\n      { Grammar\n        Level\n        Token\n        rx      } = require '../../../apps/interlex'\n      #.....................................................................................................\n      @eq ( Ωilxt__26 = -> Token._parse_jump 'somewhere'  ), { action: 'fore', target: 'somewhere', }\n      @eq ( Ωilxt__27 = -> Token._parse_jump '..'         ), { action: 'back', target: null, }\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    simple_1: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        Level\n        Token\n        Lexeme\n        rx      } = ILX\n      #===========================================================================================================\n      g                 = new Grammar { name: 'g', }\n      gnd               = g.new_level { name: 'gnd', }\n      number_tk_matcher = rx\"[0-9]+\"\n      number_tk         = gnd.new_token { name: 'number', matcher: number_tk_matcher, }\n      number_lx         = null\n      #.....................................................................................................\n      @eq ( Ωilxt__28 = -> g.start instanceof Level                                      ), true\n      @eq ( Ωilxt__29 = -> g.start                                                       ), gnd\n      @eq ( Ωilxt__30 = -> g.start_name                                                  ), 'gnd'\n      @eq ( Ωilxt__31 = -> g.name                                                        ), 'g'\n      @eq ( Ωilxt__32 = -> g.levels instanceof Object                                    ), true\n      @eq ( Ωilxt__33 = -> g.levels.gnd                                                  ), gnd\n      #.....................................................................................................\n      @eq ( Ωilxt__34 = -> gnd instanceof Level                                          ), true\n      @eq ( Ωilxt__35 = -> gnd.name                                                      ), 'gnd'\n      @eq ( Ωilxt__36 = -> gnd.grammar                                                   ), g\n      @eq ( Ωilxt__37 = -> gnd.tokens instanceof Array                                   ), true\n      @eq ( Ωilxt__38 = -> gnd.tokens.length                                             ), 1\n      @eq ( Ωilxt__39 = -> gnd.tokens[ 0 ]                                               ), number_tk\n      #.....................................................................................................\n      @eq ( Ωilxt__40 = -> number_tk instanceof Token                                    ), true\n      @eq ( Ωilxt__41 = -> number_tk.name                                                ), 'number'\n      @eq ( Ωilxt__42 = -> number_tk.level                                               ), gnd\n      @eq ( Ωilxt__43 = -> number_tk.grammar                                             ), g\n      @eq ( Ωilxt__44 = -> number_tk.matcher is number_tk_matcher                        ), true\n      @eq ( Ωilxt__45 = -> number_tk.jump                                                ), null\n      @eq ( Ωilxt__46 = -> number_tk.jump_spec                                           ), null\n      #.....................................................................................................\n      @eq ( Ωilxt__47 = -> ( number_lx = number_tk.match_at 0, '398' )?                  ), true\n      @eq ( Ωilxt__48 = -> number_lx instanceof Lexeme                                   ), true\n      @eq ( Ωilxt__49 = -> number_lx.name                                                ), 'number'\n      @eq ( Ωilxt__50 = -> number_lx.fqname                                              ), 'gnd.number'\n      @eq ( Ωilxt__51 = -> number_lx.level                                               ), gnd\n      @eq ( Ωilxt__52 = -> number_lx.hit                                                 ), '398'\n      @eq ( Ωilxt__53 = -> number_lx.start                                               ), 0\n      @eq ( Ωilxt__54 = -> number_lx.stop                                                ), 3\n      #.....................................................................................................\n      @eq ( Ωilxt__55 = -> ( number_lx = number_tk.match_at 7, 'abcdefgh00102xyz' )?     ), false\n      @eq ( Ωilxt__56 = -> ( number_lx = number_tk.match_at 8, 'abcdefgh00102xyz' )?     ), true\n      @eq ( Ωilxt__57 = -> number_lx instanceof Lexeme                                   ), true\n      @eq ( Ωilxt__58 = -> number_lx.name                                                ), 'number'\n      @eq ( Ωilxt__59 = -> number_lx.fqname                                              ), 'gnd.number'\n      @eq ( Ωilxt__60 = -> number_lx.level                                               ), gnd\n      @eq ( Ωilxt__61 = -> number_lx.hit                                                 ), '00102'\n      @eq ( Ωilxt__62 = -> number_lx.start                                               ), 8\n      @eq ( Ωilxt__63 = -> number_lx.stop                                                ), 13\n      #.....................................................................................................\n      return null\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    demo: ->\n      ILX         = require '../../../apps/interlex'\n      { Grammar\n        rx      } = ILX\n      #===========================================================================================================\n      g         = new Grammar { name: 'g', }\n      gnd       = g.new_level { name: 'gnd', }\n      string11  = g.new_level { name: 'string11', }\n      string12  = g.new_level { name: 'string12', }\n      # debug 'Ωilxt__64', [ string11, string12, ]\n      # console.debug 'Ωilxt__65', [ string11, string12, ]\n      # process.exit 111\n      #.........................................................................................................\n      gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n      gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n      gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11', }\n      gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12', }\n      gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n      gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n      gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n      gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n      #.........................................................................................................\n      string11.new_token  { name: 'string11_stop',  matcher: rx\"(?!<\\\\)'\",                jump: '..', }\n      string11.new_token  { name: 'text',           matcher: rx\"[^']*\",                   }\n      #.........................................................................................................\n      debug 'Ωilxt__66', g\n      debug 'Ωilxt__67', g.levels\n      debug 'Ωilxt__68', g.levels.gnd\n      debug 'Ωilxt__69', g.levels.gnd.tokens\n      debug 'Ωilxt__70', gnd\n      debug 'Ωilxt__71', token for token from gnd\n      #.........................................................................................................\n      show_lexeme = ( lexeme ) ->\n        { name\n          fqname\n          start\n          stop\n          hit\n          jump\n          jump_spec\n          groups  } = lexeme\n        groups_rpr  = if groups?  then ( rpr { groups..., } ) else ''\n        jump_rpr    = jump_spec ? ''\n        urge 'Ωilxt__72', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{fqname}:<20c; #{rpr hit}:<30c; #{jump_rpr}:<15c; #{groups_rpr}\"\n      #.........................................................................................................\n      sources = [\n        \"Alice in Cairo 1912 (approximately)\"\n        \"Alice in Cairo 1912 'approximately'\"\n        ]\n      #.........................................................................................................\n      for source from sources\n        info 'Ωilxt__73', rpr source\n        for lexeme from g.walk_tokens source\n          show_lexeme lexeme\n      #.........................................................................................................\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @interlex_tasks\n  # demo()\n  # demo_jsidentifier()\n\n\n"
  ]
}