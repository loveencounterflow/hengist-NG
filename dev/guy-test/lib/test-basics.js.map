{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#===========================================================================================================\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n{ after }                 = GUY.async\n#-----------------------------------------------------------------------------------------------------------\nGTNG                      = require '../../../apps/guy-test-NG'\n{ _TMP_test\n  Test                  } = GTNG\n  # equals\n  # pass\n  # fail\n  # test\n  # eq\n  # throws\n  # async_test\n  # async_eq\n  # async_throws          } = GTNG\n#-----------------------------------------------------------------------------------------------------------\ntypes                     = require '../../../apps/intertype'\n{ $type_of: type_of, }    = types\n# isa\n# type_of\n# $isa\n\n\n#===========================================================================================================\n@TT =\n\n  #=========================================================================================================\n  Interface:\n\n    #-------------------------------------------------------------------------------------------------------\n    module_instance_and_assumptions_have_equals_method: ->\n      @eq ( Ωmodule___1       = -> type_of GTNG.equals            ), 'function'\n      @eq ( Ωinstance___2     = -> type_of ( new Test() ).equals  ), 'function'\n      @eq ( Ωassumptions___3  = -> type_of @equals                ), 'function'\n      return null\n\n    # #-------------------------------------------------------------------------------------------------------\n    # can_use_names_to_select_tests_and_checks:\n    #   #.....................................................................................................\n    #   fff_1: ->\n    #     mytest = new Test()\n    #     tasks =\n    #       t1: ->\n    #         @eq ( mytest_check_1 = -> @equals 1, 1 ), true\n    #         @eq ( mytest_check_2 = -> @equals 2, 2 ), true\n    #         @eq ( mytest_check_3 = -> @equals 3, 3 ), true\n    #     mytest.test tasks\n    #     @eq ( Ω___4 = -> mytest.stats[ 't1.mytest_check_1' ].passes ), 1\n    #     @eq ( Ω___5 = -> mytest.stats[ 't1.mytest_check_2' ].passes ), 1\n    #     @eq ( Ω___6 = -> mytest.stats[ 't1.mytest_check_3' ].passes ), 1\n    #     return null\n    #   #.....................................................................................................\n    #   fff_2: ->\n    #     mytest = new Test()\n    #     tasks =\n    #       t1: ->\n    #         @eq ( mytest_check_1 = -> @equals 1, 1 ), true\n    #         @eq ( mytest_check_2 = -> @equals 2, 2 ), true\n    #         @eq ( mytest_check_3 = -> @equals 3, 3 ), true\n    #     mytest.add tasks\n    #     mytest.select '*.mytest_check_2'\n    #     mytest.deselect '*.mytest_check_2'\n    #     mytest.test()\n    #     @eq ( Ω___7 = -> mytest.stats[ 't1.mytest_check_1' ].passes ), undefined\n    #     @eq ( Ω___8 = -> mytest.stats[ 't1.mytest_check_2' ].passes ), 1\n    #     @eq ( Ω___9 = -> mytest.stats[ 't1.mytest_check_3' ].passes ), undefined\n    #     return null\n\n  #=========================================================================================================\n  Equality:\n\n    #-------------------------------------------------------------------------------------------------------\n    basics: ->\n      @eq ( Ω__10  = -> @equals 1.23456, 1.23456                                 ), true\n      @eq ( Ω__11  = -> @equals 1.23456000000000000001, 1.23456000000000000002   ), true\n      @eq ( Ω__12  = -> @equals 1.23456, 1.23457                                 ), false\n      @eq ( Ω__13  = -> @equals '1.23456', '1.23457'                             ), false\n      @eq ( Ω__14  = -> @equals '1.23457', '1.23457'                             ), true\n      @eq ( Ω__15  = -> @equals {}, {}                                           ), true\n      @eq ( Ω__16  = -> @equals { lst: [ 7, 8, 9, ]}, { lst: [ 7, 8, 9, ], }     ), true\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    eq_works_correctly_with_zero: ->\n      do =>\n        tt = new Test { signed_zero: false, }\n        tt.eq ( qwcwz_1 = -> +0     ), +0\n        tt.eq ( qwcwz_2 = -> +0     ), -0\n        tt.eq ( qwcwz_3 = -> -0     ), +0\n        tt.eq ( qwcwz_4 = -> -0     ), -0\n        tt.eq ( qwcwz_5 = -> 0      ), 1 #\n        tt.eq ( qwcwz_6 = -> 1      ), 1\n        tt.eq ( qwcwz_7 = -> 2      ), 1    # ok\n        tt.eq ( qwcwz_8 = -> 3      ), 1    # ok\n        tt.eq ( qwcwz_9 = -> 0      ), 123 #\n        tt.eq ( qwcwz_10 = -> 0     ), Infinity #\n        tt.eq ( qwcwz_11 = -> 0     ), 'anything' #\n        tt.eq ( qwcwz_12 = -> 1     ), 123  # ok\n        tt.eq ( qwcwz_13 = -> 2     ), 123  # ok\n        tt.eq ( qwcwz_14 = -> 3     ), 123  # ok\n        @eq ( Ω__17 = -> tt.stats.qwcwz_1 ), { passes: 1, fails: 0, }\n        @eq ( Ω__18 = -> tt.stats.qwcwz_2 ), { passes: 1, fails: 0, }\n        @eq ( Ω__19 = -> tt.stats.qwcwz_3 ), { passes: 1, fails: 0, }\n        @eq ( Ω__20 = -> tt.stats.qwcwz_4 ), { passes: 1, fails: 0, }\n        @eq ( Ω__21 = -> tt.stats.qwcwz_5 ), { passes: 0, fails: 1, }\n        @eq ( Ω__22 = -> tt.stats.qwcwz_6 ), { passes: 1, fails: 0, }\n        @eq ( Ω__23 = -> tt.stats.qwcwz_7 ), { passes: 0, fails: 1, }\n        @eq ( Ω__24 = -> tt.stats.qwcwz_8 ), { passes: 0, fails: 1, }\n        @eq ( Ω__25 = -> tt.stats.qwcwz_9 ), { passes: 0, fails: 1, }\n        @eq ( Ω__26 = -> tt.stats.qwcwz_10 ), { passes: 0, fails: 1, }\n        @eq ( Ω__27 = -> tt.stats.qwcwz_11 ), { passes: 0, fails: 1, }\n        @eq ( Ω__28 = -> tt.stats.qwcwz_12 ), { passes: 0, fails: 1, }\n        @eq ( Ω__29 = -> tt.stats.qwcwz_13 ), { passes: 0, fails: 1, }\n        @eq ( Ω__30 = -> tt.stats.qwcwz_14 ), { passes: 0, fails: 1, }\n        return null\n      #.....................................................................................................\n      do =>\n        tt = new Test { signed_zero: true, }\n        tt.eq ( qwcwz_1 = -> +0     ), +0\n        tt.eq ( qwcwz_2 = -> +0     ), -0\n        tt.eq ( qwcwz_3 = -> -0     ), +0\n        tt.eq ( qwcwz_4 = -> -0     ), -0\n        tt.eq ( qwcwz_5 = -> 0      ), 1 #\n        tt.eq ( qwcwz_6 = -> 1      ), 1\n        tt.eq ( qwcwz_7 = -> 2      ), 1    # ok\n        tt.eq ( qwcwz_8 = -> 3      ), 1    # ok\n        tt.eq ( qwcwz_9 = -> 0      ), 123 #\n        tt.eq ( qwcwz_10 = -> 0     ), Infinity #\n        tt.eq ( qwcwz_11 = -> 0     ), 'anything' #\n        tt.eq ( qwcwz_12 = -> 1     ), 123  # ok\n        tt.eq ( qwcwz_13 = -> 2     ), 123  # ok\n        tt.eq ( qwcwz_14 = -> 3     ), 123  # ok\n        @eq ( Ω__31 = -> tt.stats.qwcwz_1 ), { passes: 1, fails: 0, }\n        @eq ( Ω__32 = -> tt.stats.qwcwz_2 ), { passes: 0, fails: 1, }\n        @eq ( Ω__33 = -> tt.stats.qwcwz_3 ), { passes: 0, fails: 1, }\n        @eq ( Ω__34 = -> tt.stats.qwcwz_4 ), { passes: 1, fails: 0, }\n        @eq ( Ω__35 = -> tt.stats.qwcwz_5 ), { passes: 0, fails: 1, }\n        @eq ( Ω__36 = -> tt.stats.qwcwz_6 ), { passes: 1, fails: 0, }\n        @eq ( Ω__37 = -> tt.stats.qwcwz_7 ), { passes: 0, fails: 1, }\n        @eq ( Ω__38 = -> tt.stats.qwcwz_8 ), { passes: 0, fails: 1, }\n        @eq ( Ω__39 = -> tt.stats.qwcwz_9 ), { passes: 0, fails: 1, }\n        @eq ( Ω__40 = -> tt.stats.qwcwz_10 ), { passes: 0, fails: 1, }\n        @eq ( Ω__41 = -> tt.stats.qwcwz_11 ), { passes: 0, fails: 1, }\n        @eq ( Ω__42 = -> tt.stats.qwcwz_12 ), { passes: 0, fails: 1, }\n        @eq ( Ω__43 = -> tt.stats.qwcwz_13 ), { passes: 0, fails: 1, }\n        @eq ( Ω__44 = -> tt.stats.qwcwz_14 ), { passes: 0, fails: 1, }\n        return null\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    set_equality_by_value: ->\n      #.....................................................................................................\n      do =>\n        @eq ( Ω__45 = -> 'abc'                    ), 'abc'\n        return null\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_sets: false, ordered_maps: false, }\n        result    = [ 1, [ 2 ], ]\n        matcher1  = [ 1, [ 2 ], ]\n        matcher2  = [ 1, [ 3 ], ]\n        @eq ( Ω__46 = -> t2.equals result, matcher1 ), true\n        @eq ( Ω__47 = -> t2.equals result, matcher2 ), false\n        return null\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_sets: false, ordered_maps: false, }\n        result    = new Set [ 1, 2, ]\n        matcher1  = new Set [ 1, 2, ]\n        matcher2  = new Set [ 1, 3, ]\n        @eq ( Ω__48 = -> t2.equals result, matcher1 ), true\n        @eq ( Ω__49 = -> t2.equals result, matcher2 ), false ### !!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n        return null\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_sets: false, ordered_maps: false, }\n        result    = new Set [ 1, [ 2 ], ]\n        matcher1  = new Set [ 1, [ 2 ], ]\n        matcher2  = new Set [ 1, [ 3 ], ]\n        @eq ( Ω__50 = -> t2.equals result, matcher1 ), true\n        @eq ( Ω__51 = -> t2.equals result, matcher2 ), false ### !!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    map_equality_by_value: ->\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_sets: false, ordered_maps: false, }\n        { _types  } = require '../../../apps/guy-test-NG'\n        result      = new Map [ [ 'a', [ 1, 2, ], ], [ 'b', [ 1, 2, ], ], ]\n        matcher1    = new Map [ [ 'a', [ 1, 2, ], ], [ 'b', [ 1, 2, ], ], ]\n        matcher2    = new Map [ [ 'a', [ 1, 3, ], ], [ 'b', [ 1, 3, ], ], ]\n        @eq ( Ωmeqbv__52 = -> _types.type_of result     ), 'map'\n        @eq ( Ωmeqbv__53 = -> t2.equals result, matcher1  ), true\n        @eq ( Ωmeqbv__54 = -> t2.equals result, matcher2  ), false ### !!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    maps_and_sets_as_properties: ->\n      #.....................................................................................................\n      do =>\n        t2 = new Test()\n        result      = { mylist: ( Array.from 'abc' ), }\n        matcher     = { mylist: ( Array.from 'abc' ), }\n        @eq ( Ωmeqbv__55 = -> t2.equals result, matcher ), true\n        return null\n      #.....................................................................................................\n      do =>\n        t2 = new Test()\n        result      = { myset: ( new Set 'abc' ), }\n        matcher     = { myset: ( new Set 'abc' ), }\n        @eq ( Ωmeqbv__56 = -> t2.equals result, matcher ), true\n        return null\n      #.....................................................................................................\n      do =>\n        t2 = new Test()\n        result      = { mymap: ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ), }\n        matcher     = { mymap: ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ), }\n        @eq ( Ωmeqbv__57 = -> t2.equals result, matcher ), true\n        return null\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_configure_eq_of_plusminus_zero: ->\n      #.....................................................................................................\n      do =>\n        t2 = new Test { signed_zero: false, }\n        @eq ( Ω__58 = -> t2.equals +0, +0 ), true\n        @eq ( Ω__59 = -> t2.equals -0, -0 ), true\n        @eq ( Ω__60 = -> t2.equals +0, -0 ), true\n        @eq ( Ω__61 = -> t2.equals -0, +0 ), true\n      #.....................................................................................................\n      do =>\n        t2 = new Test { signed_zero: true, }\n        @eq ( Ω__62 = -> t2.equals +0, +0 ), true\n        @eq ( Ω__63 = -> t2.equals -0, -0 ), true\n        @eq ( Ω__64 = -> t2.equals +0, -0 ), false\n        @eq ( Ω__65 = -> t2.equals -0, +0 ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_configure_ordered_objects: ->\n      a = 123\n      b = 456\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_objects: false, }\n        @eq ( Ω__66 = -> t2.equals { a, b, }, { a, b, } ), true\n        @eq ( Ω__67 = -> t2.equals { a, b, }, { b, a, } ), true\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_objects: true, }\n        @eq ( Ω__68 = -> t2.equals { a, b, }, { a, b, } ), true\n        @eq ( Ω__69 = -> t2.equals { a, b, }, { b, a, } ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_configure_ordered_sets: ->\n      a = 123\n      b = 456\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_sets: false, }\n        @eq ( Ω__70 = -> t2.equals ( new Set 'ab' ), ( new Set 'ab' ) ), true\n        @eq ( Ω__71 = -> t2.equals ( new Set 'ab' ), ( new Set 'ba' ) ), true\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_sets: true, }\n        @eq ( Ω__72 = -> t2.equals ( new Set 'ab' ), ( new Set 'ab' ) ), true\n        @eq ( Ω__73 = -> t2.equals ( new Set 'ab' ), ( new Set 'ba' ) ), false\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_configure_ordered_maps: ->\n      a = 123\n      b = 456\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_maps: false, }\n        @eq ( Ω__74 = -> t2.equals ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ), ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ) ), true\n        @eq ( Ω__75 = -> t2.equals ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ), ( new Map [ [ 'b', 2, ], [ 'a', 1, ], ] ) ), true\n      #.....................................................................................................\n      do =>\n        t2 = new Test { ordered_maps: true, }\n        @eq ( Ω__76 = -> t2.equals ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ), ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ) ), true\n        @eq ( Ω__77 = -> t2.equals ( new Map [ [ 'a', 1, ], [ 'b', 2, ], ] ), ( new Map [ [ 'b', 2, ], [ 'a', 1, ], ] ) ), false\n      #.....................................................................................................\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  pass_and_fail: ->\n    t2 = new Test()\n    #.......................................................................................................\n    @eq ( Ω__78 = -> type_of t2.pass ), 'function'\n    @eq ( Ω__79 = -> type_of t2.fail ), 'function'\n    tasks =\n      paf_a: ->\n        @pass 'paf_1', \"this is good\"\n        @fail 'paf_2', \"this is bad\"\n        @pass 'paf_3'\n        @fail 'paf_4'\n    t2.test tasks\n    t2.report { prefix: \"TEST RESULT\", }\n    @eq ( Ω__80 = -> t2.stats[ '*'           ].passes  ), 2\n    @eq ( Ω__81 = -> t2.stats[ 'paf_a.paf_1' ].passes  ), 1\n    @eq ( Ω__82 = -> t2.stats[ 'paf_a.paf_2' ].passes  ), 0\n    @eq ( Ω__83 = -> t2.stats[ 'paf_a.paf_3' ].passes  ), 1\n    @eq ( Ω__84 = -> t2.stats[ 'paf_a.paf_4' ].passes  ), 0\n    @eq ( Ω__85 = -> t2.stats[ '*'           ].fails   ), 2\n    @eq ( Ω__86 = -> t2.stats[ 'paf_a.paf_1' ].fails   ), 0\n    @eq ( Ω__87 = -> t2.stats[ 'paf_a.paf_2' ].fails   ), 1\n    @eq ( Ω__88 = -> t2.stats[ 'paf_a.paf_3' ].fails   ), 0\n    @eq ( Ω__89 = -> t2.stats[ 'paf_a.paf_4' ].fails   ), 1\n    #.......................................................................................................\n    done?()\n\n  #---------------------------------------------------------------------------------------------------------\n  asynchronous_throws: ->\n    FS = require 'node:fs/promises'\n    t2 = new Test()\n    #.......................................................................................................\n    fetch_filesize = ( path ) -> ( await FS.stat path ).size\n    #.......................................................................................................\n    # await async_throws  T, ( Ω__90 = -> await fetch_filesize __filename   )\n    # await async_throws  T, ( Ω__91 = -> await fetch_filesize __filename   ), \"foobar\"\n    # await async_throws  T, ( Ω__92 = -> await fetch_filesize __filename   ), /no such file/\n    #.......................................................................................................\n    await t2.async_throws ( Ω__93 = -> await fetch_filesize 'nosuchpath' ), \"foobar\"\n    await t2.async_throws ( Ω__94 = -> await fetch_filesize 'nosuchpath' ), /no such file/\n    await t2.async_throws ( Ω__95 = -> await fetch_filesize 'nosuchpath' )\n    # await do =>\n    #   await async_throws ( Ω__96 = ->\n    #     await t2.async_throws ( Ω__97 = -> await fetch_filesize 'nosuchpath' ), \"foobar\"\n    #     ), /no such file .* doesn't match 'foobar'/\n    #.......................................................................................................\n    # await async_throws  T, ( Ω__98 = -> await fetch_filesize 'nosuchpath' )\n    # await async_throws  T, ( Ω__99 = -> await fetch_filesize 'nosuchpath' ), /no such file/\n    #.......................................................................................................\n    done?()\n\n  #---------------------------------------------------------------------------------------------------------\n  asynchronous_errors: ->\n    FS = require 'node:fs/promises'\n    #.......................................................................................................\n    fetch_filesize = ( path ) -> ( await FS.stat path ).size\n    #.......................................................................................................\n    produce_filesize = ( path ) =>\n      try\n        filesize  = await fetch_filesize path\n        urge \"Ω_100\", { filesize, }\n      catch error\n        warn \"Ω_101\", error\n      return null\n    #.......................................................................................................\n    echo '-------------------'\n    # try await produce_filesize 'nosuchpath' catch error then warn 'Ω_102', error.message\n    await produce_filesize 'nosuchpath'\n    echo '-------------------'\n    await produce_filesize __filename\n    echo '-------------------'\n    # await async_throws ( Ω_103 = -> await fetch_filesize __filename ), '???'\n    await @async_throws ( Ω_104 = -> await fetch_filesize 'nosuchpath' ), /no such file/\n    echo '-------------------'\n    #.......................................................................................................\n    done?()\n\n  #---------------------------------------------------------------------------------------------------------\n  test_cfg: ->\n    #.......................................................................................................\n    do =>\n      t2 = new Test()\n      @eq ( Ω_105 = -> Object.isFrozen t2.cfg  ), true\n      @eq ( Ω_106 = -> t2.cfg.auto_reset       ), false\n      @eq ( Ω_107 = -> t2.cfg.show_report      ), true\n      @eq ( Ω_108 = -> t2.cfg.show_results     ), true\n      @eq ( Ω_109 = -> t2.cfg.show_fails       ), true\n      @eq ( Ω_110 = -> t2.cfg.show_passes      ), true\n      @eq ( Ω_111 = -> t2.cfg.throw_on_error   ), false\n      @eq ( Ω_112 = -> t2.cfg.throw_on_fail    ), false\n      @eq ( Ω_113 = -> t2.cfg.message_width    ), 300\n      return null\n    #.......................................................................................................\n    do =>\n      t2 = new Test {}\n      @eq ( Ω_114 = -> Object.isFrozen t2.cfg  ), true\n      @eq ( Ω_115 = -> t2.cfg.auto_reset       ), false\n      @eq ( Ω_116 = -> t2.cfg.show_report      ), true\n      @eq ( Ω_117 = -> t2.cfg.show_results     ), true\n      @eq ( Ω_118 = -> t2.cfg.show_fails       ), true\n      @eq ( Ω_119 = -> t2.cfg.show_passes      ), true\n      @eq ( Ω_120 = -> t2.cfg.throw_on_error   ), false\n      @eq ( Ω_121 = -> t2.cfg.throw_on_fail    ), false\n      @eq ( Ω_122 = -> t2.cfg.message_width    ), 300\n      return null\n    #.......................................................................................................\n    do =>\n      t2 = new Test { message_width: 30, throw_on_error: true, }\n      @eq ( Ω_123 = -> Object.isFrozen t2.cfg  ), true\n      @eq ( Ω_124 = -> t2.cfg.auto_reset       ), false\n      @eq ( Ω_125 = -> t2.cfg.show_report      ), true\n      @eq ( Ω_126 = -> t2.cfg.show_results     ), true\n      @eq ( Ω_127 = -> t2.cfg.show_fails       ), true\n      @eq ( Ω_128 = -> t2.cfg.show_passes      ), true\n      @eq ( Ω_129 = -> t2.cfg.throw_on_error   ), true\n      @eq ( Ω_130 = -> t2.cfg.throw_on_fail    ), false\n      @eq ( Ω_131 = -> t2.cfg.message_width    ), 30\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  can_throw_on_fail: ->\n    #.......................................................................................................\n    do =>\n      ### ensure that `Test` instance complains when no error is thrown inside a `throws()` check: ###\n      t2 = new Test { throw_on_error: false, show_report: false, prefix: '**T2_1**', }\n      t2.test ctof_1: ->\n        @throws ( ctof_2 = -> 32 ), /expected an error/\n      @eq ( Ω_132 = -> t2.stats    ), { '*': { passes: 0, fails: 1 }, 'ctof_1.ctof_2': { passes: 0, fails: 1 } }\n      @eq ( Ω_133 = -> t2.warnings ), { 'ctof_1.ctof_2': [ '(noerr) expected an error but none was thrown' ] }\n      return null\n    #.......................................................................................................\n    do =>\n      t2 = new Test { throw_on_error: false, throw_on_fail: true, show_report: false, prefix: '**T2_2**', }\n      @throws ( ctof_5 = -> t2.eq ( ctof_6 = -> 14 ), 15 ), /neq:/\n      # @throws ( Ω_134 = -> t2.eq ( xy1 = -> 14 ), 15 ), /---/\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  TT3:\n    assumptions: ( ctx ) ->\n      t2 = new Test { show_report: false, }\n      #.....................................................................................................\n      await t2.async_test assumptions_task: ->\n        line = '-'.repeat 108\n        echo line; @eq ( dat_1 = -> 32 ), 32\n        echo line; @eq ( dat_2 = -> 32 ), 33\n        echo line; @eq ( dat_3 = -> throw new Error \"fine\" )\n        echo line; @pass 'dat_4', 'test', \"all fine\"\n        echo line; @pass 'dat_5', 'test'\n        echo line; @fail 'dat_6', 'test', \"all fine\"\n        echo line; @fail 'dat_7', 'test'\n        echo line; @throws ( dat_8 = -> 'oops' ), /fine/\n        echo line; @throws ( dat_9 = -> throw new Error \"this is actually fine 1\" ), /fine/\n        echo line; @throws ( dat_10 = -> throw new Error \"this is actually fine 2\" ), /what/\n        echo line; @throws ( dat_11 = -> throw new Error \"this is actually fine 3\" ), \"not this\"\n        echo line; await @async_throws ( dat_12 = -> throw new Error \"this is actually fine 4\" )\n        echo line; await @async_throws ( dat_13 = -> throw new Error \"this is actually fine 5\" ), /fine/\n        echo line; await @async_throws ( dat_14 = -> throw new Error \"this is actually fine 6\" ), /not this/\n        echo line; await @async_throws ( dat_15 = -> after 0.1, => await throw new Error \"this is actually fine 7\" ), /fine/\n        echo line; await @async_throws ( dat_16 = -> after 0.1, => await throw new Error \"this is actually fine 9\" ), /what/\n        echo line; await @async_throws ( dat_17 = -> after 0.1, => await throw new Error \"this is actually fine 10\" ), \"not this\"\n        echo line; await @async_eq ( dat_18 = -> after 0, => await 32 ), 32\n        echo line; await @async_eq ( dat_19 = -> after 0, => await 32 ), 33\n        echo line; await @async_eq ( dat_20 = -> after 0, => await throw new Error \"fine\" )\n      #.....................................................................................................\n      @eq ( Ω_135 = -> t2.stats[ '*'                       ] ), { passes: 8, fails: 12 }\n      @eq ( Ω_136 = -> t2.stats[ 'assumptions_task.dat_1'  ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_137 = -> t2.stats[ 'assumptions_task.dat_2'  ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_138 = -> t2.stats[ 'assumptions_task.dat_3'  ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_139 = -> t2.stats[ 'assumptions_task.dat_4'  ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_140 = -> t2.stats[ 'assumptions_task.dat_5'  ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_141 = -> t2.stats[ 'assumptions_task.dat_6'  ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_142 = -> t2.stats[ 'assumptions_task.dat_7'  ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_143 = -> t2.stats[ 'assumptions_task.dat_8'  ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_144 = -> t2.stats[ 'assumptions_task.dat_9'  ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_145 = -> t2.stats[ 'assumptions_task.dat_10' ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_146 = -> t2.stats[ 'assumptions_task.dat_11' ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_147 = -> t2.stats[ 'assumptions_task.dat_12' ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_148 = -> t2.stats[ 'assumptions_task.dat_13' ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_149 = -> t2.stats[ 'assumptions_task.dat_14' ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_150 = -> t2.stats[ 'assumptions_task.dat_15' ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_151 = -> t2.stats[ 'assumptions_task.dat_16' ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_152 = -> t2.stats[ 'assumptions_task.dat_17' ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_153 = -> t2.stats[ 'assumptions_task.dat_18' ] ), { passes: 1, fails: 0 }\n      @eq ( Ω_154 = -> t2.stats[ 'assumptions_task.dat_19' ] ), { passes: 0, fails: 1 }\n      @eq ( Ω_155 = -> t2.stats[ 'assumptions_task.dat_20' ] ), { passes: 0, fails: 1 }\n      #.....................................................................................................\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  demo_for_readme: ->\n    #.......................................................................................................\n    my_math_lib =\n      mul: ( a, b ) -> a * b\n      add: ( a, b ) -> a + b\n    #.......................................................................................................\n    taskgroup_A =\n      test_1: ->\n      better_use_meaningful_names: ->\n        @eq ( t__20 = -> my_math_lib.mul 3, 4 ), 12\n        @eq ( t__21 = -> my_math_lib.add 3, 4 ), 7\n      subgroup:\n        foo: ->\n        bar: ->\n    taskgroup_B = {}\n    ( new Test() ).test { taskgroup_A, taskgroup_B, }\n\n\n\n# @foobar = ->\n#   debug 'Ω_156'\n#   @eq ( Ω_157 = -> 1 ), 1\n#   return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  cfg = { throw_on_error: true, }\n  cfg = { throw_on_error: false, }\n  await ( new Test cfg ).async_test {\n    # TT: @TT,\n    Interface:  @TT.Interface,\n    # Equality:   @TT.Equality,\n    # eq_works_correctly_with_zero:   @TT.Equality.eq_works_correctly_with_zero,\n    # set_equality_by_value: @TT.Equality.set_equality_by_value,\n    }\n  # await ( new Test cfg ).async_test @TT\n  # ( new Test cfg ).test @TT.pass_and_fail\n  return null\n\n"
  ]
}