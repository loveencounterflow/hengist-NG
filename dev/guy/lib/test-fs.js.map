{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-fs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/prompt-db'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nFS                        = require 'node:fs'\nPATH                      = require 'node:path'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@fs_tasks =\n\n  #-----------------------------------------------------------------------------------------------------------\n  get_descriptor: ->\n    filenames_and_matchers = [\n      [ 'isa-nosuch',           { type: null,         link: false, is_loop: false } ]\n      [ 'isa-nowhere-symlink',  { type: 'link',       link: true,  is_loop: false } ]\n      [ 'isa-circular-symlink', { type: 'link',       link: true,  is_loop: true  } ]\n      [ 'isa-file-symlink',     { type: 'file',       link: true,  is_loop: false } ]\n      [ 'isa-folder-symlink',   { type: 'folder',     link: true,  is_loop: false } ]\n      [ 'isa-file',             { type: 'file',       link: false, is_loop: false } ]\n      [ 'isa-folder',           { type: 'folder',     link: false, is_loop: false } ]\n      [ '/dev/tty0',            { type: 'character',  link: false, is_loop: false } ]\n      [ '/dev/loop0',           { type: 'block',      link: false, is_loop: false } ] ]\n    GUY = require '../../../apps/guy'\n    for [ filename, matcher, ] in filenames_and_matchers\n      if PATH.isAbsolute filename then  path = filename\n      else                              path = PATH.resolve __dirname, PATH.join '../probes', filename\n      @eq ( Ωfs___2 = -> GUY.fs.get_descriptor path ), matcher\n    # debug 'Ωfs___3', GUY.fs.get_descriptor '/dev/loop0'\n    # @eq ( Ωfs___4 = -> GUY.fs.get_descriptor '/dev/shm' ), matcher\n    #.........................................................................................................\n    return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @fs_tasks\n\n\n\n\n\n\n"
  ]
}