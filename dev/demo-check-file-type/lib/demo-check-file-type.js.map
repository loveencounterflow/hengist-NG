{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-check-file-type.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/prompt-db'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nFS                        = require 'node:fs'\nPATH                      = require 'node:path'\n\nfilenames = [\n  'isa-nosuch'\n  'isa-nowhere-symlink'\n  'isa-circular-symlink'\n  'isa-file-symlink'\n  'isa-folder-symlink'\n  'isa-file'\n  'isa-folder'\n  ]\n\ntypes_and_methods = [\n  { type: 'file',       method_name: 'isFile',            }\n  { type: 'folder',     method_name: 'isDirectory',       }\n  { type: 'block',      method_name: 'isBlockDevice',     }\n  { type: 'character',  method_name: 'isCharacterDevice', }\n  { type: 'fifo',       method_name: 'isFIFO',            }\n  { type: 'socket',     method_name: 'isSocket',          }\n]\n\n#-----------------------------------------------------------------------------------------------------------\n_get_short_file_descriptor = ( path ) ->\n  type    = null\n  link    = false\n  is_loop = false\n  #.........................................................................................................\n  [ lstat, link, ] = do =>\n    try lstat = FS.lstatSync path catch error\n      return [ null, false,  ] if error.code is 'ENOENT'\n      throw error\n    return [ lstat, lstat.isSymbolicLink(), ]\n  #.........................................................................................................\n  return { type, link, is_loop, } unless lstat?\n  #.........................................................................................................\n  if link then [ stat, is_loop, ] = do =>\n    try stat = FS.statSync path catch error\n      return [ null,  true,   ] if error.code is 'ELOOP'\n      return [ null,  false,  ] if error.code is 'ENOENT'\n      throw error\n    return [ stat, false, ]\n  is_loop  ?= false\n  stat      = lstat if is_loop or ( not link )\n  return { type: 'link', link, is_loop, } if ( not stat? ) and ( not is_loop )\n  type = do =>\n    for { type, method_name, } in types_and_methods\n      return type if stat[ method_name ]()\n    return null\n  #.........................................................................................................\n  type ?= 'link'\n  return { type, link, is_loop, }\n\n#-----------------------------------------------------------------------------------------------------------\nget_short_file_descriptor = ( P... ) ->\n  _get_short_file_descriptor P...\n\n#-----------------------------------------------------------------------------------------------------------\nget_long_file_descriptor = ( P... ) ->\n  throw new Error \"not implemented\"\n  { dsc, stats } = _get_short_file_descriptor P...\n# dev: 2114n,\n# ino: 48064969n,\n# mode: 33188n,\n# nlink: 1n,\n# uid: 85n,\n# gid: 100n,\n# rdev: 0n,\n# size: 527n,\n# blksize: 4096n,\n# blocks: 8n,\n# atimeMs: 1318289051000n,\n# mtimeMs: 1318289051000n,\n# ctimeMs: 1318289051000n,\n# birthtimeMs: 1318289051000n,\n# atimeNs: 1318289051000000000n,\n# mtimeNs: 1318289051000000000n,\n# ctimeNs: 1318289051000000000n,\n# birthtimeNs: 1318289051000000000n,\n# atime: Mon, 10 Oct 2011 23:24:11 GMT,\n# mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n# ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n# birthtime: Mon, 10 Oct 2011 23:24:11 GMT\n\nfor filename in filenames\n  # help()\n  path    = PATH.resolve __dirname, PATH.join '../probes', filename\n  dsc     = get_short_file_descriptor path\n  help 'Î©___4', ( filename.padEnd 20 ), dsc\n\n\n\n\n\n\n\n\n"
  ]
}