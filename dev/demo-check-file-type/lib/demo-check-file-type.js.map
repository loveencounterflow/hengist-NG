{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-check-file-type.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/prompt-db'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nFS                        = require 'node:fs'\nPATH                      = require 'node:path'\n\nfilenames = [\n  'isa-nosuch'\n  'isa-circular-symlink'\n  'isa-file'\n  'isa-file-symlink'\n  'isa-folder'\n  'isa-folder-symlink'\n  'isa-nowhere-symlink' ]\n\ntypes_and_methods = [\n  { type: 'file',       method_name: 'isFile',            }\n  { type: 'folder',     method_name: 'isDirectory',       }\n  { type: 'block',      method_name: 'isBlockDevice',     }\n  { type: 'character',  method_name: 'isCharacterDevice', }\n  { type: 'fifo',       method_name: 'isFIFO',            }\n  { type: 'socket',     method_name: 'isSocket',          }\n]\n\n#-----------------------------------------------------------------------------------------------------------\nget_file_descriptor = ( path ) ->\n  #.........................................................................................................\n  [ lstat, link, ] = do =>\n    try lstat = FS.lstatSync path catch error\n      return [ null, false,  ] if error.code is 'ENOENT'\n      throw error\n    return [ lstat, lstat.isSymbolicLink(), ]\n  #.........................................................................................................\n  return null unless lstat?\n  info 'Ω___1', ( PATH.basename path ), lstat?, link\n  #.........................................................................................................\n  if link then [ stat, is_loop, ] = do =>\n    try stat = FS.statSync path catch error\n      return [ null,  true,   ] if error.code is 'ELOOP'\n      return [ null,  false,  ] if error.code is 'ENOENT'\n      throw error\n    return [ stat, false, ]\n  debug 'Ω___2', ( ( PATH.basename path ).padEnd 20 ), { lstat: lstat?, stat: stat?, link, is_loop}\n  stat = lstat if is_loop or ( not link )\n  return null if ( not stat? ) and ( not is_loop )\n  type = do =>\n    for { type, method_name, } in types_and_methods\n      return type if stat[ method_name ]()\n    return null\n  #.........................................................................................................\n  return { type, link, is_loop: false, }\n\nfor filename in filenames\n  help()\n  path    = PATH.resolve __dirname, PATH.join '../probes', filename\n  dsc     = get_file_descriptor path\n  help 'Ω___4', ( filename.padEnd 20 ), dsc\n\n\n\n\n\n\n\n\n"
  ]
}