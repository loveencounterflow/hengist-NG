{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-fstrings-ported.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n\n#===========================================================================================================\ndemo_d3_format = ->\n  D3F = require 'd3-format'\n  do =>\n    help 'Ω___1', f = D3F.format '.>+$20,.3f'\n    help 'Ω___2', rpr f 1234.5678\n    help 'Ω___3', rpr f '1234.5678'\n    help 'Ω___4', f = D3F.format '—>+$20,.3c'\n    help 'Ω___5', rpr f 1234.5678\n    help 'Ω___6', rpr f '1234.5678'\n    help 'Ω___7', rpr f 'helo'\n    help 'Ω___8', rpr f '一千二百'\n    help 'Ω___9', rpr f '一千二百三十四点五六七八'\n    help 'Ω__10', '\\;'.length is 1\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT does not treat backslash-escaped characters correctly ###\n  format_re = ///\n    ^:\n    (?<fmt>.+?(?<!\\\\));\n    (?<tail>.*)\n    $\n    ///\n  #---------------------------------------------------------------------------------------------------------\n  f = ( parts, expressions... ) ->\n    R = parts[ 0 ]\n    for value, idx in expressions\n      part    = parts[ idx + 1 ]\n      #.....................................................................................................\n      if part.startsWith ':'\n        unless ( match = part.match format_re )?\n          throw new Error \"Ω__14 illegal format expression #{rpr raw}\"\n        { fmt, tail, } = match.groups\n        fmt = fmt.replace /\\\\;/g, ';'\n        R  += ( ( D3F.format fmt ) value ) + tail\n      #.....................................................................................................\n      else\n        literal = if ( typeof value is 'string' ) then value else rpr value\n        R      += literal + part\n    return R\n  urge 'Ω__17', rpr f\"AAA#{1234.5678}:\\\\;>+20,.3f;D\\t\\\\;DD#{98.76}:+7.2f;ZZZ\"\n  urge 'Ω__17', rpr f\"AAA#{1234.5678}: >+20,.3f;D\\t\\\\;DD#{98.76}:+7.2f;ZZZ\"\n\n\n  # { format, new_formatter, } = require_myfstring()\n  # urge 'Ω__18', format ':*<+20,.5g', '11456.15454'\n  # urge 'Ω__19', format ':*<+20,.5g', 11456.15454\n  # # urge 'Ω__20', format ':*=+20,.5g', 11456.15454\n\n  # f152f = new_formatter ': > 15,.2f'\n  # help 'Ω__21', f152f 1\n  # help 'Ω__22', f152f 12\n  # help 'Ω__23', f152f 123\n  # help 'Ω__24', f152f 1234\n  # help 'Ω__25', f152f -11456.15454\n  # help 'Ω__26', f152f 53443.32455\n  # help 'Ω__27', f152f 885673.367553\n  # f15s = new_formatter ': > 15s'\n  # help 'Ω__28', f15s 'helo'\n  return null\n\n#===========================================================================================================\nif module is require.main then do =>\n  demo_d3_format()\n  # urge 'Ω__29', rpr String.raw { raw: [ '123\\t\\u4e01', ], }, '123\\t\\u4e01'\n  # urge 'Ω__30', rpr String.raw { raw: [ '123\\\\t\\\\u4e01', ], }, '123\\\\t\\\\u4e01'\n  # urge 'Ω__30', rpr '\"123\\\\t\\\\u4e01\\x01\\377\"'\n  # urge 'Ω__30', rpr JSON.parse '\"123\\\\t\\\\u4e01\\x01\\377\"'\n\n  # empty = ''\n  # x = 'what'\n  # urge 'Ω__31', SQL\"abc\"\n  # urge 'Ω__32', SQL\"abc#{}xyz\"\n  # urge 'Ω__33', SQL\"abc#{empty}xyz\"\n  # urge 'Ω__34', SQL\"abc#{x}:; xyz\"\n  # urge 'Ω__35', SQL\"\\;#{x}:; xyz\"\n"
  ]
}