{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-slevithan-regex.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { partial, regex, } = require 'regex'\n  help 'Ω___1', regex'helo\\sworld'\n  help 'Ω___2', regex'(a)(?>b)(c)d'\n  help 'Ω___3', regex'(abc)+(?:def)*'\n  help 'Ω___4', regex\"\"\"(abc)+#{'[*+]'}\"\"\"\n  # help 'Ω___5', regex\"\"\"(abc)+#{/helo*/i}\"\"\"\n  help 'Ω___6', regex\"\"\"^(?>\\w+\\s?)+$\"\"\"\n  #.........................................................................................................\n  time = ( f ) ->\n    t0 = Date.now()\n    whisper '—'.repeat 108\n    f()\n    whisper '.'.repeat 108\n    t1 = Date.now()\n    dt = ( t1 - t0 ) / 1000\n    info \"time: #{dt}s\"\n    whisper '—'.repeat 108\n  #.........................................................................................................\n  do =>\n    probes = [\n      # \"A target string that takes a long time or can even hang your browser!\"\n      # \"A target string that takes a long time or can even hang your browser\"\n      \"shorter string 123 123 123 123 123!\"\n      \"shorter string 123 123 123 123 123\"\n      ]\n    time =>\n      spaced_words_re = regex\"\"\"^(?>\\w+\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___7', probe.match spaced_words_re\n      return null\n    time =>\n      spaced_words_re = regex\"\"\"^(?>(?>\\w)\\w*\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___8', probe.match spaced_words_re\n      return null\n    time =>\n      spaced_words_re = regex\"\"\"^(\\w+\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___9', probe.match spaced_words_re\n      return null\n  #.........................................................................................................\n  time =>\n    patterns = [\n      /^a(bc|b)c$/u\n      regex\"\"\"^a(bc|b)c$\"\"\"\n      regex\"\"\"^a(?>bc|b)c$\"\"\"\n      regex\"\"\"^a(?>b|bc)c$\"\"\"\n      # regex\"\"\"^ab++c\"\"\"\n      ]\n    help 'Ω__10', patterns\n    probes = [ 'abc', 'abcc', ]\n    for pattern in patterns\n      for probe in probes\n        help 'Ω__11', probe, pattern, probe.match pattern\n    return null\n  #.........................................................................................................\n  do =>\n    info 'Ω__12', /^([abc]{0})x$/.test 'x'\n    info 'Ω__13', /^([abc]{0})x$/.test 'a'\n    info 'Ω__14', /^([abc]{0})x$/.test 'ax'\n    info 'Ω__15', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'x'\n    info 'Ω__16', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'xa'\n    info 'Ω__17', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'bxb'\n    info 'Ω__18', ( regex\"\"\"^\n      (?<suffix> [abc] ){0}\n      x \\g<suffix>\n      $\"\"\").test 'xa'\n    info 'Ω__19', ( regex\"\"\"^\n      (?<suffix> [abc] ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\").test 'xacb'\n    info 'Ω__20', ( regex\"\"\"^\n      (?<suffix> (?<thesuffix> [abc] ) ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\" )\n    info 'Ω__21', 'xbca'.match ( regex\"\"\"^\n      (?<suffix> (?<thesuffix> [abc] ) ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\" )\n    return null\n  #.........................................................................................................\n  do =>\n    ip_address_re = regex\"\"\"\n      \\b\n      (?<b1> \\g<byte> ) \\.\n      (?<b2> \\g<byte> ) \\.\n      (?<b3> \\g<byte> ) \\.\n      (?<b4> \\g<byte> )\n      \\b\n\n      # The {0} quantifier allows defining a subpattern without matching it\n      (?<byte> 2[0-4]\\d | 25[0-5] | 1\\d\\d | [1-9]?\\d ){0}\n      \"\"\"\n    match = '123.45.21.4'.match ip_address_re\n    urge 'Ω__22', { match.groups..., }\n    return null\n  #.........................................................................................................\n  urge 'Ω__23', regex\"(?<outer>a#{regex\"(?<inner>bc)\"}z)\"\n  urge 'Ω__24', regex\"(?<outer>a#{partial\"(?<inner>bc)\"}z)\"\n  urge 'Ω__25', regex\"\\\\\"\n  urge 'Ω__26', regex\"\\\\\\\\\"\n  urge 'Ω__27', regex\"(?<#{'outer'}>a#{partial\"(?<#{'inner'}>bc)\"}z)\"\n  urge 'Ω__28', regex\"^(?:(?!\\b(the|an?)\\b).)+\"\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_lexer_1 = ->\n  { partial, regex, } = require 'regex'\n  #.........................................................................................................\n  urge 'Ω__29', a = ( regex 'y' )\"(?<name>[a-z]+)\"\n  urge 'Ω__30', b = ( regex 'y' )\"#{a}\\s+in\\s+(?<place>[a-z]+)\"\n  if ( match = \"alice in cairo\".match b )?\n    info 'Ω__31', { match.groups..., }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_lexer_2 = ->\n  { partial, regex, } = require 'regex'\n  { f } = require '../../../apps/effstring'\n  rx    = regex 'y'\n  patterns = {\n    name:             { re: rx\"(?<initial>[A-Z])[a-z]*\", }\n    number:           { re: rx\"[0-9]+\",                  }\n    sq_string_start:  { re: rx\"(?!<\\\\)'\",                }\n    paren_start:      { re: rx\"\\(\",                      }\n    paren_stop:       { re: rx\"\\)\",                      }\n    other:            { re: rx\"[A-Za-z0-9]+\",            }\n    ws:               { re: rx\"\\s+\",                     }\n    }\n  urge 'Ω__32', patterns\n  #.........................................................................................................\n  tokenize = ( text ) ->\n    stop      = 0\n    info 'Ω__33', rpr text\n    loop\n      for name, { re, } of patterns\n        # debug 'Ω__34', f\"#{name}:>20c;: #{re}\"\n        hit           = null\n        re.lastIndex  = stop\n        if ( match = text.match re )?\n          break\n      break unless match?\n      hit       = match[ 0 ]\n      start     = stop\n      stop     += hit.length\n      help 'Ω__35', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{name}:>20c;: #{rpr hit}:<30c; #{rpr { ( match.groups ? {} )..., }}\"\n    return null\n  #.........................................................................................................\n  texts = [\n    \"Alice in Cairo 1912 (approximately)\"\n    \"Alice in Cairo 1912 'approximately'\"\n    ]\n  #.........................................................................................................\n  for text in texts\n    tokenize text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_lexer_3 = ->\n  { partial, regex, } = require 'regex'\n  { f } = require '../../../apps/effstring'\n  hide  = ( owner, name, value ) -> Object.defineProperty owner, name, { enumerable: false, value, writable: true, }\n  rx    = regex 'y'\n  #===========================================================================================================\n  jump_literal_re = regex\"\"\"\n    ^(\n    \\[ (?<exclusive_jump> [^ \\^ . \\s \\[ \\] ]+ )     |\n       (?<inclusive_jump> [^ \\^ . \\s \\[ \\] ]+ ) \\[  |\n    \\] (?<exclusive_back> [     .          ]  )     |\n       (?<inclusive_back> [     .          ]  ) \\]\n    )$ \"\"\"\n\n  #===========================================================================================================\n  class Token\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      @name = cfg.name\n      hide @, 'level',        cfg.level             ? null\n      hide @, 'matcher',      cfg.matcher\n      hide @, 'jump',         @parse_jump cfg.jump  ? null\n      hide @, 'jump_literal', cfg.jump              ? null\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    match_at: ( start, text ) ->\n      @matcher.lastIndex = start\n      return null unless ( match = text.match @matcher )?\n      return new Lexeme @, match\n\n    #---------------------------------------------------------------------------------------------------------\n    parse_jump: ( jump_literal ) ->\n      return null unless jump_literal?\n      ### TAINT use cleartype ###\n      unless ( match = jump_literal.match jump_literal_re )?\n        throw new Error \"Ω__36 expected a well-formed jump literal, got #{rpr jump_literal}\"\n      for key, level of match.groups\n        continue unless level?\n        [ affinity, action, ] = key.split '_'\n        break\n      return { affinity, action, level, }\n\n\n  #===========================================================================================================\n  class Lexeme\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( token, match ) ->\n      @name   = token.name\n      @hit    = match[ 0 ]\n      @start  = match.index\n      @stop   = @start + @hit.length\n      @groups = match.groups ? null\n      @jump   = token.jump\n      return undefined\n\n\n  #===========================================================================================================\n  class Level\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      cfg    ?= {}\n      @name   = cfg.name ? 'gnd'\n      hide @, 'grammar',  cfg.grammar ? null\n      hide @, 'tokens',   [ ( cfg.tokens ? [] )..., ]\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    [Symbol.iterator]: -> yield t for t in @tokens\n\n    #---------------------------------------------------------------------------------------------------------\n    new_token: ( token ) ->\n      token = ( new Token token ) unless ( token instanceof Token )\n      if token.level? and token.level isnt @\n        throw new Error \"Ω__37 inconsistent level\"\n      token.level = @\n      @tokens.push token\n      return token\n\n  #===========================================================================================================\n  class Grammar\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      cfg    ?= {}\n      @name   = cfg.name ? 'g'\n      hide @, 'levels', { ( cfg.levels ? {} )..., }\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    new_level: ( level ) ->\n      level = ( new Level level ) unless ( level instanceof Level )\n      if @levels[ level.name ]?\n        throw new Error \"Ω__38 level #{rpr level.name} elready exists\"\n      @levels[ level.name ] = level\n      return level\n\n    #---------------------------------------------------------------------------------------------------------\n    tokenize: ( source ) ->\n      start   = 0\n      info 'Ω__39', rpr source\n      loop\n        lexeme  = null\n        for token from gnd\n          if ( lexeme = token.match_at start, source )?\n            break\n        break unless lexeme?\n        { name\n          stop\n          hit\n          jump\n          groups  } = lexeme\n        groups_rpr  = if groups?  then ( rpr { groups..., } ) else ''\n        jump_rpr    = if jump?    then ( rpr jump           ) else ''\n        help 'Ω__40', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{name}:>15c;: #{rpr hit}:<30c; #{jump_rpr}:<15c; #{groups_rpr}\"\n        start     = stop\n      return null\n\n\n  #===========================================================================================================\n  ###\n  `Token` defines `matcher`, can jump into a level or back\n  `Level` has one or more `Token`s\n  `Grammar` has one or more `Level`s\n  `Lexeme` produced by a `Token` instance when matcher matches source\n\n  ###\n  #===========================================================================================================\n  show_jump = ( jump_literal ) ->\n    if ( match = jump_literal.match jump_literal_re  )?\n      for key, value of match.groups\n        continue unless value?\n        urge 'Ω__47', ( rpr jump_literal ), ( GUY.trm.grey key ), ( rpr value )\n    else\n      urge 'Ω__48', ( rpr jump_literal ), null\n    return null\n  show_jump 'abc'\n  show_jump '[abc['\n  show_jump '[abc'\n  show_jump 'abc['\n  show_jump '[string11'\n  show_jump 'string11['\n  show_jump 'abc]'\n  show_jump ']abc'\n  show_jump '.]'\n  show_jump '].'\n  #===========================================================================================================\n  g         = new Grammar { name: 'g', }\n  gnd       = g.new_level { name: 'gnd', }\n  string11  = g.new_level { name: 'string11', }\n  string12  = g.new_level { name: 'string12', }\n  gnd.new_token       { name: 'name',           matcher: rx\"(?<initial>[A-Z])[a-z]*\", }\n  gnd.new_token       { name: 'number',         matcher: rx\"[0-9]+\",                  }\n  gnd.new_token       { name: 'string11_start', matcher: rx\"(?!<\\\\)'\",                jump: 'string11[', }\n  gnd.new_token       { name: 'string12_start', matcher: rx'(?!<\\\\)\"',                jump: 'string12[', }\n  gnd.new_token       { name: 'paren_start',    matcher: rx\"\\(\",                      }\n  gnd.new_token       { name: 'paren_stop',     matcher: rx\"\\)\",                      }\n  gnd.new_token       { name: 'other',          matcher: rx\"[A-Za-z0-9]+\",            }\n  gnd.new_token       { name: 'ws',             matcher: rx\"\\s+\",                     }\n  string11.new_token  { name: 'text',           matcher: rx\"'\",                       jump: '].', }\n  #.........................................................................................................\n  debug 'Ω__41', g\n  debug 'Ω__42', g.levels\n  debug 'Ω__43', g.levels.gnd\n  debug 'Ω__44', g.levels.gnd.tokens\n  debug 'Ω__45', gnd\n  debug 'Ω__46', token for token from gnd\n  #.........................................................................................................\n  texts = [\n    \"Alice in Cairo 1912 (approximately)\"\n    \"Alice in Cairo 1912 'approximately'\"\n    ]\n  #.........................................................................................................\n  for text in texts\n    g.tokenize text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_1()\n  demo_lexer_3()\n"
  ]
}