{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-slevithan-regex.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { partial, regex, } = require 'regex'\n  help 'Ω___1', regex'helo\\sworld'\n  help 'Ω___2', regex'(a)(?>b)(c)d'\n  help 'Ω___3', regex'(abc)+(?:def)*'\n  help 'Ω___4', regex\"\"\"(abc)+#{'[*+]'}\"\"\"\n  # help 'Ω___5', regex\"\"\"(abc)+#{/helo*/i}\"\"\"\n  help 'Ω___6', regex\"\"\"^(?>\\w+\\s?)+$\"\"\"\n  #.........................................................................................................\n  time = ( f ) ->\n    t0 = Date.now()\n    whisper '—'.repeat 108\n    f()\n    whisper '.'.repeat 108\n    t1 = Date.now()\n    dt = ( t1 - t0 ) / 1000\n    info \"time: #{dt}s\"\n    whisper '—'.repeat 108\n  #.........................................................................................................\n  do =>\n    probes = [\n      # \"A target string that takes a long time or can even hang your browser!\"\n      # \"A target string that takes a long time or can even hang your browser\"\n      \"shorter string 123 123 123 123 123!\"\n      \"shorter string 123 123 123 123 123\"\n      ]\n    time =>\n      spaced_words_re = regex\"\"\"^(?>\\w+\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___7', probe.match spaced_words_re\n      return null\n    time =>\n      spaced_words_re = regex\"\"\"^(?>(?>\\w)\\w*\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___8', probe.match spaced_words_re\n      return null\n    time =>\n      spaced_words_re = regex\"\"\"^(\\w+\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___9', probe.match spaced_words_re\n      return null\n  #.........................................................................................................\n  time =>\n    patterns = [\n      /^a(bc|b)c$/u\n      regex\"\"\"^a(bc|b)c$\"\"\"\n      regex\"\"\"^a(?>bc|b)c$\"\"\"\n      regex\"\"\"^a(?>b|bc)c$\"\"\"\n      # regex\"\"\"^ab++c\"\"\"\n      ]\n    help 'Ω__10', patterns\n    probes = [ 'abc', 'abcc', ]\n    for pattern in patterns\n      for probe in probes\n        help 'Ω__11', probe, pattern, probe.match pattern\n    return null\n  #.........................................................................................................\n  do =>\n    info 'Ω__12', /^([abc]{0})x$/.test 'x'\n    info 'Ω__13', /^([abc]{0})x$/.test 'a'\n    info 'Ω__14', /^([abc]{0})x$/.test 'ax'\n    info 'Ω__15', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'x'\n    info 'Ω__16', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'xa'\n    info 'Ω__17', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'bxb'\n    info 'Ω__18', ( regex\"\"\"^\n      (?<suffix> [abc] ){0}\n      x \\g<suffix>\n      $\"\"\").test 'xa'\n    info 'Ω__19', ( regex\"\"\"^\n      (?<suffix> [abc] ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\").test 'xacb'\n    info 'Ω__20', ( regex\"\"\"^\n      (?<suffix> (?<thesuffix> [abc] ) ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\" )\n    info 'Ω__21', 'xbca'.match ( regex\"\"\"^\n      (?<suffix> (?<thesuffix> [abc] ) ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\" )\n    return null\n  #.........................................................................................................\n  do =>\n    ip_address_re = regex\"\"\"\n      \\b\n      (?<b1> \\g<byte> ) \\.\n      (?<b2> \\g<byte> ) \\.\n      (?<b3> \\g<byte> ) \\.\n      (?<b4> \\g<byte> )\n      \\b\n\n      # The {0} quantifier allows defining a subpattern without matching it\n      (?<byte> 2[0-4]\\d | 25[0-5] | 1\\d\\d | [1-9]?\\d ){0}\n      \"\"\"\n    match = '123.45.21.4'.match ip_address_re\n    urge 'Ω__22', { match.groups..., }\n    return null\n  #.........................................................................................................\n  urge 'Ω__23', regex\"(?<outer>a#{regex\"(?<inner>bc)\"}z)\"\n  urge 'Ω__24', regex\"(?<outer>a#{partial\"(?<inner>bc)\"}z)\"\n  urge 'Ω__25', regex\"\\\\\"\n  urge 'Ω__26', regex\"\\\\\\\\\"\n  urge 'Ω__27', regex\"(?<#{'outer'}>a#{partial\"(?<#{'inner'}>bc)\"}z)\"\n  urge 'Ω__28', regex\"^(?:(?!\\b(the|an?)\\b).)+\"\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo_1()\n"
  ]
}