{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-slevithan-regex.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  { partial, regex, } = require 'regex'\n  help 'Ω___1', regex'helo\\sworld'\n  help 'Ω___2', regex'(a)(?>b)(c)d'\n  help 'Ω___3', regex'(abc)+(?:def)*'\n  help 'Ω___4', regex\"\"\"(abc)+#{'[*+]'}\"\"\"\n  # help 'Ω___5', regex\"\"\"(abc)+#{/helo*/i}\"\"\"\n  help 'Ω___6', regex\"\"\"^(?>\\w+\\s?)+$\"\"\"\n  #.........................................................................................................\n  time = ( f ) ->\n    t0 = Date.now()\n    whisper '—'.repeat 108\n    f()\n    whisper '.'.repeat 108\n    t1 = Date.now()\n    dt = ( t1 - t0 ) / 1000\n    info \"time: #{dt}s\"\n    whisper '—'.repeat 108\n  #.........................................................................................................\n  do =>\n    probes = [\n      # \"A target string that takes a long time or can even hang your browser!\"\n      # \"A target string that takes a long time or can even hang your browser\"\n      \"shorter string 123 123 123 123 123!\"\n      \"shorter string 123 123 123 123 123\"\n      ]\n    time =>\n      spaced_words_re = regex\"\"\"^(?>\\w+\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___7', probe.match spaced_words_re\n      return null\n    time =>\n      spaced_words_re = regex\"\"\"^(?>(?>\\w)\\w*\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___8', probe.match spaced_words_re\n      return null\n    time =>\n      spaced_words_re = regex\"\"\"^(\\w+\\s?)+$\"\"\"\n      for probe in probes\n        help 'Ω___9', probe.match spaced_words_re\n      return null\n  #.........................................................................................................\n  time =>\n    patterns = [\n      /^a(bc|b)c$/u\n      regex\"\"\"^a(bc|b)c$\"\"\"\n      regex\"\"\"^a(?>bc|b)c$\"\"\"\n      regex\"\"\"^a(?>b|bc)c$\"\"\"\n      # regex\"\"\"^ab++c\"\"\"\n      ]\n    help 'Ω__10', patterns\n    probes = [ 'abc', 'abcc', ]\n    for pattern in patterns\n      for probe in probes\n        help 'Ω__11', probe, pattern, probe.match pattern\n    return null\n  #.........................................................................................................\n  do =>\n    info 'Ω__12', /^([abc]{0})x$/.test 'x'\n    info 'Ω__13', /^([abc]{0})x$/.test 'a'\n    info 'Ω__14', /^([abc]{0})x$/.test 'ax'\n    info 'Ω__15', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'x'\n    info 'Ω__16', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'xa'\n    info 'Ω__17', /^(?<suffix>[abc]){0}x\\k<suffix>$/.test 'bxb'\n    info 'Ω__18', ( regex\"\"\"^\n      (?<suffix> [abc] ){0}\n      x \\g<suffix>\n      $\"\"\").test 'xa'\n    info 'Ω__19', ( regex\"\"\"^\n      (?<suffix> [abc] ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\").test 'xacb'\n    info 'Ω__20', ( regex\"\"\"^\n      (?<suffix> (?<thesuffix> [abc] ) ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\" )\n    info 'Ω__21', 'xbca'.match ( regex\"\"\"^\n      (?<suffix> (?<thesuffix> [abc] ) ){0}\n      x \\g<suffix> \\g<suffix> \\g<suffix>\n      $\"\"\" )\n    return null\n  #.........................................................................................................\n  do =>\n    ip_address_re = regex\"\"\"\n      \\b\n      (?<b1> \\g<byte> ) \\.\n      (?<b2> \\g<byte> ) \\.\n      (?<b3> \\g<byte> ) \\.\n      (?<b4> \\g<byte> )\n      \\b\n\n      # The {0} quantifier allows defining a subpattern without matching it\n      (?<byte> 2[0-4]\\d | 25[0-5] | 1\\d\\d | [1-9]?\\d ){0}\n      \"\"\"\n    match = '123.45.21.4'.match ip_address_re\n    urge 'Ω__22', { match.groups..., }\n    return null\n  #.........................................................................................................\n  urge 'Ω__23', regex\"(?<outer>a#{regex\"(?<inner>bc)\"}z)\"\n  urge 'Ω__24', regex\"(?<outer>a#{partial\"(?<inner>bc)\"}z)\"\n  urge 'Ω__25', regex\"\\\\\"\n  urge 'Ω__26', regex\"\\\\\\\\\"\n  urge 'Ω__27', regex\"(?<#{'outer'}>a#{partial\"(?<#{'inner'}>bc)\"}z)\"\n  urge 'Ω__28', regex\"^(?:(?!\\b(the|an?)\\b).)+\"\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_lexer_1 = ->\n  { partial, regex, } = require 'regex'\n  #.........................................................................................................\n  urge 'Ω__29', a = ( regex 'y' )\"(?<name>[a-z]+)\"\n  urge 'Ω__30', b = ( regex 'y' )\"#{a}\\s+in\\s+(?<place>[a-z]+)\"\n  if ( match = \"alice in cairo\".match b )?\n    info 'Ω__31', { match.groups..., }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_lexer_2 = ->\n  { partial, regex, } = require 'regex'\n  { f } = require '../../../apps/effstring'\n  rx    = regex 'y'\n  patterns = {\n    name:             { re: rx\"(?<initial>[A-Z])[a-z]*\", }\n    number:           { re: rx\"[0-9]+\",                  }\n    sq_string_start:  { re: rx\"(?!<\\\\)'\",                }\n    paren_start:      { re: rx\"\\(\",                      }\n    paren_stop:       { re: rx\"\\)\",                      }\n    other:            { re: rx\"[A-Za-z0-9]+\",            }\n    ws:               { re: rx\"\\s+\",                     }\n    }\n  urge 'Ω__32', patterns\n  #.........................................................................................................\n  tokenize = ( text ) ->\n    stop      = 0\n    info 'Ω__33', rpr text\n    loop\n      for name, { re, } of patterns\n        # debug 'Ω__34', f\"#{name}:>20c;: #{re}\"\n        hit           = null\n        re.lastIndex  = stop\n        if ( match = text.match re )?\n          break\n      break unless match?\n      hit       = match[ 0 ]\n      start     = stop\n      stop     += hit.length\n      help 'Ω__35', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{name}:>20c;: #{rpr hit}:<30c; #{rpr { ( match.groups ? {} )..., }}\"\n    return null\n  #.........................................................................................................\n  texts = [\n    \"Alice in Cairo 1912 (approximately)\"\n    \"Alice in Cairo 1912 'approximately'\"\n    ]\n  #.........................................................................................................\n  for text in texts\n    tokenize text\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_lexer_2 = ->\n  { partial, regex, } = require 'regex'\n  { f } = require '../../../apps/effstring'\n  rx    = regex 'y'\n  #===========================================================================================================\n  class Token\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( name, cfg ) ->\n      @name = name\n      @re   = cfg.re\n      @jump = cfg.jump ? null\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    match_at: ( start, text ) ->\n      @re.lastIndex = start\n      return null unless ( match = text.match @re )?\n      return new Lexeme @, match\n\n\n  #===========================================================================================================\n  class Lexeme\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( token, match ) ->\n      @name   = token.name\n      @hit    = match[ 0 ]\n      @start  = match.index\n      @stop   = @start + @hit.length\n      @groups = match.groups ? null\n      return undefined\n\n\n  #===========================================================================================================\n  level = [\n    new Token 'name',            { re: rx\"(?<initial>[A-Z])[a-z]*\", }\n    new Token 'number',          { re: rx\"[0-9]+\",                  }\n    new Token 'sq_string_start', { re: rx\"(?!<\\\\)'\",                jump: '[string', }\n    new Token 'paren_start',     { re: rx\"\\(\",                      }\n    new Token 'paren_stop',      { re: rx\"\\)\",                      }\n    new Token 'other',           { re: rx\"[A-Za-z0-9]+\",            }\n    new Token 'ws',              { re: rx\"\\s+\",                     }\n    ]\n  #.........................................................................................................\n  debug 'Ω__36', level\n  tokenize = ( text ) ->\n    start   = 0\n    info 'Ω__37', rpr text\n    loop\n      lexeme  = null\n      for token in level\n        if ( lexeme = token.match_at start, text )?\n          break\n      break unless lexeme?\n      { name\n        stop\n        hit\n        groups  } = lexeme\n      groups_rpr  = if groups? then ( rpr { groups..., } ) else ''\n      help 'Ω__38', f\"#{start}:>3.0f;:#{stop}:<3.0f; #{name}:>20c;: #{rpr hit}:<30c; #{groups_rpr}\"\n      start     = stop\n    return null\n  #.........................................................................................................\n  texts = [\n    \"Alice in Cairo 1912 (approximately)\"\n    \"Alice in Cairo 1912 'approximately'\"\n    ]\n  #.........................................................................................................\n  for text in texts\n    tokenize text\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_1()\n  demo_lexer_2()\n"
  ]
}