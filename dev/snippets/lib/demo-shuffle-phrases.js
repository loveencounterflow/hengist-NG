(async function() {
  'use strict';
  var GUY, debug, echo, factorial, info, inspect, reverse, rpr, shuffle_phrases, types, urge, warn;

  //===========================================================================================================
  GUY = require('guy');

  ({rpr, inspect, echo, reverse} = GUY.trm);

  ({info, warn, urge, debug} = GUY.trm.get_loggers('demo-shuffle-phrases'));

  types = new (require('../../../apps/intertype')).Intertype();

  //-----------------------------------------------------------------------------------------------------------
  shuffle_phrases = function({text, shuffler}) {
    var R, i, idx, last_idx, phrase, phrases, ref;
    types.validate.nonempty.text(text);
    types.validate.function(shuffler != null ? shuffler : shuffler = GUY.rnd.shuffle.bind(GUY.rnd));
    text = text.trim();
    phrases = (function() {
      var results;
      results = [];
      for (phrase of text.matchAll(/[^.;]+(?:[.;]|$)/g)) {
        results.push(phrase[0]);
      }
      return results;
    })();
    last_idx = phrases.length - 1;
    if (!/[.;]$/.test(phrases[last_idx])) {
      phrases[last_idx] += ';';
    }
    for (idx = i = 0, ref = last_idx; (0 <= ref ? i <= ref : i >= ref); idx = 0 <= ref ? ++i : --i) {
      phrases[idx] = (phrases[idx].startsWith(' ') ? '' : ' ') + phrases[idx];
    }
    R = ((shuffler(phrases)).join('')).trim();
    R = R.replace(/[\s.;]$/, '');
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  factorial = function(n) {
    if (n <= 1) {
      return 1;
    } else {
      return (factorial(n - 1)) * n;
    }
  };

  //===========================================================================================================
  if (module === require.main) {
    await (() => {
      var _, candidate, i, known, paragon, text;
      // debug 'Ω___1', factorial i for i in [ 0 ... 100 ]
      text = process.argv[2];
      paragon = shuffle_phrases({
        text,
        shuffler: (function(x) {
          return x;
        })
      });
      echo(GUY.trm.grey(paragon));
      known = new Set();
      for (_ = i = 1; i <= 10; _ = ++i) {
        echo();
        candidate = shuffle_phrases({text});
        if (candidate === paragon) {
          warn('Ω___1', "same");
          continue;
        }
        if (known.has(candidate)) {
          warn('Ω___1', "repetition");
          continue;
        }
        known.add(candidate);
        echo(candidate);
      }
      return null;
    })();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlbW8tc2h1ZmZsZS1waHJhc2VzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTtFQUFBO0FBQUEsTUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLGVBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUE7OztFQUdBLEdBQUEsR0FBNEIsT0FBQSxDQUFRLEtBQVI7O0VBQzVCLENBQUEsQ0FBRSxHQUFGLEVBQ0UsT0FERixFQUVFLElBRkYsRUFHRSxPQUhGLENBQUEsR0FHNEIsR0FBRyxDQUFDLEdBSGhDOztFQUlBLENBQUEsQ0FBRSxJQUFGLEVBQ0UsSUFERixFQUVFLElBRkYsRUFHRSxLQUhGLENBQUEsR0FHNEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFSLENBQW9CLHNCQUFwQixDQUg1Qjs7RUFJQSxLQUFBLEdBQTRCLElBQUksQ0FBRSxPQUFBLENBQVEseUJBQVIsQ0FBRixDQUFxQyxDQUFDLFNBQTFDLENBQUEsRUFaNUI7OztFQWdCQSxlQUFBLEdBQWtCLFFBQUEsQ0FBQyxDQUFFLElBQUYsRUFBUSxRQUFSLENBQUQsQ0FBQTtBQUNsQixRQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBO0lBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBeEIsQ0FBNkIsSUFBN0I7SUFDQSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQWYsb0JBQXdCLFdBQUEsV0FBWSxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFoQixDQUFxQixHQUFHLENBQUMsR0FBekIsQ0FBcEM7SUFDQSxJQUFBLEdBQXdCLElBQUksQ0FBQyxJQUFMLENBQUE7SUFDeEIsT0FBQTs7QUFBMEI7TUFBQSxLQUFBLDRDQUFBO3FCQUFBLE1BQU0sQ0FBRSxDQUFGO01BQU4sQ0FBQTs7O0lBQzFCLFFBQUEsR0FBd0IsT0FBTyxDQUFDLE1BQVIsR0FBaUI7SUFDekMsS0FBbUMsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFPLENBQUUsUUFBRixDQUFwQixDQUFuQztNQUFBLE9BQU8sQ0FBRSxRQUFGLENBQVAsSUFBd0IsSUFBeEI7O0lBQ0EsS0FBVyx5RkFBWDtNQUNFLE9BQU8sQ0FBRSxHQUFGLENBQVAsR0FBaUIsQ0FBSyxPQUFPLENBQUUsR0FBRixDQUFPLENBQUMsVUFBZixDQUEwQixHQUExQixDQUFILEdBQXNDLEVBQXRDLEdBQThDLEdBQWhELENBQUEsR0FBd0QsT0FBTyxDQUFFLEdBQUY7SUFEbEY7SUFFQSxDQUFBLEdBQXdCLENBQUUsQ0FBRSxRQUFBLENBQVMsT0FBVCxDQUFGLENBQW9CLENBQUMsSUFBckIsQ0FBMEIsRUFBMUIsQ0FBRixDQUFnQyxDQUFDLElBQWpDLENBQUE7SUFDeEIsQ0FBQSxHQUF3QixDQUFDLENBQUMsT0FBRixDQUFVLFNBQVYsRUFBcUIsRUFBckI7QUFDeEIsV0FBTztFQVhTLEVBaEJsQjs7O0VBOEJBLFNBQUEsR0FBWSxRQUFBLENBQUUsQ0FBRixDQUFBO0lBQVMsSUFBRyxDQUFBLElBQUssQ0FBUjthQUFlLEVBQWY7S0FBQSxNQUFBO2FBQXNCLENBQUUsU0FBQSxDQUFVLENBQUEsR0FBSSxDQUFkLENBQUYsQ0FBQSxHQUFzQixFQUE1Qzs7RUFBVCxFQTlCWjs7O0VBa0NBLElBQUcsTUFBQSxLQUFVLE9BQU8sQ0FBQyxJQUFyQjtJQUErQixNQUFTLENBQUEsQ0FBQSxDQUFBLEdBQUE7QUFDeEMsVUFBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLElBQUE7O01BQ0UsSUFBQSxHQUFVLE9BQU8sQ0FBQyxJQUFJLENBQUUsQ0FBRjtNQUN0QixPQUFBLEdBQVUsZUFBQSxDQUFnQjtRQUFFLElBQUY7UUFBUSxRQUFBLEVBQVUsQ0FBRSxRQUFBLENBQUUsQ0FBRixDQUFBO2lCQUFTO1FBQVQsQ0FBRjtNQUFsQixDQUFoQjtNQUNWLElBQUEsQ0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQVIsQ0FBYSxPQUFiLENBQUw7TUFDQSxLQUFBLEdBQVUsSUFBSSxHQUFKLENBQUE7TUFDVixLQUFTLDJCQUFUO1FBQ0UsSUFBQSxDQUFBO1FBQ0EsU0FBQSxHQUFZLGVBQUEsQ0FBZ0IsQ0FBRSxJQUFGLENBQWhCO1FBQ1osSUFBRyxTQUFBLEtBQWEsT0FBaEI7VUFDRSxJQUFBLENBQUssT0FBTCxFQUFjLE1BQWQ7QUFDQSxtQkFGRjs7UUFHQSxJQUFHLEtBQUssQ0FBQyxHQUFOLENBQVUsU0FBVixDQUFIO1VBQ0UsSUFBQSxDQUFLLE9BQUwsRUFBYyxZQUFkO0FBQ0EsbUJBRkY7O1FBR0EsS0FBSyxDQUFDLEdBQU4sQ0FBVSxTQUFWO1FBQ0EsSUFBQSxDQUFLLFNBQUw7TUFWRjtBQVdBLGFBQU87SUFqQitCLENBQUEsSUFBeEM7O0FBbENBIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuJ3VzZSBzdHJpY3QnXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuR1VZICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2d1eSdcbnsgcnByXG4gIGluc3BlY3RcbiAgZWNob1xuICByZXZlcnNlIH0gICAgICAgICAgICAgICA9IEdVWS50cm1cbnsgaW5mb1xuICB3YXJuXG4gIHVyZ2VcbiAgZGVidWcgfSAgICAgICAgICAgICAgICAgPSBHVVkudHJtLmdldF9sb2dnZXJzICdkZW1vLXNodWZmbGUtcGhyYXNlcydcbnR5cGVzICAgICAgICAgICAgICAgICAgICAgPSBuZXcgKCByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2ludGVydHlwZScgKS5JbnRlcnR5cGUoKVxuXG5cbiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuc2h1ZmZsZV9waHJhc2VzID0gKHsgdGV4dCwgc2h1ZmZsZXIsIH0pIC0+XG4gIHR5cGVzLnZhbGlkYXRlLm5vbmVtcHR5LnRleHQgdGV4dFxuICB0eXBlcy52YWxpZGF0ZS5mdW5jdGlvbiBzaHVmZmxlciA/PSBHVVkucm5kLnNodWZmbGUuYmluZCBHVVkucm5kXG4gIHRleHQgICAgICAgICAgICAgICAgICA9IHRleHQudHJpbSgpXG4gIHBocmFzZXMgICAgICAgICAgICAgICA9ICggcGhyYXNlWyAwIF0gZm9yIHBocmFzZSBmcm9tIHRleHQubWF0Y2hBbGwgL1teLjtdKyg/OlsuO118JCkvZyApXG4gIGxhc3RfaWR4ICAgICAgICAgICAgICA9IHBocmFzZXMubGVuZ3RoIC0gMVxuICBwaHJhc2VzWyBsYXN0X2lkeCBdICArPSAnOycgdW5sZXNzIC9bLjtdJC8udGVzdCBwaHJhc2VzWyBsYXN0X2lkeCBdXG4gIGZvciBpZHggaW4gWyAwIC4uIGxhc3RfaWR4IF1cbiAgICBwaHJhc2VzWyBpZHggXSA9ICggaWYgcGhyYXNlc1sgaWR4IF0uc3RhcnRzV2l0aCAnICcgdGhlbiAnJyBlbHNlICcgJyApICsgcGhyYXNlc1sgaWR4IF1cbiAgUiAgICAgICAgICAgICAgICAgICAgID0gKCAoIHNodWZmbGVyIHBocmFzZXMgKS5qb2luICcnICkudHJpbSgpXG4gIFIgICAgICAgICAgICAgICAgICAgICA9IFIucmVwbGFjZSAvW1xccy47XSQvLCAnJ1xuICByZXR1cm4gUlxuXG4jLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZhY3RvcmlhbCA9ICggbiApIC0+IGlmIG4gPD0gMSB0aGVuIDEgZWxzZSAoIGZhY3RvcmlhbCBuIC0gMSApICogblxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuaWYgbW9kdWxlIGlzIHJlcXVpcmUubWFpbiB0aGVuIGF3YWl0IGRvID0+XG4gICMgZGVidWcgJ86pX19fMScsIGZhY3RvcmlhbCBpIGZvciBpIGluIFsgMCAuLi4gMTAwIF1cbiAgdGV4dCAgICA9IHByb2Nlc3MuYXJndlsgMiBdXG4gIHBhcmFnb24gPSBzaHVmZmxlX3BocmFzZXMgeyB0ZXh0LCBzaHVmZmxlcjogKCAoIHggKSAtPiB4ICksIH1cbiAgZWNobyBHVVkudHJtLmdyZXkgcGFyYWdvblxuICBrbm93biAgID0gbmV3IFNldCgpXG4gIGZvciBfIGluIFsgMSAuLiAxMCBdXG4gICAgZWNobygpXG4gICAgY2FuZGlkYXRlID0gc2h1ZmZsZV9waHJhc2VzIHsgdGV4dCwgfVxuICAgIGlmIGNhbmRpZGF0ZSBpcyBwYXJhZ29uXG4gICAgICB3YXJuICfOqV9fXzEnLCBcInNhbWVcIlxuICAgICAgY29udGludWVcbiAgICBpZiBrbm93bi5oYXMgY2FuZGlkYXRlXG4gICAgICB3YXJuICfOqV9fXzEnLCBcInJlcGV0aXRpb25cIlxuICAgICAgY29udGludWVcbiAgICBrbm93bi5hZGQgY2FuZGlkYXRlXG4gICAgZWNobyBjYW5kaWRhdGVcbiAgcmV0dXJuIG51bGxcblxuXG4iXX0=
//# sourceURL=../src/demo-shuffle-phrases.coffee