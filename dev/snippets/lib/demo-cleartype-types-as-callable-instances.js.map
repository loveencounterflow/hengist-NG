{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-types-as-callable-instances.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,wBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,gEAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA,cAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA;IAAA,oBAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC,EAbA;;;;EAoBA,IAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,IAA5B,EArBA;;;EAuBA,CAAA,CAAE,CAAF,CAAA,GAA4B,OAAA,CAAQ,yBAAR,CAA5B,EAvBA;;;EAyBA,CAAA,CAAE,GAAF,EACE,IADF,EAEE,IAFF,EAGE,KAHF,EAIE,IAJF,EAKE,OALF,CAAA,GAK4B,GAAG,CAAC,GALhC,EAzBA;;;EAgCA,cAAA,GAAiB,MAAM,CAAC,MAAP,CAAc,CAAE,IAAF,EAAU,MAAM,CAAC,cAAP,CAAsB,CAAA,CAAtB,CAAV,CAAd;;EACjB,GAAA,GACE;IAAA,IAAA,EAAY;MAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB;IAAL,CAAZ;IACA,QAAA,EAAY;MAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB;IAAL,CADZ;IAEA,GAAA,EAAY;MAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;eAAC,WAAA,WAAS,MAAM,CAAC,cAAP,CAAsB,CAAtB,gBAA6B,gBAA/B;MAAhB;IAAL,CAFZ;IAGA,IAAA,EAAY;MAAA,GAAA,EAAK,QAAA,CAAE,CAAF,CAAA;eAAS,KAAK,CAAC,OAAN,CAAc,CAAd;MAAT;IAAL;EAHZ,EAlCF;;;EAyCM,2BAAN,MAAA,yBAAA,QAAuC,MAAvC,CAAA,EAzCA;;;EA6CM,UAAN,MAAA,QAAA,CAAA;;IAGE,uBAAyB,CAAE,EAAF,CAAA,EAAA;;;;;;AAC3B,UAAA,CAAA,EAAA,KAAA,EAAA;MAKI,MAAA,GAAS,EAAE,CAAC,QAAH,CAAA,CAAa,CAAC,OAAd,CAAsB,QAAtB,EAAsC,MAAtC;MACT,IAAO,qEAAP;QACE,MAAM,IAAI,wBAAJ,CAA6B,CAAA,iCAAA,CAAA,CAAoC,GAAA,CAAI,MAAJ,CAApC,CAAA,CAA7B,EADR;;MAEA,CAAA,GAAI,KAAK,CAAC,MAAM,CAAC;AACjB,aAAO;IAVgB,CAD3B;;;IAcE,iBAAmB,CAAE,EAAF,CAAA,EAAA;;;AACrB,UAAA;MAEI,CAAA,GAAI,IAAC,CAAA,uBAAD,CAAyB,EAAzB;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,QAAV,EAA+B,MAA/B;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,OAAV,EAA+B,KAA/B;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,SAAV,EAA+B,IAA/B;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,MAAV,EAA+B,KAA/B;AACJ,aAAO;IARU,CAdrB;;;IAyBE,oBAAsB,CAAE,EAAF,CAAA;aAAU,IAAC,CAAA,iBAAD,CAAmB,iBAAA,CAAkB,EAAlB,CAAnB;IAAV,CAzBxB;;;IA4BE,iBAAmB,CAAE,OAAF,CAAA;AACrB,UAAA;MAAI,CAAA,GAAI,OAAO,CAAC,OAAR,CAAgB,mBAAhB,EAAwD,GAAxD;MACJ,CAAA,GAAI,CAAC,CAAC,OAAF,CAAgB,yBAAhB,EAAwD,WAAxD;AACJ,aAAO;IAHU;;EA9BrB;;EAmCA,GAAA,GAAM,IAAI,OAAJ,CAAA,EAhFN;;;EAoFM,YAAN,MAAA,UAAA,CAAA,EApFA;;;EAuFM,OAAN,MAAA,KAAA,CAAA;;IAGE,WAAa,CAAE,MAAM,IAAR,CAAA;AACX,aAAO;IADI;;EAHf,EAvFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiIA,gEAAA,GAAmE,QAAA,CAAA,CAAA;AACnE,QAAA,iBAAA,EAAA,GAAA,EAAA,YAAA,EAAA,IAAA,EAAA,qBAAA,EAAA,MAAA,EAAA,EAAA,EAAA,QAAA;;IACE,EAAA,GAGE,CAAA;;;MAAA,QAAA,EAAU;QAAE,GAAA,EAAK,CAAE,QAAA,CAAE,CAAF,CAAA;iBAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;QAAzB,CAAF;MAAP,CAAV;;;MAGA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB,CAHR;;;MAMA,IAAA,EAAM,QANN;;;MASA,aAAA,EAAe;QACX,MADW;QAEX,QAAA,CAAE,CAAF,CAAA;iBAAW,kBAAkB,CAAC,IAAnB,CAAwB,CAAxB;QAAX,CAFW;OATf;;;MAeA,KAAA,EAAO;QAAE,GAAA,EAAK;MAAP,CAfP;;;MAkBA,EAAA,EAAI;QACF,GAAA,EAAK;UACH,MADG;UAEH,QAAA,CAAE,CAAF,CAAA;mBAAW,kBAAkB,CAAC,IAAnB,CAAwB,CAAxB;UAAX,CAFG;;MADH;IAlBJ,EAJJ;;IA6BE,KAAA,CAAM,SAAN,EAAiB,GAAG,CAAC,GAAG,CAAC,GAAR,CAAY,CAAA,CAAZ,CAAjB;IACA,KAAA,CAAM,SAAN,EAAiB,GAAG,CAAC,GAAG,CAAC,GAAR,CAAY,MAAM,CAAC,MAAP,CAAc,IAAd,CAAZ,CAAjB;IACA,qBAAA,GAAwB,QAAA,CAAE,EAAF,EAAM,QAAN,EAAgB,GAAhB,CAAA;AAC1B,UAAA;MACI,KAAsD,GAAG,CAAC,GAAG,CAAC,GAAR,CAAY,GAAZ,CAAtD;QAAA,GAAA,GAAc,CAAK,CAAA,QAAA,CAAE,GAAF,CAAA;iBAAiB,CAAE,GAAF;QAAjB,CAAA,EAAQ,IAAb,EAAd;;MAEA,KAA0D,GAAG,CAAC,IAAI,CAAC,GAAT,CAAa,GAAG,CAAC,GAAjB,CAA1D;;QAAA,GAAG,CAAC,GAAJ,GAAc,CAAK,CAAA,QAAA,CAAE,GAAF,CAAA;iBAAqB,CAAE,GAAF;QAArB,CAAA,EAAQ,GAAG,CAAC,IAAjB,EAAd;;MACA,OAAA,GAAc,GAAG,CAAC;AAClB,aAAO;IANe,EA/B1B;;IAuCE,KAAA,cAAA;;MACE,IAAA,GAAO,qBAAA,CAAsB,EAAtB,EAA0B,QAA1B,EAAoC,GAApC;MACP,IAAA,CAAK,CAAC,CAAA,CAAA,CAAG,IAAA,CAAK,QAAL,CAAH,CAAA,SAAA,CAAA,CAA4B,KAAA,CAAM,GAAA,CAAI,GAAJ,CAAN,CAA5B,CAAA,SAAA,CAAA,CAAqD,IAAA,CAAK,GAAA,CAAI,IAAJ,CAAL,CAArD,CAAA,MAAA,CAAN;IAFF;AAGA,WAAO,KA1CT;;IA4CE,iBAAA,GAAoB,QAAA,CAAE,EAAF,CAAA;AACtB,UAAA,cAAA,EAAA,CAAA,EAAA,WAAA,EAAA,GAAA,EAAA,OAAA,EAAA,OAAA,EAAA;AAAI;MAAA,KAAA,cAAA;;QACE,WAAA,GAAc,CAAA,EAApB;;QAEM,KAAA,CAAM,SAAN,EAAiB,SAAjB,EAA4B,GAAA,CAAI,OAAJ,CAA5B;QACA,KAAA,yCAAA;;UACE,KAAA,CAAM,SAAN,EAAiB,gBAAjB,EAAmC,GAAA,CAAI,cAAJ,CAAnC,EAAR;;;UAGQ,IAAK,GAAG,CAAC,IAAI,CAAC,GAAT,CAAa,cAAb,CAAL;YACE,cAAA,GAAoB,CAAA,QAAA,CAAE,YAAF,CAAA;cAClB,KAAO,OAAO,CAAC,GAAR,CAAY,EAAZ,EAAgB,YAAhB,CAAP;gBACE,MAAM,IAAI,KAAJ,CAAU,CAAA,0BAAA,CAAA,CAA6B,GAAA,CAAI,YAAJ,CAA7B,CAAA,eAAA,CAAA,CAA+D,GAAA,CAAI,QAAJ,CAA/D,CAAA,CAAV,EADR;;AAEA,qBAAO,EAAE,CAAE,YAAF,CAAgB,CAAC;YAHR,CAAA,EAAiB,gBADvC;WAHR;;UASQ,KAAO,GAAG,CAAC,QAAQ,CAAC,GAAb,CAAiB,cAAjB,CAAP;YACE,MAAM,IAAI,KAAJ,CAAU,CAAA,iCAAA,CAAA,CAAoC,GAAA,CAAI,cAAJ,CAApC,CAAA,CAAV,EADR;WATR;;UAYQ,OAAA,GAAsB,GAAG,CAAC,iBAAJ,CAAsB,cAAtB,EAZ9B;;UAcQ,SAAA,GAAsB,CAAA,CAAA,CAAG,QAAH,CAAA,CAAA,CAAA,CAAe,GAAA,CAAI,OAAJ,CAAf,CAAA,CAAA;UACtB,IAAoC,cAAc,CAAC,IAAf,KAAuB,EAA3D;YAAA,MAAA,CAAO,SAAP,EAAkB,cAAlB,EAAA;;UACA,WAAW,CAAE,SAAF,CAAX,GAA2B;QAjB7B,CAHN;;qBAsBM,EAAE,CAAE,QAAF,CAAY,CAAC,GAAf,GAAwB,CAAA,QAAA,CAAE,QAAF,EAAY,WAAZ,CAAA;iBAA6B,QAAA,CAAE,CAAF,EAAK,SAAS,IAAd,CAAA;AAC3D,gBAAA,UAAA,EAAA;YAAQ,KAAA,mBAAA;;cACE,KAAO,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,CAAtB,EAAyB,MAAzB,CAAP;gBACE,IAAe,cAAf;kBAAA,MAAA,CAAO,IAAP,EAAA;;AACA,uBAAO,MAFT;;YADF;AAIA,mBAAO;UAL4C;QAA7B,CAAA,EAAE,UAAU;MAvBtC,CAAA;;IADkB,EA5CtB;;IA2EE,iBAAA,CAAkB,EAAlB;IACA,KAAA,cAAA;;MACE,IAAA,CAAK,SAAL,EAAgB,QAAhB,EAA0B,GAAG,CAAC,GAA9B;IADF,CA5EF;;;;IAiFE,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,KAAV,CAAhB;IACA,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,KAAV,CAAhB;IACA,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,QAAV,CAAhB;IACA,YAAA,GAAe;IACf,MAAA,GAAS,QAAA,CAAE,IAAF,CAAA;aAAY,YAAY,CAAC,IAAb,CAAkB,IAAlB;IAAZ;IACT,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,KAAV,EAAoB,MAApB,CAAhB;IAA4C,IAAA,CAAK,SAAL,EAAgB,YAAhB;IAA8B,YAAY,CAAC,MAAb,GAAsB;IAChG,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,KAAV,EAAoB,MAApB,CAAhB;IAA4C,IAAA,CAAK,SAAL,EAAgB,YAAhB;IAA8B,YAAY,CAAC,MAAb,GAAsB;IAChG,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,GAAV,EAAoB,MAApB,CAAhB;IAA4C,IAAA,CAAK,SAAL,EAAgB,YAAhB;IAA8B,YAAY,CAAC,MAAb,GAAsB;IAChG,IAAA,CAAK,SAAL,EAAgB,EAAE,CAAC,EAAE,CAAC,GAAN,CAAU,QAAV,EAAoB,MAApB,CAAhB;IAA4C,IAAA,CAAK,SAAL,EAAgB,YAAhB;IAA8B,YAAY,CAAC,MAAb,GAAsB;AAChG,WAAO;EA3F0D,EAjInE;;;EAgOA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA,EAAA;;;;aAItC,gEAAA,CAAA;IAJsC,CAAA,IAAxC;;AAhOA",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\n#...........................................................................................................\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n#...........................................................................................................\n{ f }                     = require '../../../apps/effstring'\n#...........................................................................................................\n{ red\n  gold\n  bold\n  white\n  lime\n  reverse               } = GUY.trm\n#...........................................................................................................\npod_prototypes = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\ngnd =\n  text:       isa: ( x ) -> ( typeof x ) is 'string'\n  function:   isa: ( x ) -> ( typeof x ) is 'function'\n  pod:        isa: ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n  list:       isa: ( x ) -> Array.isArray x\n\n\n#===========================================================================================================\nclass Unparsable_function_body extends Error\n\n\n#===========================================================================================================\nclass Revalex\n\n  #---------------------------------------------------------------------------------------------------------\n  get_return_value_source: ( fn ) ->\n    ### TAINT use JS tokenizer ###\n    ### NOTE restrictions:\n    * catches only last `return` statement, even if unreachable\n    * may misinterpret string literals, comments as source code\n    ###\n    source = fn.toString().replace /// \\s+ ///gsv, '\\x20'\n    unless ( match = source.match ///^ .* \\b return \\s (?<revalex> [^ ; ]+ ) .* $///sv )?\n      throw new Unparsable_function_body \"Î©tt___1 unable to parse function #{rpr source}\"\n    R = match.groups.revalex\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  normalize_revalex: ( fn ) ->\n    ### NOTE `revalex` short for '**RE**turn **VA**Lue **EX**pression' ###\n    ### TAINT use JS tokenizer ###\n    R = @get_return_value_source fn\n    R = R.replace ///  !==     ///gsv, 'isnt'\n    R = R.replace ///  &&      ///gsv, 'and'\n    R = R.replace ///  \\|\\|    ///gsv, 'or'\n    R = R.replace ///  !       ///gsv, 'not'\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  name_from_fn_revalex: ( fn ) -> @name_from_revalex normalize_revalex fn\n\n  #---------------------------------------------------------------------------------------------------------\n  name_from_revalex: ( revalex ) ->\n    R = revalex.replace /// [^ a-z A-Z 0-9 _ ]+         ///gsv, '_'\n    R = R.replace       ///^ _* (?<center> .*? ) _* $   ///gsv, '$<center>'\n    return R\n\nRVX = new Revalex()\n\n\n#===========================================================================================================\nclass Typespace\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg = null ) ->\n    return undefined\n\n# do =>\n#     rvx = ( fn ) -> normalize_revalex fn\n#     ts =\n#       id:\n#         isa: [\n#           ( x ) -> ( typeof x ) is 'string'\n#           ( x ) -> ( /^[a-z][a-z0-9]*$/.test x )\n#           ]\n#     for typename, dcl of ts\n#       unless Array.isArray dcl.isa\n#         throw new Error \"Î©tt___2 expected a list\"\n#       isa_parts = {}\n#       for fn in dcl.isa\n#         unless gnd.function.isa fn\n#           throw new Error \"Î©tt___3 expected a function, got #{rpr fn}\"\n#         revalex               = normalize_revalex fn\n#         fn[RVX]               = revalex\n#         test_name             = \"#{typename}[#{rpr revalex}]\"\n#         # debug 'Î©tt___4', ( rpr ( -> ).name ), fn\n#         # debug 'Î©tt___5', ( rpr ( => ).name ), fn\n#         # debug 'Î©tt___6', ( rpr fn.name ), fn\n#         nameit test_name, fn if fn.name is ''\n#         isa_parts[ test_name ] = fn\n#       for name, fn of isa_parts\n#         help 'Î©tt___7', f\"#{rpr name}:<30c; | #{fn}\"\n#       isa = do ( typename, isa_parts ) -> ( x, record = null ) ->\n#         for name, partial of isa_parts\n#           unless partial.call null, x\n#             if record?\n#               # record typename\n#               record name\n#             return false\n#         return true\n\n\n#===========================================================================================================\ndemo_turning_lists_of_functions_into_objects_with_sensible_names = ->\n  #.........................................................................................................\n  ts =\n    #.......................................................................................................\n    ### Declare by DCL object whose `isa` property is a function: ###\n    function: { isa: ( ( x ) -> ( typeof x ) is 'function' ), }\n    #.......................................................................................................\n    ### Declare by 'immediate' function: ###\n    string: ( x ) -> ( typeof x ) is 'string'\n    #.......................................................................................................\n    ### Declare by 'immediate' reference to name of existing type: ###\n    text: 'string'\n    #.......................................................................................................\n    ### Declare by 'immediate' list of clauses: ###\n    nonempty_text: [\n        'text'\n        ( x ) -> ( /^[a-z][a-z0-9]*$/.test x )\n        ]\n    #.......................................................................................................\n    ### Declare by DCL object whose `isa` property is a reference to name of existing type: ###\n    spork: { isa: 'nonempty_text', }\n    #.......................................................................................................\n    ### Declare by DCL object whose `isa` property is a list of clauses: ###\n    id: {\n      isa: [\n        'text'\n        ( x ) -> ( /^[a-z][a-z0-9]*$/.test x )\n        ]\n      }\n  #.......................................................................................................\n  debug 'Î©tt___8', gnd.pod.isa {}\n  debug 'Î©tt___9', gnd.pod.isa Object.create null\n  normalize_declaration = ( ts, typename, dcl ) ->\n    ### Convert 'isa-only' declarations into objects with explicit `isa`: ###\n    dcl         = ( do ( isa = dcl ) -> { isa, } ) unless gnd.pod.isa dcl\n    ### Convert singular `isa` declarations into list of clauses: ###\n    dcl.isa     = ( do ( isa = dcl.isa ) -> [ isa, ] ) unless gnd.list.isa dcl.isa\n    dcl_isa     = dcl.isa\n    return dcl\n  #.......................................................................................................\n  for typename, dcl of ts\n    ndcl = normalize_declaration ts, typename, dcl\n    echo f\"#{gold typename}:<15c; | #{white rpr dcl}:<60c; | #{lime rpr ndcl}:<60c;\"\n  return null\n  #.......................................................................................................\n  compile_typespace = ( ts ) ->\n    for typename, dcl of ts\n      isa_clauses = {}\n      #...................................................................................................\n      debug 'Î©tt__10', 'dcl_isa', rpr dcl_isa\n      for dcl_isa_clause in dcl_isa\n        debug 'Î©tt__11', 'dcl_isa_clause', rpr dcl_isa_clause\n        #.................................................................................................\n        ### De-reference referenced type: ###\n        if ( gnd.text.isa dcl_isa_clause )\n          dcl_isa_clause = do ( ref_typename = dcl_isa_clause ) ->\n            unless Reflect.has ts, ref_typename\n              throw new Error \"Î©tt__12 unable to resolve #{rpr ref_typename} referenced by #{rpr typename}\"\n            return ts[ ref_typename ].isa\n        #.................................................................................................\n        unless gnd.function.isa dcl_isa_clause\n          throw new Error \"Î©tt__13 expected a function, got #{rpr dcl_isa_clause}\"\n        #.................................................................................................\n        revalex             = RVX.normalize_revalex dcl_isa_clause\n        # dcl_isa_clause[RVX] = revalex\n        test_name           = \"#{typename}[#{rpr revalex}]\"\n        nameit test_name, dcl_isa_clause if dcl_isa_clause.name is ''\n        isa_clauses[ test_name ] = dcl_isa_clause\n      #...................................................................................................\n      ts[ typename ].isa = do ( typename, isa_clauses ) -> ( x, record = null ) ->\n        for name, isa_clause of isa_clauses\n          unless isa_clause.call null, x, record\n            record name if record?\n            return false\n        return true\n  #.......................................................................................................\n  compile_typespace ts\n  for typename, dcl of ts\n    info 'Î©tt__14', typename, dcl.isa\n    # for name, dcl_isa_clause of isa_clauses\n    #   help 'Î©tt__15', f\"#{rpr name}:<30c; | #{dcl_isa_clause}\"\n  #.......................................................................................................\n  info 'Î©tt__16', ts.id.isa 'abc'\n  info 'Î©tt__17', ts.id.isa '123'\n  info 'Î©tt__18', ts.id.isa 'abc123'\n  failed_tests = []\n  record = ( name ) -> failed_tests.push name\n  info 'Î©tt__19', ts.id.isa 'abc',    record; urge 'Î©tt__20', failed_tests; failed_tests.length = 0\n  info 'Î©tt__21', ts.id.isa '123',    record; urge 'Î©tt__22', failed_tests; failed_tests.length = 0\n  info 'Î©tt__23', ts.id.isa 123,      record; urge 'Î©tt__24', failed_tests; failed_tests.length = 0\n  info 'Î©tt__25', ts.id.isa 'abc123', record; urge 'Î©tt__26', failed_tests; failed_tests.length = 0\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # guytest_cfg = { throw_on_error: true,   show_passes: true,  report_checks: false, }\n  # # guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test @nfa_tasks\n  demo_turning_lists_of_functions_into_objects_with_sensible_names()\n"
  ]
}