{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-types-as-callable-instances.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\n#...........................................................................................................\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n#...........................................................................................................\n{ f }                     = require '../../../apps/effstring'\n#...........................................................................................................\n{ red\n  gold\n  bold\n  white\n  lime\n  reverse               } = GUY.trm\ntruth                     = ( x ) -> GUY.trm.truth x\n\n#===========================================================================================================\npod_prototypes = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\ngnd =\n  text:       isa: ( x ) -> ( typeof x ) is 'string'\n  function:   isa: ( x ) -> ( typeof x ) is 'function'\n  pod:        isa: ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n  list:       isa: ( x ) -> Array.isArray x\n  type:       isa: ( x ) -> x instanceof Type\n#...........................................................................................................\n# { hide }  = GUY.props\nnameit    = ( name, f ) -> Object.defineProperty f, 'name', { value: name, }\n\n#===========================================================================================================\nhide = ( object, name, value ) => Object.defineProperty object, name,\n    enumerable:   false\n    writable:     true\n    configurable: true\n    value:        value\n\n#===========================================================================================================\nhide_getter = ( object, name, getter ) => Object.defineProperty object, name,\n    enumerable:   false\n    configurable: true\n    get:          getter\n\n#===========================================================================================================\nset_getter = ( object, name, getter ) => Object.defineProperty object, name,\n    enumerable:   true\n    configurable: true\n    get:          getter\n\n\n#===========================================================================================================\nclass Unparsable_function_body extends Error\n\n\n#===========================================================================================================\nclass Revalex\n\n  #---------------------------------------------------------------------------------------------------------\n  revalex_from_function: ( fn ) ->\n    ### TAINT use JS tokenizer ###\n    ### NOTE restrictions:\n    * catches only last `return` statement, even if unreachable\n    * may misinterpret string literals, comments as source code\n    ###\n    source = fn.toString().replace /// \\s+ ///gsv, '\\x20'\n    unless ( match = source.match ///^ .* \\b return \\s (?<revalex> [^ ; ]+ ) .* $///sv )?\n      throw new Unparsable_function_body \"Ωtt___1 unable to parse function #{rpr source}\"\n    R = match.groups.revalex\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  normalize_revalex: ( fn ) ->\n    ### NOTE `revalex` short for '**RE**turn **VA**Lue **EX**pression' ###\n    ### TAINT use JS tokenizer ###\n    R = @revalex_from_function fn\n    R = R.replace ///  <=      ///gsv, 'lteq'\n    R = R.replace ///  >=      ///gsv, 'gteq'\n    R = R.replace ///  <       ///gsv, 'lt'\n    R = R.replace ///  >       ///gsv, 'gt'\n    R = R.replace ///  !==     ///gsv, 'isnt'\n    R = R.replace ///  &&      ///gsv, 'and'\n    R = R.replace ///  \\|\\|    ///gsv, 'or'\n    R = R.replace ///  !       ///gsv, 'not'\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  name_from_function: ( fn ) -> @name_from_revalex @normalize_revalex fn\n\n  #---------------------------------------------------------------------------------------------------------\n  name_from_revalex: ( revalex ) ->\n    R = revalex.replace /// [^ a-z A-Z 0-9 _ ]+         ///gsv, '_'\n    R = R.replace       ///^ _* (?<center> .*? ) _* $   ///gsv, '$<center>'\n    return R\n\nRVX = new Revalex()\ntypes_sym = Symbol.for 'types'\n\n\n#===========================================================================================================\nclass Typespace\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( tsname, dcls = null ) ->\n    @name = tsname\n    hide @, types_sym, []\n    if dcls?\n      for typename, dcl of dcls\n        @add_type typename, dcl\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  add_type: ( typename, dcl ) ->\n    if Reflect.has @, typename\n      throw new Error \"Ωtt___2 name clash #{rpr typename}\"\n    @[ typename ] = R = new Type @, typename, dcl\n    @[ types_sym ].push R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  [Symbol.iterator]: -> yield from @[ types_sym ]\n\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( typespace, typename, dcl ) ->\n    @name                     = typename\n    hide @, 'typespace',        typespace\n    hide @, 'dcl',              dcl\n    hide_getter @, 'fqname', => \"#{@typespace.name}.#{@name}\"\n    @_normalize_dcl()\n    hide @, 'isa_clauses',      @isa_clauses\n    # nameit \"#{typename}.isa()\", @isa\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: ( x ) ->\n    ### TAINT add reporting ###\n    for isa_clause in @isa_clauses\n      return false unless isa_clause x\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_dcl: ->\n    ### Convert 'isa-only' declarations into objects with explicit `isa`: ###\n    if gnd.pod.isa @dcl     then  dcl             = {       @dcl...,  }\n    else                          dcl             = { isa:  @dcl,     }\n    ### Convert singular `isa` declarations into list of clauses: ###\n    if gnd.list.isa dcl.isa then  @isa_clauses    = [ dcl.isa..., ]\n    else                          @isa_clauses    = [ dcl.isa,    ]\n    @_normalize_isa_clauses()\n    return dcl\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_isa_clauses: ->\n    for isa_clause, idx in @isa_clauses then do ( isa_clause, idx ) =>\n      #.....................................................................................................\n      ### De-reference referenced type: ###\n      if ( gnd.text.isa isa_clause )\n        @isa_clauses[ idx ] = do ( ref_typename = isa_clause ) =>\n          unless Reflect.has @typespace, ref_typename\n            throw new Error \"Ωtt___4 unable to resolve #{rpr ref_typename} referenced by #{rpr @name}\"\n          ref_type = @typespace[ ref_typename ]\n          return nameit \"#{ref_type.fqname}\", ( x ) -> ref_type.isa x\n      #.....................................................................................................\n      else if ( gnd.function.isa isa_clause )\n        null\n        # if isa_clause.name is ''\n        # nameit ( \"#{@fqname}[#{rpr revalex}]\" ), isa_clause\n        revalex = RVX.revalex_from_function isa_clause\n        nameit ( rpr revalex ), isa_clause\n      #.....................................................................................................\n      else if ( gnd.type.isa isa_clause )\n        @isa_clauses[ idx ] = do ( type = isa_clause ) =>\n          nameit \"#{type.fqname}\", ( x ) -> type.isa x\n      #.....................................................................................................\n      else if ( isa_clause? ) and ( Reflect.has isa_clause, 'isa' ) and ( gnd.function.isa isa_clause.isa )\n        @isa_clauses[ idx ] = do ( type = isa_clause ) =>\n          nameit \"#{type.fqname}\", ( x ) -> type.isa x\n      #.....................................................................................................\n      else\n        throw new Error \"Ωtt___5 unexpected type in ISA clause: #{rpr isa_clause}\"\n    return null\n\n\n#===========================================================================================================\ndemo_turning_lists_of_functions_into_objects_with_sensible_names = ->\n  #.........................................................................................................\n  one = new Typespace 'one',\n    float: ( x ) -> Number.isFinite x\n  #.........................................................................................................\n  ts = new Typespace 'ts',\n    #.......................................................................................................\n    ### Declare by DCL object whose `isa` property is a function: ###\n    function: { isa: ( ( x ) -> ( typeof x ) is 'function' ), }\n    #.......................................................................................................\n    ### Declare by 'immediate' function: ###\n    string: ( x ) -> ( typeof x ) is 'string'\n    #.......................................................................................................\n    ### Declare by 'immediate' reference to name of existing type: ###\n    text: 'string'\n    #.......................................................................................................\n    ### Declare by 'immediate' list of clauses: ###\n    nonempty_text: [\n        'text'\n        ( x ) -> x.length > 0 ]\n    #.......................................................................................................\n    ### Declare by DCL object whose `isa` property is a reference to name of existing type: ###\n    spork: { isa: 'nonempty_text', }\n    #.......................................................................................................\n    ### Declare by DCL object whose `isa` property is a list of clauses: ###\n    id: {\n      isa: [ 'text', ( ( x ) -> /^[a-z][a-z0-9]*$/.test x ) ]\n      }\n    #.......................................................................................................\n    ### Declare using an existing type: ###\n    length: [ one.float, ( ( x ) -> x >= 0 ), ]\n    #.......................................................................................................\n    ### Chain of references: ###\n    foo: 'spork'\n    bar: 'foo'\n    baz: 'bar'\n    #.......................................................................................................\n    pod_1: gnd.pod\n    pod_2: [ gnd.pod, ]\n    # pod_2: [ 'pod_1', ]\n    pod_3: ( x ) -> gnd.pod.isa x\n  #.......................................................................................................\n  show_type = ( type ) ->\n    # echo f\"#{gold type.fqname}:<15c; | #{white rpr type.dcl}:<60c; | #{lime rpr type.isa_clauses}:<60c;\"\n    echo f\"#{gold type.fqname}:<20c; | #{white rpr type}:<25c; | #{lime rpr type.isa_clauses}:<60c;\"\n    return null\n  for typespace in [ one, ts, ]\n    for type from typespace\n      show_type type\n  #.......................................................................................................\n  info 'Ωtt___6', \"ts.text                  \", ts.text\n  info 'Ωtt___7', \"ts.spork                 \", ts.spork\n  info()\n  info 'Ωtt___8', \"ts.text.isa 'pop'        \", truth ts.text.isa 'pop'\n  info 'Ωtt___9', \"ts.text.isa 87           \", truth ts.text.isa 87\n  info()\n  info 'Ωtt__10', \"ts.spork.isa 'pop'       \", truth ts.spork.isa 'pop'\n  info 'Ωtt__11', \"ts.spork.isa 87          \", truth ts.spork.isa 87\n  info()\n  info 'Ωtt__12', \"ts.id.isa 'pop'          \", truth ts.id.isa 'pop'\n  info 'Ωtt__13', \"ts.id.isa '3pop'         \", truth ts.id.isa '3pop'\n  info 'Ωtt__14', \"ts.id.isa 'pop3'         \", truth ts.id.isa 'pop3'\n  info()\n  info 'Ωtt__15', \"ts.spork.isa ''          \", truth ts.spork.isa ''\n  info 'Ωtt__16', \"ts.spork.isa 'A'         \", truth ts.spork.isa 'A'\n  info()\n  info 'Ωtt__17', \"ts.foo.isa ''            \", truth ts.foo.isa ''\n  info 'Ωtt__18', \"ts.bar.isa ''            \", truth ts.bar.isa ''\n  info 'Ωtt__19', \"ts.baz.isa ''            \", truth ts.baz.isa ''\n  info 'Ωtt__20', \"ts.foo.isa 'A'           \", truth ts.foo.isa 'A'\n  info 'Ωtt__21', \"ts.bar.isa 'A'           \", truth ts.bar.isa 'A'\n  info 'Ωtt__22', \"ts.baz.isa 'A'           \", truth ts.baz.isa 'A'\n  info()\n  info 'Ωtt__23', \"ts.pod_1.isa {}          \", truth ts.pod_1.isa {}\n  info 'Ωtt__24', \"ts.pod_2.isa {}          \", truth ts.pod_2.isa {}\n  info()\n  info 'Ωtt__25', \"ts.length.isa {}         \", truth ts.length.isa {}\n  info 'Ωtt__26', \"ts.length.isa -3.5       \", truth ts.length.isa -3.5\n  info 'Ωtt__27', \"ts.length.isa +3.5       \", truth ts.length.isa +3.5\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # guytest_cfg = { throw_on_error: true,   show_passes: true,  report_checks: false, }\n  # # guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test @nfa_tasks\n  demo_turning_lists_of_functions_into_objects_with_sensible_names()\n"
  ]
}