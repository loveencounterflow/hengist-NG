{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-intertype.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\nWEBGUY                    = require '../../../apps/webguy'\n{ hide }                  = GUY.props\n{ nameit }                = WEBGUY.props\n{ Ltsort }                = require '../../../apps/ltsort'\nmisfit                    = Symbol 'misfit'\n\n\n############################################################################################################\nrequire_intertype = ->\n\n  #===========================================================================================================\n  $isa =\n    text:     ( x ) -> typeof x is 'string'\n    function: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n\n  #===========================================================================================================\n  class Types\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      # @_types = new Map()\n      hide @, 'isa',      @isa.bind       @\n      hide @, 'validate', @validate.bind  @\n      hide @, 'create',   @create.bind    @\n      hide @, 'type_of',  @type_of.bind   @\n      hide @, 'memo',     new Map()\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    isa: ( type, x ) ->\n      ### TAINT use proper validation ###\n      unless type instanceof Type\n        throw new Error \"Ω___1 expected an instance of `Type`, got a #{@type_of R}\"\n      unless ( R = type.isa.call type.$typespace, x, @ ) in [ true, false, ]\n        throw new Error \"Ω___2 expected `true` or `false`, got a #{@type_of R}\"\n      return R\n\n    #---------------------------------------------------------------------------------------------------------\n    type_of: ( x ) -> 'something'\n\n    #---------------------------------------------------------------------------------------------------------\n    validate: ( type, x ) ->\n      return x if @isa type, x\n      throw new Error \"Ω___3 expected a #{type.$typename}, got a #{@type_of x}\"\n\n    #---------------------------------------------------------------------------------------------------------\n    create: ( type, P... ) ->\n      # unless ( method = type.parse )?\n      #   throw new Error \"Ω___4 expected a , got #{rpr R}\"\n\n    #---------------------------------------------------------------------------------------------------------\n    # evaluate: ( ??? ) ->\n    # create: ( ??? ) ->\n\n  #===========================================================================================================\n  class Type\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( typespace, typename, declaration ) ->\n      ### NOTE not doing anything for the time being ###\n      ### TAINT should still implement string-valued `isa` ###\n      debug 'Ω___5', rpr typespace\n      debug 'Ω___6', rpr typename\n      debug 'Ω___7', rpr declaration\n      @$typename = typename\n      # hide @, '$typename',  typename\n      hide @, '$typespace', typespace\n      ### TAINT check for accidental overwrites ###\n      #.......................................................................................................\n      ### Compile fields: ###\n      if declaration.fields?\n        do =>\n          ### TAINT try to move this check to validation step ###\n          if declaration.isa?\n            throw new Error \"Ω___8 must have exactly one of `isa` or `fields`, not both\"\n          # for field_name, field_declaration of declaration.fields\n          #   field = new Type typespace, field_name, field_declaration\n          #   debug 'Ω___9', { typename, field_name, field_declaration, }, field.$typename, field.isa\n          debug 'Ω__10', new Typespace declaration.fields\n      #.......................................................................................................\n      for key, value of declaration\n        nameit typename, value if key is 'isa' # check that value is function?\n        hide @, key, value\n      return undefined\n\n  #===========================================================================================================\n  class Typespace\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( typespace_cfg ) ->\n      typenames     = @_amend_and_sort_typenames typespace_cfg\n      info 'Ω__11', typenames\n      for typename in typenames\n        unless ( declaration = typespace_cfg[ typename ] )?\n          throw new Error \"Ω__12 unknown typename #{rpr typename}\"\n        urge 'Ω__13', { typename, declaration, }\n        switch true\n          when $isa.text declaration\n            typeref = declaration\n            unless ( deref = @[ typeref ] ) instanceof Type\n              ### TAINT should this error occur, its message is probably not meaningful to user ###\n              throw new Error \"Ω__14 expected type reference #{rpr typename} → #{rpr typeref} to dereference to a `Type`, got #{rpr deref} instead\"\n            debug 'Ω__15', { typename, typeref, deref}\n            declaration = do ( deref ) => { isa: ( ( x, t ) -> t.isa deref, x ), }\n          when $isa.function declaration\n            declaration = { isa: declaration, }\n          # else\n          # ### TAINT should validate remaining possible values for typespace_cfg[ typename ] ###\n        #.....................................................................................................\n        @[ typename ] = new Type @, typename, declaration\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    _amend_and_sort_typenames: ( typespace_cfg ) ->\n      ### Given a `typespace_cfg`, return a list of names such that the declarative dependencies (where the\n      type is defined by the name of another type in the typespace) can be resolved at compile time ###\n      ### TAINT re-throw cycle error ###\n      g = new Ltsort()\n      for name, declaration of typespace_cfg\n        if $isa.text declaration then g.add { name, needs: declaration, }\n        else                          g.add { name, }\n      return g.linearize { groups: false, }\n\n\n\n  #===========================================================================================================\n  std = new Typespace\n    #.........................................................................................................\n    integer:\n      isa:    ( x, t ) -> Number.isInteger x\n      foo:    4\n    odd:\n      isa:    ( x, t ) -> ( t.isa @integer, x ) and ( x %% 2 isnt 0 )\n    # short form just assigns either a test method or a type name:\n    even:           ( x, t ) -> ( t.isa @integer, x ) and ( x %% 2 is 0 )\n    float:          ( x, t ) -> Number.isFinite x\n    bigint:         ( x, t ) -> typeof x is 'bigint'\n    text:           ( x, t ) -> typeof x is 'string'\n    #.........................................................................................................\n    # numerical:      ( x, t ) -> ( t.isa @float, x   ) or ( t.isa @bigint, x )\n    # positive0:      ( x, t ) -> ( t.isa @float, x   ) and ( x >= +0  )\n    # positive1:      ( x, t ) -> ( t.isa @float, x   ) and ( x >= +1  )\n    # negative0:      ( x, t ) -> ( t.isa @float, x   ) and ( x <=  0  )\n    # negative1:      ( x, t ) -> ( t.isa @float, x   ) and ( x <= -1  )\n    # cardinal:       ( x, t ) -> ( t.isa @integer, x ) and ( t.isa @positive0, x )\n    #.........................................................................................................\n    # cardinalbigint: ( x, t ) -> ( t.isa @bigint, x    ) and ( x >= +0 )\n    #.........................................................................................................\n    # circle1:  'circle2'\n    # circle2:  'circle3'\n    # circle3:  'circle1'\n    #.........................................................................................................\n    weird:    'strange' # declares another name for `odd`\n    strange:  'odd'     # declares another name for `odd`\n    abnormal: 'weird'   # declares another name for `odd`\n    #.........................................................................................................\n    # quantity:\n    #   # isa: ->\n    #   # each field becomes an `Type` instance; strings may refer to names in the same typespace\n    #   fields:\n    #     q:    'float'\n    #     u:    'nonemptytext'\n    #   template:\n    #     q:    0\n    #     u:    'u'\n\n  flatly = new Typespace\n    evenly:       'flat'\n    flat:         std.even\n    plain:        'evenly'\n\n  # extras = new Typespace std,\n  #   nonemptytext:   ( x, t ) -> ( t.isa @text, x ) and x.length > 0\n\n  # quantity = new Typespace std,\n  #   nonemptytext:   ( x, t ) -> ( t.isa @text, x ) and x.length > 0\n  #   fields: new Typespace std,\n  #   q:              'float'\n  #   u:              'nonemptytext'\n  #   # template:\n  #   #   q:    0\n  #   #   u:    'u'\n\n\n  #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  return { Types, Type, Typespace, std, flatly, types: ( new Types() ), }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  { types\n    flatly\n    std             } = require_intertype()\n  help 'Ω__16', std\n  help 'Ω__17', flatly\n  #.........................................................................................................\n  help 'Ω__18', GUY.trm.truth     types.isa       std.integer,    5\n  help 'Ω__19', GUY.trm.truth     types.isa       std.odd,        5\n  help 'Ω__20', GUY.trm.truth     types.isa       std.even,       6\n  help 'Ω__21', GUY.trm.truth     types.isa       std.strange,    5\n  help 'Ω__22', GUY.trm.truth     types.isa       std.weird,      5\n  help 'Ω__23', GUY.trm.truth     types.isa       std.abnormal,   5\n  # help 'Ω__24', GUY.trm.truth     types.isa       flatly.flat,    8\n  # help 'Ω__25', GUY.trm.truth     types.isa       flatly.evenly,  8\n  # help 'Ω__26', GUY.trm.truth     types.isa       flatly.plain,   8\n  #.........................................................................................................\n  help 'Ω__27', GUY.trm.truth     types.isa       std.integer,    5.3\n  help 'Ω__28', GUY.trm.truth     types.isa       std.odd,        6\n  help 'Ω__29', GUY.trm.truth     types.isa       std.odd,        5.3\n  help 'Ω__30', GUY.trm.truth     types.isa       std.even,       5\n  help 'Ω__31', GUY.trm.truth     types.isa       std.strange,    6\n  help 'Ω__32', GUY.trm.truth     types.isa       std.weird,      6\n  help 'Ω__33', GUY.trm.truth     types.isa       std.abnormal,   6\n  # help 'Ω__34', GUY.trm.truth     types.isa       flatly.evenly,  5\n  # help 'Ω__35', GUY.trm.truth     types.isa       flatly.flat,    5\n  # help 'Ω__36', GUY.trm.truth     types.isa       flatly.plain,   5\n  #.........................................................................................................\n  # help 'Ω__37', GUY.trm.truth     types.isa       std.cardinal, 6\n  # help 'Ω__38', GUY.trm.truth     types.isa       std.cardinal, 0\n  # help 'Ω__39', GUY.trm.truth     types.isa       std.cardinal, -1\n  # #.........................................................................................................\n  help 'Ω__40', try               types.validate  std.integer,  5       catch e then warn 'Ω__41', e.message\n  help 'Ω__42', try               types.validate  std.integer,  5.3     catch e then warn 'Ω__43', e.message\n  # info 'Ω__44', std.weird\n  # info 'Ω__45', std.weird.isa\n  # info 'Ω__46', std.weird.isa.toString()\n\n\n\n"
  ]
}