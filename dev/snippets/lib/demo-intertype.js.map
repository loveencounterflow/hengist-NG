{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-intertype.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;IAAA;+DAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,YAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,IAJF,EAKE,GALF,CAAA,GAK4B,GAAG,CAAC,GALhC;;EAMA,MAAA,GAA4B,OAAA,CAAQ,sBAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,GAAG,CAAC,KAAhC;;EACA,CAAA,CAAE,MAAF,CAAA,GAA4B,MAAM,CAAC,KAAnC;;EACA,CAAA,CAAE,MAAF,CAAA,GAA4B,OAAA,CAAQ,sBAAR,CAA5B,EAtBA;;;EA0BA,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAEpB,QAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SAAA,EAAA,QAAA,EAAA,GAAA;;IACE,IAAA,GACE;MAAA,IAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,OAAO,CAAP,KAAY;MAArB,CAAV;MACA,QAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC;IADV,EAFJ;;IAMQ,QAAN,MAAA,MAAA,CAAA;;MAGE,WAAa,CAAE,GAAF,CAAA,EAAA;;QAEX,IAAA,CAAK,IAAL,EAAQ,KAAR,EAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAgB,IAAhB,CAApB;QACA,IAAA,CAAK,IAAL,EAAQ,UAAR,EAAoB,IAAC,CAAA,QAAQ,CAAC,IAAV,CAAgB,IAAhB,CAApB;QACA,IAAA,CAAK,IAAL,EAAQ,QAAR,EAAoB,IAAC,CAAA,MAAM,CAAC,IAAR,CAAgB,IAAhB,CAApB;QACA,IAAA,CAAK,IAAL,EAAQ,SAAR,EAAoB,IAAC,CAAA,OAAO,CAAC,IAAT,CAAgB,IAAhB,CAApB;QACA,IAAA,CAAK,IAAL,EAAQ,MAAR,EAAoB,IAAI,GAAJ,CAAA,CAApB;AACA,eAAO;MAPI,CADjB;;;MAWI,GAAK,CAAE,IAAF,EAAQ,CAAR,CAAA;AACT,YAAA,CAAA,EAAA;QAAM,YAAO,CAAE,CAAA,GAAI,IAAI,CAAC,GAAG,CAAC,IAAT,CAAc,IAAI,CAAC,UAAnB,EAA+B,CAA/B,EAAkC,IAAlC,CAAN,OAAiD,QAAjD,SAAuD,KAA9D;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,4CAAA,CAAA,CAA2C,IAAC,CAAA,OAAD,CAAS,CAAT,CAA3C,CAAA,CAAV,EADR;;AAEA,eAAO;MAHJ,CAXT;;;MAiBI,OAAS,CAAE,CAAF,CAAA;eAAS;MAAT,CAjBb;;;MAoBI,QAAU,CAAE,IAAF,EAAQ,CAAR,CAAA;QACR,IAAY,IAAC,CAAA,GAAD,CAAK,IAAL,EAAW,CAAX,CAAZ;AAAA,iBAAO,EAAP;;QACA,MAAM,IAAI,KAAJ,CAAU,CAAA,iBAAA,CAAA,CAAoB,IAAI,CAAC,KAAzB,CAAA,QAAA,CAAA,CAAyC,IAAC,CAAA,OAAD,CAAS,CAAT,CAAzC,CAAA,CAAV;MAFE,CApBd;;;MAyBI,MAAQ,CAAE,IAAF,EAAA,GAAQ,CAAR,CAAA,EAAA;;IA3BV,EANF;;;;;;;;;IA2CQ,OAAN,MAAA,KAAA,CAAA;;MAGE,WAAa,CAAE,SAAF,EAAa,IAAb,EAAmB,WAAnB,CAAA;AACjB,YAAA,GAAA,EAAA,KAAA;;;;QAGM,IAAA,CAAK,IAAL,EAAQ,OAAR,EAAsB,IAAtB;QACA,IAAA,CAAK,IAAL,EAAQ,YAAR,EAAsB,SAAtB,EAJN;;;;QAQM,IAAG,0BAAH;UACK,CAAA,CAAA,CAAA,GAAA,EAAA;;YAED,IAAG,uBAAH;cACE,MAAM,IAAI,KAAJ,CAAU,4DAAV,EADR;aADV;;;;mBAMU,KAAA,CAAM,OAAN,EAAe,IAAI,SAAJ,CAAc,WAAW,CAAC,MAA1B,CAAf;UAPC,CAAA,IADL;SARN;;QAkBM,KAAA,kBAAA;;UACE,IAAsB,GAAA,KAAO,KAA7B;YAAA,MAAA,CAAO,IAAP,EAAa,KAAb,EAAA;;UACA,IAAA,CAAK,IAAL,EAAQ,GAAR,EAAa,KAAb;QAFF;AAGA,eAAO;MAtBI;;IAHf,EA3CF;;IAwEQ,YAAN,MAAA,UAAA,CAAA;;MAGE,WAAa,CAAA,GAAE,OAAF,CAAA,EAAA;;;;AACjB,YAAA,WAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;8CAD+B;QACzB,KAAA,yCAAA;;UAAA,KAAA,CAAM,OAAN,EAAe,CAAE,MAAF,CAAf;QAAA;QACA,KAAA,GAAQ,IAAC,CAAA,WAAD,CAAa,aAAb;QACR,IAAA,CAAK,OAAL,EAAc,MAAM,CAAC,IAAP,CAAY,aAAZ,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,KAAd;QACA,KAAA,yCAAA;;UACE,IAAO,2CAAP;YACE,MAAM,IAAI,KAAJ,CAAU,CAAA,mCAAA,CAAA,CAAsC,GAAA,CAAI,IAAJ,CAAtC,CAAA,CAAV,EADR;WAAR;;AAGQ,kBAAO,IAAP;;AAAA,iBAEO,IAAI,CAAC,IAAL,CAAU,WAAV,CAFP;cAMI,GAAA,GAAc;cACd,WAAA,GAAiB,CAAA,CAAA,CAAA,GAAA;AAC7B,oBAAA;gBAAc,KAAA,GAAQ,IAAC,CAAE,GAAF;AACT,uBAAO;kBAAE,GAAA,EAAK,CAAE,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;2BAAY,CAAC,CAAC,GAAF,CAAM,KAAN,EAAa,CAAb;kBAAZ,CAAF;gBAAP;cAFQ,CAAA;AALd;;AAFP,iBAWO,IAAI,CAAC,QAAL,CAAc,WAAd,CAXP;cAYI,WAAA,GAAc;gBAAE,GAAA,EAAK;cAAP;AAZlB,WAHR;;UAiBQ,IAAC,CAAE,IAAF,CAAD,GAAY,IAAI,IAAJ,CAAS,IAAT,EAAY,IAAZ,EAAkB,WAAlB;QAlBd;AAmBA,eAAO;MAxBI,CADjB;;;MA4BI,WAAa,CAAE,aAAF,CAAA,EAAA;;;;AACjB,YAAA,WAAA,EAAA,CAAA,EAAA;QAGM,CAAA,GAAI,IAAI,MAAJ,CAAA;QACJ,KAAA,qBAAA;;UACE,IAAG,IAAI,CAAC,IAAL,CAAU,WAAV,CAAH;YAA8B,CAAC,CAAC,GAAF,CAAM;cAAE,IAAF;cAAQ,KAAA,EAAO;YAAf,CAAN,EAA9B;WAAA,MAAA;YAC8B,CAAC,CAAC,GAAF,CAAM,CAAE,IAAF,CAAN,EAD9B;;QADF;AAGA,eAAO,CAAC,CAAC,SAAF,CAAY;UAAE,MAAA,EAAQ;QAAV,CAAZ;MARI;;IA9Bf,EAxEF;;IAkHE,GAAA,GAAM,IAAI,SAAJ,CAOJ,CAAA;;;;;;;MAAA,KAAA,EAAU,SAAV;MACA,OAAA,EAAU,KADV;MAEA,OAAA,EACE;QAAA,GAAA,EAAQ,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;iBAAY,MAAM,CAAC,SAAP,CAAiB,CAAjB;QAAZ,CAAR;QACA,GAAA,EAAQ;MADR,CAHF;MAKA,GAAA,EACE;QAAA,GAAA,EAAQ,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;iBAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,OAAP,EAAgB,CAAhB,CAAF,CAAA,IAA0B,QAAE,GAAK,EAAL,KAAY,CAAd;QAAtC;MAAR,CANF;MAOA,QAAA,EAAU,OAPV;;MASA,IAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,OAAP,EAAgB,CAAhB,CAAF,CAAA,IAA0B,QAAE,GAAK,EAAL,KAAU,CAAZ;MAAtC,CAThB;MAUA,KAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,MAAM,CAAC,QAAP,CAAgB,CAAhB;MAAZ,CAVhB;MAWA,MAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,OAAO,CAAP,KAAY;MAAxB,CAXhB;MAYA,SAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,KAAP,EAAc,CAAd,CAAF,CAAA,IAAyB,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,MAAP,EAAe,CAAf,CAAF;MAArC,CAZhB;MAaA,SAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,KAAP,EAAc,CAAd,CAAF,CAAA,IAA0B,CAAE,CAAA,IAAK,CAAC,CAAR;MAAtC,CAbhB;MAcA,SAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,KAAP,EAAc,CAAd,CAAF,CAAA,IAA0B,CAAE,CAAA,IAAK,CAAC,CAAR;MAAtC,CAdhB;MAeA,SAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,KAAP,EAAc,CAAd,CAAF,CAAA,IAA0B,CAAE,CAAA,IAAM,CAAR;MAAtC,CAfhB;MAgBA,SAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,KAAP,EAAc,CAAd,CAAF,CAAA,IAA0B,CAAE,CAAA,IAAK,CAAC,CAAR;MAAtC,CAhBhB;MAiBA,QAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,OAAP,EAAgB,CAAhB,CAAF,CAAA,IAA0B,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,SAAP,EAAkB,CAAlB,CAAF;MAAtC,CAjBhB;;MAmBA,IAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,OAAO,CAAP,KAAY;MAAxB,CAnBhB;MAoBA,YAAA,EAAgB,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;eAAY,CAAE,CAAC,CAAC,GAAF,CAAM,IAAC,CAAA,IAAP,EAAa,CAAb,CAAF,CAAA,IAAuB,CAAC,CAAC,MAAF,GAAW;MAA9C;IApBhB,CAPI,EAlHR;;;;;;;;;;IAwJE,QAAA,GAAW,IAAI,SAAJ,CAAc,GAAd,EACT;MAAA,CAAA,EAAM,OAAN;MACA,CAAA,EAAM;IADN,CADS;AASX,WAAO,CAAA;;;;;;MAAE,KAAF;MAAS,IAAT;MAAe,SAAf;MAA0B,GAA1B;MAA+B,KAAA,EAAS,IAAI,KAAJ,CAAA;IAAxC;EAnKW,EA1BpB;;;EAiMA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;AACxC,UAAA,CAAA,EAAA,GAAA,EAAA,KAAA;;;;;MAIE,CAAA,CAAE,KAAF,EACE,GADF,CAAA,GACsB,iBAAA,CAAA,CADtB,EAJF;;MAOE,IAAA,CAAK,OAAL,EAAc,GAAd,EAPF;;;MAUE,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,OAApB,EAA8B,GAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,OAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,KAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,GAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,OAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,KAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,GAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,GAApB,EAA8B,GAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,IAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,IAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,QAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,QAApB,EAA8B,CAA9B,CAAlB,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,GAAG,CAAC,KAAR,CAAkB,KAAK,CAAC,GAAN,CAAgB,GAAG,CAAC,QAApB,EAA8B,CAAC,CAA/B,CAAlB,CAAd,EAtBF;;;;;MA2BE,IAAA,CAAK,OAAL;AAAc;iBAAkB,KAAK,CAAC,QAAN,CAAgB,GAAG,CAAC,OAApB,EAA8B,CAA9B,EAAlB;SAAwD,aAAA;UAAM;iBAAO,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,OAAhB,EAAb;;UAAtE;aACA,IAAA,CAAK,OAAL;AAAc;iBAAkB,KAAK,CAAC,QAAN,CAAgB,GAAG,CAAC,OAApB,EAA8B,GAA9B,EAAlB;SAAwD,aAAA;UAAM;iBAAO,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,OAAhB,EAAb;;UAAtE;IA7BsC,CAAA,IAAxC;;;EAjMA;;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\nWEBGUY                    = require '../../../apps/webguy'\n{ hide }                  = GUY.props\n{ nameit }                = WEBGUY.props\n{ Ltsort }                = require '../../../apps/ltsort'\n\n\n############################################################################################################\nrequire_intertype = ->\n\n  #===========================================================================================================\n  $isa =\n    text:     ( x ) -> typeof x is 'string'\n    function: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n\n  #===========================================================================================================\n  class Types\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( cfg ) ->\n      # @_types = new Map()\n      hide @, 'isa',      @isa.bind       @\n      hide @, 'validate', @validate.bind  @\n      hide @, 'create',   @create.bind    @\n      hide @, 'type_of',  @type_of.bind   @\n      hide @, 'memo',     new Map()\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    isa: ( type, x ) ->\n      unless ( R = type.isa.call type.$typespace, x, @ ) in [ true, false, ]\n        throw new Error \"Ω___1 expected `true` or `false`, got a #{@type_of R}\"\n      return R\n\n    #---------------------------------------------------------------------------------------------------------\n    type_of: ( x ) -> 'something'\n\n    #---------------------------------------------------------------------------------------------------------\n    validate: ( type, x ) ->\n      return x if @isa type, x\n      throw new Error \"Ω___2 expected a #{type.$name}, got a #{@type_of x}\"\n\n    #---------------------------------------------------------------------------------------------------------\n    create: ( type, P... ) ->\n      # unless ( method = type.parse )?\n      #   throw new Error \"Ω___3 expected a , got #{rpr R}\"\n\n    #---------------------------------------------------------------------------------------------------------\n    # evaluate: ( ??? ) ->\n    # create: ( ??? ) ->\n\n\n  #===========================================================================================================\n  class Type\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( typespace, name, declaration ) ->\n      ### NOTE not doing anything for the time being ###\n      ### TAINT should still implement string-valued `isa` ###\n      # debug 'Ω___4', rpr declaration\n      hide @, '$name',      name\n      hide @, '$typespace', typespace\n      ### TAINT check for accidental overwrites ###\n      #.......................................................................................................\n      ### Compile fields: ###\n      if declaration.fields?\n        do =>\n          ### TAINT try to move this check to validation step ###\n          if declaration.isa?\n            throw new Error \"Ω___5 must have exactly one of `isa` or `fields`, not both\"\n          # for field_name, field_declaration of declaration.fields\n          #   field = new Type typespace, field_name, field_declaration\n          #   debug 'Ω___6', { name, field_name, field_declaration, }, field.$name, field.isa\n          debug 'Ω___7', new Typespace declaration.fields\n      #.......................................................................................................\n      for key, value of declaration\n        nameit name, value if key is 'isa' # check that value is function?\n        hide @, key, value\n      return undefined\n\n\n  #===========================================================================================================\n  class Typespace\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( parents..., typespace_cfg ) ->\n      debug 'Ω___8', { parent, } for parent in parents\n      names = @_sort_names typespace_cfg\n      info 'Ω___9', Object.keys typespace_cfg\n      info 'Ω__10', names\n      for name in names\n        unless ( declaration = typespace_cfg[ name ] )?\n          throw new Error \"Ω__11 missing declaration for type #{rpr name}\"\n        #.....................................................................................................\n        switch true\n          #...................................................................................................\n          when $isa.text declaration\n            ### De-reference named types: ###\n            ### TAINT use method `_deref()` ###\n            ### TAINT consider to resolve transitive dependencies ###\n            ref         = declaration\n            declaration = do =>\n              deref = @[ ref ]\n              return { isa: ( ( x, t ) -> t.isa deref, x ), }\n          #...................................................................................................\n          when $isa.function declaration\n            declaration = { isa: declaration, }\n        #.....................................................................................................\n        @[ name ] = new Type @, name, declaration\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    _sort_names: ( typespace_cfg ) ->\n      ### Given a `typespace_cfg`, return a list of names such that the declarative dependencies (where the\n      type is defined by the name of another type in the typespace) can be resolved at compile time ###\n      ### TAINT re-throw cycle error ###\n      g = new Ltsort()\n      for name, declaration of typespace_cfg\n        if $isa.text declaration then g.add { name, needs: declaration, }\n        else                          g.add { name, }\n      return g.linearize { groups: false, }\n\n\n  #===========================================================================================================\n  std = new Typespace\n    ### TAINT set up policy whether bigints should be considered numbers or not; given the common assumption\n    that JavaScript has 'just numbers' maybe better to reserve `positive0`, `cardinal` to `float`s and\n    treat bigints as just that, bigints ###\n    # circle1:  'circle2'\n    # circle2:  'circle3'\n    # circle3:  'circle1'\n    weird:    'strange' # declares another name for `odd`\n    strange:  'odd'     # declares another name for `odd`\n    integer:\n      isa:    ( x, t ) -> Number.isInteger x\n      foo:    4\n    odd:\n      isa:    ( x, t ) -> ( t.isa @integer, x ) and ( x %% 2 isnt 0 )\n    abnormal: 'weird' # declares another name for `odd`\n    # short form just assigns either a test method or a type name:\n    even:           ( x, t ) -> ( t.isa @integer, x ) and ( x %% 2 is 0 )\n    float:          ( x, t ) -> Number.isFinite x\n    bigint:         ( x, t ) -> typeof x is 'bigint'\n    numerical:      ( x, t ) -> ( t.isa @float, x   ) or ( t.isa @bigint, x )\n    positive0:      ( x, t ) -> ( t.isa @float, x   ) and ( x >= +0  )\n    positive1:      ( x, t ) -> ( t.isa @float, x   ) and ( x >= +1  )\n    negative0:      ( x, t ) -> ( t.isa @float, x   ) and ( x <=  0  )\n    negative1:      ( x, t ) -> ( t.isa @float, x   ) and ( x <= -1  )\n    cardinal:       ( x, t ) -> ( t.isa @integer, x ) and ( t.isa @positive0, x )\n    # cardinalbigint: ( x, t ) -> ( t.isa @bigint, x    ) and ( x >= +0 )\n    text:           ( x, t ) -> typeof x is 'string'\n    nonemptytext:   ( x, t ) -> ( t.isa @text, x ) and x.length > 0\n    # quantity:\n    #   # isa: ->\n    #   # each field becomes an `Type` instance; strings may refer to names in the same typespace\n    #   fields:\n    #     q:    'float'\n    #     u:    'nonemptytext'\n    #   template:\n    #     q:    0\n    #     u:    'u'\n\n  quantity = new Typespace std,\n    q:    'float'\n    u:    'nonemptytext'\n    # template:\n    #   q:    0\n    #   u:    'u'\n\n\n  #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n  return { Types, Type, Typespace, std, types: ( new Types() ), }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # f = ( P..., x ) -> info 'Ω__12', { P, x, }\n  # f 7\n  # f 7, 8, 9\n  # return null\n  { types\n    std             } = require_intertype()\n  # help 'Ω__13', types = new Types()\n  help 'Ω__14', std\n  # help 'Ω__15', std.integer\n  # help 'Ω__16', std.integer.isa 5\n  help 'Ω__17', GUY.trm.truth     types.isa       std.integer,  5.3\n  help 'Ω__18', GUY.trm.truth     types.isa       std.strange,  6\n  help 'Ω__19', GUY.trm.truth     types.isa       std.weird,    6\n  help 'Ω__20', GUY.trm.truth     types.isa       std.odd,      6\n  help 'Ω__21', GUY.trm.truth     types.isa       std.strange,  5\n  help 'Ω__22', GUY.trm.truth     types.isa       std.weird,    5\n  help 'Ω__23', GUY.trm.truth     types.isa       std.odd,      5\n  help 'Ω__24', GUY.trm.truth     types.isa       std.odd,      5.3\n  help 'Ω__25', GUY.trm.truth     types.isa       std.even,     5\n  help 'Ω__26', GUY.trm.truth     types.isa       std.even,     6\n  help 'Ω__27', GUY.trm.truth     types.isa       std.cardinal, 6\n  help 'Ω__28', GUY.trm.truth     types.isa       std.cardinal, 0\n  help 'Ω__29', GUY.trm.truth     types.isa       std.cardinal, -1\n  # help 'Ω__30', GUY.trm.truth     types.isa       std.cardinalbigint, 6\n  # help 'Ω__31', GUY.trm.truth     types.isa       std.cardinalbigint, 6n\n  # help 'Ω__32', GUY.trm.truth     types.isa       std.cardinalbigint, -6\n  # help 'Ω__33', GUY.trm.truth     types.isa       std.cardinalbigint, -6n\n  help 'Ω__34', try               types.validate  std.integer,  5       catch e then warn 'Ω__35', e.message\n  help 'Ω__36', try               types.validate  std.integer,  5.3     catch e then warn 'Ω__37', e.message\n  # info 'Ω__38', std.weird\n  # info 'Ω__39', std.weird.isa\n  # info 'Ω__40', std.weird.isa.toString()\n\n\n\n"
  ]
}