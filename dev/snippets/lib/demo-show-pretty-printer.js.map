{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-show-pretty-printer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  white\n  gold\n  red\n  reverse\n  log     }               = GUY.trm\nPATH                      = require 'node:path'\n{ execa\n  $ }                     = require 'execa'\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nTMPTRM                    = GUY.trm\n\n###\nblack\nblue\ngreen\ncyan\nsepia\nindigo\nsteel\nbrown\nolive\nlime\nred\ncrimson\nplum\npink\norange\ngold\ntan\nyellow\ngrey\ndarkgrey\nwhite\nBASE03\nBASE02\nBASE01\nBASE00\nBASE0\nBASE1\nBASE2\nBASE3\nYELLOW\nORANGE\nRED\nMAGENTA\nVIOLET\nBLUE\nCYAN\nGREEN\n###\n\n# debug 'Ω___1', require 'execa'\n# debug 'Ω___2', execa\n# debug 'Ω___3', $\n# debug 'Ω___4', $.sync\n# # { $: zx, cd: zx_cd }      = require 'zx'\n\n#===========================================================================================================\ndemo_execa = ->\n  # debug 'Ω___5', d for d from await execa\"trash nosuchfile\"\n  count = 0\n  # for await line from ( execa { cwd: '/home/flow/jzr/bing-image-creator-downloader', } )\"cat /usr/share/dict/ngerman\"\n  lines = ( $.sync { cwd: '/home/flow/jzr/bing-image-creator-downloader', } )\"ls -AlF\"\n  lines = lines.stdout\n  lines = lines.split '\\n'\n  # for line from ( $.sync { cwd: '/home/flow/jzr/bing-image-creator-downloader', } )\"ls -AlF\"\n  for line from lines\n    count++; break if count > 10000\n    help 'Ω___6', rpr line\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nobject_prototype  = Object.getPrototypeOf {}\npod_prototypes    = [ null, object_prototype, ]\n\n#-----------------------------------------------------------------------------------------------------------\ntype_of = ( x ) ->\n  #.........................................................................................................\n  ### Primitives: ###\n  return 'null'         if x is null\n  return 'undefined'    if x is undefined\n  return 'infinity'     if ( x is +Infinity ) or ( x is -Infinity )\n  # return 'boolean'      if ( x is true ) or ( x is false )\n  return 'true'         if ( x is true )\n  return 'false'        if ( x is false )\n  return 'nan'          if Number.isNaN     x\n  return 'float'        if Number.isFinite  x\n  # return 'unset'        if x is unset\n  return 'pod'          if ( Object.getPrototypeOf x ) in pod_prototypes\n  #.........................................................................................................\n  switch jstypeof = typeof x\n    when 'string'                       then return 'text'\n    when 'symbol'                       then return 'symbol'\n  #.........................................................................................................\n  return 'list'         if Array.isArray  x\n  ### TAINT consider to return x.constructor.name ###\n  switch millertype = ( ( Object::toString.call x ).replace /^\\[object ([^\\]]+)\\]$/, '$1' ).toLowerCase()\n    when 'regexp'                       then return 'regex'\n  return millertype\n  # switch millertype = Object::toString.call x\n  #   when '[object Function]'            then return 'function'\n  #   when '[object AsyncFunction]'       then return 'asyncfunction'\n  #   when '[object GeneratorFunction]'   then return 'generatorfunction'\n\n#===========================================================================================================\n### thx to https://github.com/sindresorhus/identifier-regex ###\njsid_re   = ///^ [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* $///v\nisa_jsid  = ( x ) -> ( ( typeof x ) is 'string' ) and jsid_re.test x\n\n\n#===========================================================================================================\nclass Show\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    me = ( x ) ->\n      for text from me.dispatch x\n        me.state.ended_with_nl = text.endsWith '\\n'\n        yield text\n      unless me.state.ended_with_nl\n        me.state.ended_with_nl = true\n        yield '\\n'\n      return null\n    Object.setPrototypeOf me, @\n    @state  = { level: 0, ended_with_nl: false, }\n    @spacer = '\\x20\\x20'\n    Object.defineProperty @, 'dent',\n      get: => @spacer.repeat @state.level\n    return me\n\n  #---------------------------------------------------------------------------------------------------------\n  go_down: ->\n    @state.level++\n    return @state.level\n\n  #---------------------------------------------------------------------------------------------------------\n  go_up: ->\n    if @state.level < 1\n      throw new Error \"Ω___7 unable to go below level 0\"\n    @state.level--\n    return @state.level\n\n  #---------------------------------------------------------------------------------------------------------\n  dispatch: ( x ) ->\n    if ( method = @[ \"show_#{type_of x}\" ] )?\n      yield from method.call @, x\n    else\n      yield from @show_other x\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _show_key: ( key ) ->\n    if isa_jsid key then return TMPTRM.cyan key\n    return [ ( t for t from @dispatch key )..., ].join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  show_pod: ( x ) ->\n    has_keys = false\n    yield TMPTRM.gold '{'\n    #.......................................................................................................\n    for key, value of x\n      ### TAINT code duplication ###\n      has_keys = true\n      yield ' ' + ( @_show_key key ) + TMPTRM.gold ': '\n      for text from @dispatch value\n        yield text\n      yield TMPTRM.gold ','\n    #.......................................................................................................\n    yield TMPTRM.gold if ( not has_keys ) then '}' else ' }'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_map: ( x ) ->\n    has_keys = false\n    yield TMPTRM.gold 'map{'\n    #.......................................................................................................\n    for [ key, value, ] from x.entries()\n      ### TAINT code duplication ###\n      has_keys = true\n      yield ' ' + ( @_show_key key ) + TMPTRM.gold ': '\n      for text from @dispatch value\n        yield text\n      yield TMPTRM.gold ','\n    #.......................................................................................................\n    yield TMPTRM.gold if ( not has_keys ) then '}' else ' }'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_list: ( x ) ->\n    yield TMPTRM.gold '['\n    for element in x\n      ### TAINT code duplication ###\n      for text from @dispatch element\n        yield ' ' + text + ( TMPTRM.gold ',' )\n    yield TMPTRM.gold if ( x.length is 0 ) then ']' else ' ]'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_set: ( x ) ->\n    yield TMPTRM.gold 'set['\n    for element from x.keys()\n      ### TAINT code duplication ###\n      for text from @dispatch element\n        yield ' ' + text + TMPTRM.gold ','\n    yield TMPTRM.gold if ( x.length is 0 ) then ']' else ' ]'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_text: ( x ) ->\n    if '\"' in x then  yield ( TMPTRM.green \"'\" ) + ( TMPTRM.green x.replace /'/g, \"\\\\'\" ) + ( TMPTRM.green \"'\" )\n    else              yield ( TMPTRM.green '\"' ) + ( TMPTRM.green x.replace /\"/g, '\\\\\"' ) + ( TMPTRM.green '\"' )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_float: ( x ) ->\n    yield ( TMPTRM.crimson x.toString() )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  show_regex: ( x ) ->\n    yield ( TMPTRM.plum x.toString() )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### full words: ###\n  show_true:      ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.lime   'true'      )\n  show_false:     ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.ORANGE 'false'     )\n  show_undefined: ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.BLUE   'null'      )\n  show_null:      ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.pink   'undefined' )\n  show_nan:       ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.pink   'NaN'       )\n  ### (mostly) single letters: ###\n  # show_true:      ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.lime   ' T '     )\n  # show_false:     ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.ORANGE ' F '     )\n  # show_undefined: ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.BLUE   ' N '     )\n  # show_null:      ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.pink   ' U '     )\n  # show_nan:       ( x ) -> yield ( TMPTRM.reverse TMPTRM.bold TMPTRM.pink   ' NaN '   )\n\n  #---------------------------------------------------------------------------------------------------------\n  show_other: ( x ) ->\n    # yield '\\n' unless @state.ended_with_nl\n    yield TMPTRM.reverse TMPTRM.red \"#{x}\"\n    return null\n\n#===========================================================================================================\ndemo_show = ->\n  show = new Show()\n  debug 'Ω___8', show\n  debug 'Ω___9', show.state\n  debug 'Ω__10', rpr show.dent\n  debug 'Ω__11', show.go_down()\n  debug 'Ω__12', rpr show.dent\n  echo()\n  echo '-----------------------------------------------'\n  write r for r from show \"foo 'bar'\"\n  echo '-----------------------------------------------'\n  write r for r from show {}\n  echo '-----------------------------------------------'\n  write r for r from show { kong: 108, low: 923, }\n  echo '-----------------------------------------------'\n  write r for r from show { kong: 108, low: 923, numbers: [ 10, 11, 12, ], }\n  echo '-----------------------------------------------'\n  write r for r from show []\n  echo '-----------------------------------------------'\n  write r for r from show [ 'some', 'words', 'to', 'show', ]\n  echo '-----------------------------------------------'\n  write r for r from show new Map [ [ 'kong', 108, ], [ 'low', 923, ], [ 971, 'word', ], [ true, '+1', ], [ 'a b c', false, ] ]\n  echo '-----------------------------------------------'\n  write r for r from show new Set [ 'some', 'words', true, false, null, undefined, 3.1415926, NaN, ]\n  echo '-----------------------------------------------'\n  write r for r from show /abc[de]/\n  echo '-----------------------------------------------'\n  echo()\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_execa()\n  demo_show()\n\n\n# f = ->\n#   ### NOTE commit ID can be shortened ###\n#   \"https://raw.githubusercontent.com/loveencounterflow/mirror-github-file-to-local/7fccc7ec115302ab4d1e44e0a4c78b60d8215d94/index.js\"\n#   \"https://raw.githubusercontent.com/#{user_and_repo}/7fccc7ec115302ab4d1e44e0a4c78b60d8215d94/#{relative_path}\"\n\n\n\n"
  ]
}