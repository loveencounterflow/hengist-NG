{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-walk-many-files-extract-exif-data.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nFS                        = require 'node:fs'\nCRYPTO                    = require 'node:crypto'\n{ DBay }                  = require '../../../apps/dbay'\n{ SQL  }                  = DBay\n\n\n#-----------------------------------------------------------------------------------------------------------\nid_from_text = ( text, length = 8 ) ->\n  hash = CRYPTO.createHash 'sha1'\n  hash.update text\n  return ( hash.digest 'hex' )[ ... length ]\n\n#-----------------------------------------------------------------------------------------------------------\nset_path = ->\n  process.chdir path if ( path = process.argv[ 2 ] ? null )?\n  R = process.cwd()\n  info \"Ω___1 CWD: #{R}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_fast_glob = ->\n  FG        = require 'fast-glob'\n  patterns  = [ '**/*.png', '**/*.jpg', ]\n  cfg       = { dot: true }\n  set_path()\n  #.........................................................................................................\n  await do =>\n    console.time 'fast-glob-async'\n    entries = await FG.glob patterns, cfg\n    console.timeEnd 'fast-glob-async'\n    debug 'Ω___2', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  do =>\n    console.time 'fast-glob-sync'\n    entries = FG.globSync patterns, cfg\n    console.timeEnd 'fast-glob-sync'\n    debug 'Ω___3', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_node_glob = ->\n  { glob\n    globSync  } = require 'glob'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  set_path()\n  #.........................................................................................................\n  await do =>\n    console.time 'node-glob-async'\n    entries = await glob patterns, cfg\n    console.timeEnd 'node-glob-async'\n    debug 'Ω___4', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  do =>\n    console.time 'node-glob-sync'\n    entries = globSync patterns, cfg\n    console.timeEnd 'node-glob-sync'\n    debug 'Ω___5', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_exifr = ->\n  PATH          = require 'node:path'\n  { glob\n    globSync  } = require 'glob'\n  EXIFR         = require 'exifr'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  base_path     = set_path()\n  count         = 0\n  #.........................................................................................................\n  do =>\n    console.time 'demo_exifr'\n    for rel_path in ( rel_paths = globSync patterns, cfg )\n      count++; whisper count if ( count %% 1000 ) is 0\n      abs_path  = PATH.resolve base_path, rel_path\n      exif      = await EXIFR.parse abs_path\n      if exif?\n        debug 'Ω___6', abs_path\n        info 'Ω___7', exif\n    console.timeEnd 'demo_exifr'\n    debug 'Ω___8', \"found #{rel_paths.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_exiftool_vendored = ->\n  PATH          = require 'node:path'\n  { glob\n    globSync  } = require 'glob'\n  { exiftool }         = require 'exiftool-vendored'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  base_path     = set_path()\n  count         = 0\n  #.........................................................................................................\n  do =>\n    console.time 'demo_exiftool_vendored'\n    for rel_path in ( rel_paths = globSync patterns, cfg )\n      count++; whisper count if ( count %% 1000 ) is 0\n      abs_path  = PATH.resolve base_path, rel_path\n      exif      = await exiftool.read abs_path\n      if ( data = exif?.UserComment ? null )?\n        data = JSON.parse data\n        # debug 'Ω___9', abs_path\n        # debug 'Ω__10', Object.keys data\n        # info 'Ω__11', data.prompt\n        # info 'Ω__12', data.creation_date\n        # info 'Ω__13', new Date data.creation_date\n    console.timeEnd 'demo_exiftool_vendored'\n    debug 'Ω__14', \"found #{rel_paths.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_exifreader = ->\n  PATH            = require 'node:path'\n  { glob\n    globSync  }   = require 'glob'\n  ExifReader      = require 'exifreader'\n  patterns        = [ '**/*.png', '**/*.jpg', ]\n  cfg             = { dot: true }\n  base_path       = set_path()\n  count           = 0\n  DB              = prepare_db()\n  #.........................................................................................................\n  exif_from_path  = do =>\n    my_buffer = new Buffer.alloc 2 * 1024\n    return ( path ) ->\n      fd          = FS.openSync path\n      FS.readSync fd, my_buffer\n      exif        = ExifReader.load my_buffer\n      if ( data = exif?.UserComment ? null )?\n        return JSON.parse ( Buffer.from data.value ).toString 'utf-8'\n      return null\n  #.........................................................................................................\n  do =>\n    DB.db ->\n      console.time 'demo_exifreader'\n      counts    =\n        skipped:  0\n        added:    0\n        deleted:  0\n      rel_paths = globSync patterns, cfg\n      info 'Ω__17', \"found #{rel_paths.length} matching files\"\n      for rel_path in rel_paths\n        count++; whisper count if ( count %% 1000 ) is 0\n        break if count > 10000 ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n        abs_path  = PATH.resolve base_path, rel_path\n        path_id   = id_from_text abs_path\n        #...................................................................................................\n        if DB.known_path_ids.has path_id\n          # help \"Ω__18 skipping path ID #{rpr path_id}\"\n          counts.skipped++\n          DB.known_path_ids.delete path_id\n        else\n          # warn \"Ω__19 inserting path ID #{rpr path_id}\"\n          counts.added++\n          ### TAINT use prepared statement ###\n          DB.db SQL\"\"\"insert into files ( id, path ) values ( ?, ? );\"\"\", [ path_id, abs_path, ]\n          #.................................................................................................\n          exif = exif_from_path abs_path\n          ### TAINT use prepared statement ###\n          DB.db SQL\"\"\"insert into prompts ( id, prompt ) values ( ?, ? );\"\"\", [ path_id, exif.prompt, ]\n      #.....................................................................................................\n      info \"Ω__21 changes to DB at #{DB.path}: #{rpr counts}\"\n      #.....................................................................................................\n      return null\n    console.timeEnd 'demo_exifreader'\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nprepare_db = ->\n  path                = '/dev/shm/files-and-prompts.sqlite'\n  db                  = new DBay { path, }\n  #.........................................................................................................\n  get_must_initialize = ( db ) ->\n    tables    = db.first_values SQL\"select name from sqlite_schema where type = 'table' order by name;\"\n    tables    = [ tables..., ]\n    R         = false\n    R       or= 'files'    not in tables\n    R       or= 'prompts'  not in tables\n    return R\n  #.........................................................................................................\n  initialize_db = ( db ) ->\n    db ->\n      db SQL\"drop table if exists files;\"\n      db SQL\"drop table if exists prompts;\"\n      db SQL\"\"\"\n        create table files (\n          id      text not null primary key,\n          path    text not null );\"\"\"\n      db SQL\"\"\"\n        create table prompts (\n          id      text not null primary key,\n          prompt  text not null );\"\"\"\n      # db SQL\"insert into texts values ( 3, 'third' );\"\n      # db SQL\"insert into texts values ( 1, 'first' );\"\n      # db SQL\"insert into texts values ( ?, ? );\", [ 2, 'second', ]\n      return null\n    return null\n  #.........................................................................................................\n  if get_must_initialize db\n    warn \"Ω__22 initializing DB at #{path}\"\n    initialize_db db\n  else\n    help \"Ω__23 re-using DB at #{path}\"\n  #.........................................................................................................\n  ### TAINT can we use an API call to get a set? ###\n  known_path_ids = do =>\n    R = new Set()\n    R.add id for id from db.first_values SQL\"select * from files;\"\n    return R\n  #.........................................................................................................\n  return { path, db, known_path_ids, }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_fast_glob()\n  # await demo_node_glob()\n  # await demo_exifr()\n  # await demo_exiftool_vendored()\n  await demo_exifreader()\n  # demo_dbay_with_exifdata()\n"
  ]
}