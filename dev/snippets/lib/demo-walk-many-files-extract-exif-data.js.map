{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-walk-many-files-extract-exif-data.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n\n\n#-----------------------------------------------------------------------------------------------------------\nset_path = ->\n  process.chdir path if ( path = process.argv[ 2 ] ? null )?\n  R = process.cwd()\n  info \"Ω___1 CWD: #{R}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_fast_glob = ->\n  FG        = require 'fast-glob'\n  patterns  = [ '**/*.png', '**/*.jpg', ]\n  cfg       = { dot: true }\n  set_path()\n  #.........................................................................................................\n  await do =>\n    console.time 'fast-glob-async'\n    entries = await FG.glob patterns, cfg\n    console.timeEnd 'fast-glob-async'\n    debug 'Ω___2', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  do =>\n    console.time 'fast-glob-sync'\n    entries = FG.globSync patterns, cfg\n    console.timeEnd 'fast-glob-sync'\n    debug 'Ω___3', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_node_glob = ->\n  { glob\n    globSync  } = require 'glob'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  set_path()\n  #.........................................................................................................\n  await do =>\n    console.time 'node-glob-async'\n    entries = await glob patterns, cfg\n    console.timeEnd 'node-glob-async'\n    debug 'Ω___4', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  do =>\n    console.time 'node-glob-sync'\n    entries = globSync patterns, cfg\n    console.timeEnd 'node-glob-sync'\n    debug 'Ω___5', \"found #{entries.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_exifr = ->\n  PATH          = require 'node:path'\n  { glob\n    globSync  } = require 'glob'\n  EXIFR         = require 'exifr'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  base_path     = set_path()\n  count         = 0\n  #.........................................................................................................\n  do =>\n    console.time 'demo_exifr'\n    for rel_path in ( rel_paths = globSync patterns, cfg )\n      count++; whisper count if ( count %% 1000 ) is 0\n      abs_path  = PATH.resolve base_path, rel_path\n      exif      = await EXIFR.parse abs_path\n      if exif?\n        debug 'Ω___6', abs_path\n        info 'Ω___7', exif\n    console.timeEnd 'demo_exifr'\n    debug 'Ω___8', \"found #{rel_paths.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_exiftool_vendored = ->\n  PATH          = require 'node:path'\n  { glob\n    globSync  } = require 'glob'\n  { exiftool }         = require 'exiftool-vendored'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  base_path     = set_path()\n  count         = 0\n  #.........................................................................................................\n  do =>\n    console.time 'demo_exiftool_vendored'\n    for rel_path in ( rel_paths = globSync patterns, cfg )\n      count++; whisper count if ( count %% 1000 ) is 0\n      abs_path  = PATH.resolve base_path, rel_path\n      exif      = await exiftool.read abs_path\n      if ( data = exif?.UserComment ? null )?\n        data = JSON.parse data\n        # debug 'Ω___9', abs_path\n        # debug 'Ω__10', Object.keys data\n        # info 'Ω__11', data.prompt\n        # info 'Ω__12', data.creation_date\n        # info 'Ω__13', new Date data.creation_date\n    console.timeEnd 'demo_exiftool_vendored'\n    debug 'Ω__14', \"found #{rel_paths.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_exifreader = ->\n  PATH          = require 'node:path'\n  { glob\n    globSync  } = require 'glob'\n  ExifReader    = require 'exifreader'\n  patterns      = [ '**/*.png', '**/*.jpg', ]\n  cfg           = { dot: true }\n  base_path     = set_path()\n  count         = 0\n  #.........................................................................................................\n  do =>\n    console.time 'demo_exifreader'\n    for rel_path in ( rel_paths = globSync patterns, cfg )\n      count++; whisper count if ( count %% 1000 ) is 0\n      abs_path  = PATH.resolve base_path, rel_path\n      exif      = await ExifReader.load abs_path, { async: true, includeUnknown: true, }\n      if ( data = exif?.UserComment ? null )?\n        data = JSON.parse ( Buffer.from data.value ).toString 'utf-8'\n        # debug 'Ω__15', abs_path\n        # debug 'Ω__16', Object.keys data\n        # info 'Ω__17', data.prompt\n        # info 'Ω__18', data.creation_date\n        # info 'Ω__19', new Date data.creation_date\n    console.timeEnd 'demo_exifreader'\n    debug 'Ω__20', \"found #{rel_paths.length} matching files\"\n    return null\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_fast_glob()\n  # await demo_node_glob()\n  # await demo_exifr()\n  # await demo_exiftool_vendored()\n  await demo_exifreader()"
  ]
}