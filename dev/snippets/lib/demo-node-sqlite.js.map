{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-node-sqlite.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-node-sqlite'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require '../../../apps/bricabrac-single-file-modules'\nmkdirp                    = require 'mkdirp'\nenv_paths                 = ( require 'env-paths' ).default 'demo-node-sqlite'\nS                         = require 'node:sqlite'\nPATH                      = require 'node:path'\n{ SQL }                   = require '../../../apps/dbay'\n\n\n#===========================================================================================================\nillegal_codepoint_patterns =\n  unassigned: ///^\\p{Cn}$///v # Control\n  control:    ///^\\p{C}$///v # Control\n  letter:     ///^\\p{L}$///v\n  space:      ///^\\p{Zs}$///v\n  separator:  ///^\\p{Z}$///v\n  mark:       ///^\\p{M}$///v\n  # surrogate:  ///^\\p{C}$///v # Surrogate\n\nget_rough_unicode_category = ( chr ) ->\n  for name, pattern of illegal_codepoint_patterns\n    return name if pattern.test chr\n  return 'other'\n\n\n#===========================================================================================================\ndemo = =>\n  debug 'Ωnql___1', k, v for k, v of env_paths\n  tmp_path  = env_paths.temp\n  db_path   = PATH.join tmp_path, 'chr-widths.sqlite'\n  debug 'Ωnql___2', mkdirp.sync tmp_path\n  debug 'Ωnql___3', db = new S.DatabaseSync db_path\n  #.........................................................................................................\n  db.exec SQL\"\"\"drop table if exists widths;\"\"\"\n  #.........................................................................................................\n  db.exec SQL\"\"\"\n    create table widths (\n      width_text      text    not null primary key,\n      width_cells     integer not null );\"\"\"\n  #.........................................................................................................\n  insert_width = db.prepare SQL\"\"\"insert\n    into widths ( width_text, width_cells )\n    values ( $width_text, $width_cells )\n    on conflict ( width_text ) do update set width_cells = excluded.width_cells;\"\"\"\n  #.........................................................................................................\n  db.exec SQL\"\"\"begin transaction;\"\"\"\n  for cid in [ 0x00_0000 .. 0x00_00ff ]\n    chr     = String.fromCodePoint cid\n    cid_hex = \"U+#{( cid.toString 16 ).padStart 4, '0'}\"\n    chr     = String.fromCodePoint cid\n    ucc     = get_rough_unicode_category chr\n    # debug 'Ωbbsfm___4', cid_hex, ( rpr chr ), ucc\n    width_text  = chr\n    width_cells = null\n    switch ucc\n      when 'control'      then  width_cells = 0\n      when 'separator'    then  width_cells = 0\n      when 'space'        then  width_cells = 1\n      when 'unassigned'   then  width_cells = 1\n      when 'mark'         then  width_cells = 1\n      else                      width_cells = 1\n    insert_width.run { width_text, width_cells, }\n  db.exec SQL\"\"\"commit;\"\"\"\n  for { width_text, width_cells, } from ( db.prepare SQL\"select * from widths order by width_text;\" ).iterate()\n    info 'Ωnql___5', ( rpr width_text ), width_cells\n  # db.exec SQL\"\"\"create index if not exists width_cells_index on widths ( );\"\"\"\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await demo()\n  return null\n"
  ]
}