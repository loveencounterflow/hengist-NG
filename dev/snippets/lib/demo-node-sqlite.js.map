{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-node-sqlite.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-node-sqlite'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require '../../../apps/bricabrac-single-file-modules'\nmkdirp                    = require 'mkdirp'\nenv_paths                 = ( require 'env-paths' ).default 'demo-node-sqlite'\nSQLITE                    = require 'node:sqlite'\nPATH                      = require 'node:path'\n{ SQL }                   = require '../../../apps/dbay'\n{ default: \\\n  on_process_exit,      } = require 'exit-hook'\n{ get_next_free_filename, } = SFMODULES.unstable.require_next_free_filename()\nFS                        = require 'node:fs'\n\n\n#===========================================================================================================\nillegal_codepoint_patterns =\n  unassigned: ///^\\p{Cn}$///v # Control\n  control:    ///^\\p{C}$///v # Control\n  letter:     ///^\\p{L}$///v\n  space:      ///^\\p{Zs}$///v\n  separator:  ///^\\p{Z}$///v\n  mark:       ///^\\p{M}$///v\n  # surrogate:  ///^\\p{C}$///v # Surrogate\n\n#-----------------------------------------------------------------------------------------------------------\nget_rough_unicode_category = ( chr ) ->\n  for name, pattern of illegal_codepoint_patterns\n    return name if pattern.test chr\n  return 'other'\n\n\n#===========================================================================================================\nCP = require 'node:child_process'\n\n#-----------------------------------------------------------------------------------------------------------\nget_command_line_result = ( command, input ) ->\n  return ( CP.execSync command, { encoding: 'utf-8', input, } ).replace /\\n$/s, ''\n\n#-----------------------------------------------------------------------------------------------------------\nget_wc_max_line_length = ( text ) ->\n  ### thx to https://unix.stackexchange.com/a/258551/280204 ###\n  return parseInt ( get_command_line_result 'wc --max-line-length', text ), 10\n\n\n#===========================================================================================================\nclass Node_sqlite\n\n  #---------------------------------------------------------------------------------------------------------\n  @functions: {}\n  @statements: {}\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( db_path ) ->\n    @db                 = new SQLITE.DatabaseSync db_path\n    clasz               = @constructor\n    ### NOTE we can't just prepare all the stetments as they depend on DB objects existing or not existing,\n    as the case may be. Hence we prepare statements on-demand and cache them here as needed: ###\n    @statements         = {}\n    #.......................................................................................................\n    fn_cfg_template = { deterministic: true, varargs: false, }\n    for name, fn_cfg of clasz.functions\n      if ( typeof fn_cfg ) is 'function'\n        [ call, fn_cfg, ] = [ fn_cfg, {}, ]\n      else\n        { call, } = fn_cfg\n      fn_cfg  = { fn_cfg_template..., fn_cfg, }\n      call    = call.bind @\n      @db.function name, fn_cfg, call\n    # #.......................................................................................................\n    # for name, sql of clasz.statements\n    #   switch true\n    #     when name.startsWith 'create_table_'\n    #       null\n    #     when name.startsWith 'insert_'\n    #       null\n    #     else\n    #       throw new Error \"Ωnql___1 unable to parse statement name #{rpr name}\"\n    # #   @[ name ] = @prepare sql\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  execute: ( sql ) -> @db.exec sql\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare: ( sql ) -> @db.prepare sql\n\n\n#===========================================================================================================\nclass Segment_width_db extends Node_sqlite\n\n  #---------------------------------------------------------------------------------------------------------\n  @functions:\n    #.......................................................................................................\n    width_from_text:\n      deterministic:  true\n      varargs:        false\n      call:           ( text ) -> get_wc_max_line_length text\n    #.......................................................................................................\n    length_from_text:\n      deterministic:  true\n      varargs:        false\n      call:           ( text ) -> text.length\n\n  #---------------------------------------------------------------------------------------------------------\n  @statements:\n    #.......................................................................................................\n    create_table_segments: SQL\"\"\"\n      drop table if exists segments;\n      create table segments (\n          segment_text      text    not null primary key,\n          segment_width     integer not null generated always as ( width_from_text(  segment_text ) ) stored,\n          segment_length    integer not null generated always as ( length_from_text( segment_text ) ) stored,\n        constraint segment_width_eqgt_zero  check ( segment_width  >= 0 ),\n        constraint segment_length_eqgt_zero check ( segment_length >= 0 ) );\"\"\"\n    # #.......................................................................................................\n    # insert_segment: SQL\"\"\"\n    #   insert into segments  ( segment_text,   segment_width,  segment_length  )\n    #                 values  ( $segment_text,  $segment_width, $segment_length )\n    #     on conflict ( segment_text ) do update\n    #                 set     (                 segment_width,  segment_length  ) =\n    #                         ( excluded.segment_width, excluded.segment_length );\"\"\"\n    #.......................................................................................................\n    insert_segment: SQL\"\"\"\n      insert into segments  ( segment_text  )\n                    values  ( $segment_text )\n        on conflict ( segment_text ) do nothing\n        returning *;\"\"\"\n    #.......................................................................................................\n    select_row_from_segments: SQL\"\"\"\n      select * from segments where segment_text = $segment_text limit 1;\"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( db_path ) ->\n    super db_path\n    clasz   = @constructor\n    @cache  = new Map()\n    ### TAINT should be done automatically ###\n    @statements =\n      insert_segment:           @prepare clasz.statements.insert_segment\n      select_row_from_segments: @prepare clasz.statements.select_row_from_segments\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get_many_segment_metrics: ( segment_texts... ) ->\n    ### TAINT consider bundling requests into single one using JSON array ###\n    segment_texts = segment_texts.flat Infinity\n    R = Object.create null\n    for segment_text in segment_texts\n      if ( row = @cache.get segment_text )?\n        null\n      else if ( row = @statements.select_row_from_segments.get { segment_text, } )?\n        @cache.set segment_text, row\n      else\n        row = @statements.insert_segment.get { segment_text, }\n        @cache.set segment_text, row\n      R[ segment_text ] = row\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_single_segment_metrics: ( segment_text ) -> return R for _, R of @get_many_segment_metrics segment_text\n\n\n#===========================================================================================================\ndemo = =>\n  debug 'Ωnql___2', k, v for k, v of env_paths\n  tmp_path                    = env_paths.temp\n  db_path                     = PATH.join tmp_path, 'chr-widths.sqlite'\n  changeset_intermediate_ins  = \"#{db_path}.changeset.intermediate\"\n  changeset_final_path_ins    = \"#{db_path}.changeset.finalized\"\n  changeset                   = null\n  session                     = null\n  debug 'Ωnql___3', mkdirp.sync tmp_path\n  debug 'Ωnql___4', db = new Segment_width_db db_path\n  on_process_exit ( P... ) ->\n    debug 'Ωnql___5', \"segment count before changeset application: #{count_segments.get().count}\"\n    return null unless session?\n    ### * obtain changeset                                    ###\n    changeset = session.patchset()\n    # changeset = session.changeset()\n    ### * to avoid application of unfinished changesets:      ###\n    ###   * write changeset to intermediate file              ###\n    changeset_intermediate_path = get_next_free_filename changeset_intermediate_ins\n    FS.writeFileSync changeset_intermediate_path, changeset\n    help 'Ωnql___6', \"changeset written to #{changeset_intermediate_path}\"\n    ###   * rename intermediate file to final version         ###\n    changeset_final_path = get_next_free_filename changeset_final_path_ins\n    FS.renameSync changeset_intermediate_path, changeset_final_path\n    help 'Ωnql___7', \"changeset renamed to #{changeset_final_path}\"\n    ### * apply changeset to read-only DB                     ###\n    ac_cfg =\n      onConflict: ( type_of_change ) -> SQLITE.constants.SQLITE_CHANGESET_OMIT\n    debug 'Ωnql___8', db.db.applyChangeset ( FS.readFileSync changeset_final_path ), ac_cfg\n    debug 'Ωnql___9', \"segment count after changeset application: #{count_segments.get().count}\"\n    return null\n  #.........................................................................................................\n  db.execute SQL\"\"\"drop table if exists segments;\"\"\"\n  db.execute db.constructor.statements.create_table_segments\n  insert_segment = db.prepare db.constructor.statements.insert_segment\n  #.........................................................................................................\n  all_segments    = db.prepare SQL\"\"\"select * from segments order by segment_text;\"\"\"\n  count_segments  = db.prepare SQL\"select count(*) as count from segments;\"\n  #.........................................................................................................\n  session = db.db.createSession()\n  db.execute SQL\"\"\"begin transaction;\"\"\"\n  for cid in [ 0x00_000c .. 0x00_0050 ]\n    chr     = String.fromCodePoint cid\n    cid_hex = \"U+#{( cid.toString 16 ).padStart 4, '0'}\"\n    chr     = String.fromCodePoint cid\n    ucc     = get_rough_unicode_category chr\n    # debug 'Ωbbsfm__10', cid_hex, ( rpr chr ), ucc\n    segment_text    = chr\n    segment_width   = null\n    segment_length  = null\n    switch ucc\n      when 'control'\n        segment_width   = 0\n        segment_length  = 0\n      when 'separator'\n        segment_width   = 0\n        segment_length  = 0\n      else\n        segment_width   = 1 ### TAINT run wc --max-line-length ###\n        segment_length  = 1\n    info 'Ωnql__11', insert_segment.all { segment_text, }\n  db.execute SQL\"\"\"commit;\"\"\"\n  info 'Ωnql__12', insert_segment.all { segment_text: \"a somewhat longer text\", }\n  info 'Ωnql__13', insert_segment.all { segment_text: \"a text\", }\n  info 'Ωnql__14', insert_segment.all { segment_text: \"A\", }\n  info 'Ωnql__15', insert_segment.all { segment_text: \"9\", }\n  urge 'Ωnql__16', insert_segment.all { segment_text: \"\\n\", }\n  urge 'Ωnql__17', insert_segment.all { segment_text: \"\", }\n  urge 'Ωnql__18', insert_segment.all { segment_text: \"$(ls)\", }\n  # for { segment_text, segment_width, segment_length, } from all_segments.iterate()\n  #   info 'Ωnql__19', ( rpr segment_text ), segment_width, segment_length\n  #.........................................................................................................\n  # some_segments = db.prepare SQL\"\"\"select * from segments where segment_text in ( $texts );\"\"\"\n  # debug 'Ωnql__20', some_segments.run { texts: [ 'a', 'b', ], }\n  # some_segments = db.prepare SQL\"\"\"select * from segments where segment_text in (\n  #   select value from json_each(?) );\"\"\"\n  # some_segments.setReturnArrays true\n  # for { segment_text, segment_width, segment_length, }, idx in some_segments.all ( JSON.stringify [ 'a', 'b', ] )\n  #   urge 'Ωnql__21', idx, ( rpr segment_text ), segment_width, segment_length\n  #.........................................................................................................\n  info 'Ωnql__22', db.cache.size\n  info 'Ωnql__23', db.get_many_segment_metrics 'A', 'a somewhat longer text', 'Z'\n  info 'Ωnql__24', db.cache.size\n  info 'Ωnql__25', db.get_single_segment_metrics 'a new text'\n  info 'Ωnql__26', db.get_single_segment_metrics 'another new text'\n  info 'Ωnql__27', db.get_single_segment_metrics 'xxxxxxxxxxxxxxxx'\n  info 'Ωnql__28', db.cache.size\n  info 'Ωnql__29', count_segments.get()\n  # info 'Ωnql__30', db.cache\n  # #.........................................................................................................\n  # some_segments_with_widths = db.prepare SQL\"\"\"\n  #   select\n  #     $text as my_text,\n  #     width_from_text( $text ) as width;\"\"\"\n  # debug 'Ωnql__31', some_segments_with_widths.all { text: '765', }\n  #.........................................................................................................\n  debug 'Ωnql__32', ( require 'node:fs' ).writeFileSync '/tmp/changeset.bin', session.patchset()\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await demo()\n  return null\n"
  ]
}