{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-doublestack-proxy-as-html-producer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\nrequire_raw = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  class XXX_arity_error extends Error\n  { get_first_argument, } = SFMODULES.require_tagfun_tools()\n  { set_getter,         } = SFMODULES.require_managed_property_tools()\n\n  #-----------------------------------------------------------------------------------------------------------\n  class Raw extends String\n    set_getter @, Symbol.species, -> Raw\n  # class Raw\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ( text ) ->\n      super text\n      unless ( arity = arguments.length ) is 1\n        throw new XXX_arity_error \"Ωidsp__10 expected 1 argument, got #{arity}\"\n      return undefined\n\n  #   #---------------------------------------------------------------------------------------------------------\n  #   toString: -> @data\n\n  #-----------------------------------------------------------------------------------------------------------\n  raw     = ( P... ) -> new Raw get_first_argument P...\n  is_raw  = ( x ) -> x instanceof Raw\n\n  #-----------------------------------------------------------------------------------------------------------\n  return { Raw, raw, is_raw, }\n\n\n#===========================================================================================================\ntests =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_is_tagfun_call: ->\n    { is_tagfun_call,                  } = SFMODULES.require_tagfun_tools()\n    fn = ( P... ) -> is_tagfun_call P...\n    @eq ( Ωidsp__11 = -> fn()             ), false\n    @eq ( Ωidsp__12 = -> fn [ 1, 2, 3, ]  ), false\n    @eq ( Ωidsp__13 = -> fn\"[ 1, 2, 3, ]\" ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_escape_html_text: ->\n    { escape_html_text, } = SFMODULES.require_escape_html_text()\n    @eq ( Ωidsp__14 = -> escape_html_text ''                    ), ''\n    @eq ( Ωidsp__15 = -> escape_html_text 'abc'                 ), 'abc'\n    @eq ( Ωidsp__16 = -> escape_html_text 'abc<tag>d&e&f</tag>' ), 'abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_raw: ->\n    { Raw, raw,         } = require_raw()\n    { escape_html_text, } = SFMODULES.require_escape_html_text()\n    @throws ( Ωidsp__17 = -> new Raw                ), /expected 1 argument/\n    @throws ( Ωidsp__18 = -> new Raw()              ), /expected 1 argument/\n    do =>\n      result = raw '<&>'\n      @eq ( Ωidsp__19 = -> result instanceof Raw  ), true\n      @eq ( Ωidsp__20 = -> result.length          ), 3\n      @eq ( Ωidsp__21 = -> Array.from result      ), [ '<', '&', '>', ]\n    do =>\n      result = raw'<&>'\n      @eq ( Ωidsp__22 = -> result instanceof Raw  ), true\n      @eq ( Ωidsp__23 = -> result.length          ), 3\n      @eq ( Ωidsp__24 = -> Array.from result      ), [ '<', '&', '>', ]\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack: ->\n    { Stack\n      Doublestack, }  = SFMODULES.require_stack_classes()\n    ds                = new Doublestack()\n    my_stack_1        = null\n    my_stack_2        = null\n    @eq ( Ωidsp__25 = -> ds.data                                                  ), []\n    @eq ( Ωidsp__26 = -> ds.length                                                ), 0\n    @eq ( Ωidsp__27 = -> ds.peek_stack null                                       ), null\n    @eq ( Ωidsp__28 = -> ( my_stack_1 = ds.push_new_stack()   ) instanceof Stack  ), true\n    @eq ( Ωidsp__29 = -> ds.length                                                ), 1\n    @eq ( Ωidsp__30 = -> ( my_stack_2 = ds.peek_stack()       ) instanceof Stack  ), true\n    @eq ( Ωidsp__31 = -> my_stack_1 is my_stack_2                                 ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack_infiniproxy: ->\n    { is_tagfun_call,\n      get_first_argument,             } = SFMODULES.require_tagfun_tools()\n    { create_doublestack_infiniproxy, } = SFMODULES.require_doublestack_infiniproxy()\n    #.......................................................................................................\n    create_echoing_proxy = ( doublestack ) ->\n      base = ( P... ) ->\n        text  = get_first_argument P...\n        chain = doublestack.peek_stack().data.join '.'\n        return \"[#{chain}:#{rpr text}]\"\n      { proxy, doublestack, } = create_doublestack_infiniproxy base\n      return { proxy, doublestack, }\n    #.......................................................................................................\n    do =>\n      { proxy, doublestack, } = create_echoing_proxy()\n      info 'Ωidsp__32', rpr proxy.gold.bold.underlined\"text 1\"\n      info 'Ωidsp__33', rpr proxy.red.reverse.italic\"text 2\"\n      info 'Ωidsp__34', rpr proxy.red.reverse.italic\"text 2 #{proxy.gold.bold.underlined\"(embedded text)\"}!!\"\n      #.......................................................................................................\n      @eq ( Ωidsp__35 = -> proxy.gold.bold.underlined\"text 1\"                                                 ), \"\"\"[gold.bold.underlined:'text 1']\"\"\"\n      @eq ( Ωidsp__36 = -> proxy.red.reverse.italic\"text 2\"                                                   ), \"\"\"[red.reverse.italic:'text 2']\"\"\"\n      @eq ( Ωidsp__37 = -> proxy.red.reverse.italic\"text 2 #{proxy.gold.bold.underlined\"(embedded text)\"}!!\"  ), \"\"\"[red.reverse.italic:\"text 2 [gold.bold.underlined:'(embedded text)']!!\"]\"\"\"\n      ### NOTE 'unused' property chains shouldn't leave traces on stack, but they do: ###\n      @eq ( Ωidsp__38 = ->                                                          doublestack.length ), 0\n      @eq ( Ωidsp__39 = ->                          proxy.using_chain_2\"some text\"; doublestack.length ), 0\n      @eq ( Ωidsp__40 = -> proxy.building.chain_1;  proxy.using_chain_2\"some text\"; doublestack.length ), 1 ### NOTE: should be 0 ###\n      return null\n    #.......................................................................................................\n    do =>\n      echo '——————————————————————————————————————————————————————————————————————————————'\n      { proxy, doublestack, } = create_echoing_proxy()\n      proxy.a.b.c\n      proxy.d.e.f\n      @eq ( Ωidsp__41 = -> doublestack.length   ), 2\n      @eq ( Ωidsp__42 = -> proxy.g.h.i 127      ), \"[g.h.i:127]\"\n      @eq ( Ωidsp__43 = -> doublestack.length   ), 2\n      @eq ( Ωidsp__44 = -> doublestack.clear()  ), null\n      @eq ( Ωidsp__45 = -> doublestack.length   ), 0\n    #.......................................................................................................\n    do =>\n      echo '——————————————————————————————————————————————————————————————————————————————'\n      { proxy, doublestack, } = create_echoing_proxy()\n      @eq ( Ωidsp__46 = -> proxy.a.b.c 90              ), \"\"\"[a.b.c:90]\"\"\"\n      @eq ( Ωidsp__47 = -> proxy.a.b.c proxy.d.e.f 90  ), \"\"\"[a.b.c:'[d.e.f:90]']\"\"\"\n      @eq ( Ωidsp__48 = -> doublestack.length          ), 0\n      return null\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\ntests_for_doublestack_infiniproxy =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_1: ->\n    { get_first_argument,\n      is_tagfun_call,                 } = SFMODULES.require_tagfun_tools()\n    { create_doublestack_infiniproxy, } = SFMODULES.require_doublestack_infiniproxy()\n    { append,                         } = SFMODULES.require_list_tools()\n    #.......................................................................................................\n    { Raw, raw, is_raw,               } = require_raw()\n    { escape_html_text,               } = SFMODULES.require_escape_html_text()\n    #.......................................................................................................\n    class XXX_no_tagfun_call_error extends Error\n    #.......................................................................................................\n    get_first_argument_for_html = get_first_argument.create Ωidsp__49 = ( x ) ->\n      # debug 'Ωidsp__50', ( rpr x ), ( is_raw x ), ( rpr escape_html_text x )\n      return x if is_raw x\n      # return \"#{x}\" if is_raw x\n      return escape_html_text \"#{x}\"\n      # return raw escape_html_text \"#{x}\"\n    #.......................................................................................................\n    create_html_proxy = ->\n      base = ( P... ) ->\n        unless is_tagfun_call P...\n          throw new XXX_no_tagfun_call_error \"Ωidsp__51 expected call as tagged template, got conventional call\"\n        text  = get_first_argument_for_html P...\n        # debug 'Ωidsp__52', rpr text\n        if doublestack.is_empty\n          return if is_raw text then text else escape_html_text text\n        # return escape_html_text text if doublestack.is_empty\n        chain = doublestack.peek_stack()\n        R = []\n        [ tag_name, attr_names..., ] = chain\n        append R, '<', tag_name\n        debug 'Ωidsp__53', { tag_name, attr_names, }\n        append R, '>', text, '</', tag_name, '>'\n        return raw R.join ''\n      { proxy, doublestack, } = create_doublestack_infiniproxy base\n      return { proxy, doublestack, }\n    #.......................................................................................................\n    { proxy: H, } = create_html_proxy()\n    @eq     ( Ωidsp__54 = -> get_first_argument_for_html '<abc>'          ), '&lt;abc&gt;'\n    @eq     ( Ωidsp__55 = -> get_first_argument_for_html\"#{'<abc>'}\"      ), '&lt;abc&gt;'\n    @throws ( Ωidsp__56 = -> H \"<abc>\"                                    ), /expected call as tagged template/\n    @eq     ( Ωidsp__57 = -> H\"<abc>\"                                     ), '&lt;abc&gt;'\n    @eq     ( Ωidsp__58 = -> H\"#{'<abc>'}\"                                ), '&lt;abc&gt;'\n    @eq     ( Ωidsp__59 = -> H\"#{raw '<abc>'}\"                            ), '<abc>'\n    @eq     ( Ωidsp__60 = -> H\"#{raw'<abc>'}\"                             ), '<abc>'\n    # info 'Ωidsp__61', H.a.b.c\"<xyz>\"\n    # @eq ( Ωidsp__62 = -> \"#{H '<&>'}\"                                      ), \"&lt;&amp;&gt;\"\n    # @eq ( Ωidsp__63 = -> \"#{H'<&>' }\"                                      ), \"&lt;&amp;&gt;\"\n\n    # # @eq ( Ωidsp__64 = -> H '<&>'                                       ), '<&>'\n    # # @eq ( Ωidsp__65 = -> H'<&>'                                        ), '<&>'\n\n    # # @eq ( Ωidsp__66 = -> H\"#{'<&>'}\"                                   ), \"&lt;&amp;&gt;\"\n    # # @eq ( Ωidsp__67 = -> raw '<&>'                                     ), new Raw '<&>'\n    # # @eq ( Ωidsp__68 = -> H raw '<&>'                                   ), '<&>'\n    # # @eq ( Ωidsp__69 = -> H raw'<&>'                                    ), '<&>'\n    # # @eq ( Ωidsp__70 = -> H\"<span>#{98}</span>\"                         ), \"<span>98</span>\"\n    # # @eq ( Ωidsp__71 = -> H\"\"\"<div>#{\"<span>#{98}</span>\"}</div>\"\"\"     ), \"<div>&lt;span&gt;98&lt;/span&gt;</div>\"\n    # # @eq ( Ωidsp__72 = -> H\"\"\"<div>#{H\"<span>#{98}</span>\"}</div>\"\"\"    ), \"<div><span>98</span></div>\"\n    # # @eq ( Ωidsp__73 = -> H\"\"\"<div>#{H \"<span>#{98}</span>\"}</div>\"\"\"   ), \"<div><span>98</span></div>\"\n    # # # @eq ( Ωidsp__74 = -> H.a.b.c H.d.e.f 90  ), \"\"\"[a.b.c:'[d.e.f:90]']\"\"\"\n    return null\n\n\n#===========================================================================================================\nall_tests = { tests, tests_for_doublestack_infiniproxy, }\n\n\n#===========================================================================================================\ndemo_proxy_as_html_producer = ->\n  #.........................................................................................................\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test { all_tests, }\n  ( new Test guytest_cfg ).test { tests_for_doublestack_infiniproxy, }\n  # demo_proxy_as_html_producer()\n  # demo_managed_properties()\n\n\n"
  ]
}