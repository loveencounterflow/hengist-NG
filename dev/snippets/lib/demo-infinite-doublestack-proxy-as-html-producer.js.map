{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-doublestack-proxy-as-html-producer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**: `SQL.insert.into.employees('id','name').values(id,name)`\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n\n#===========================================================================================================\nrequire_html_class = ->\n\n  #---------------------------------------------------------------------------------------------------------\n  class Html\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( name, atrs, content ) ->\n      @name     = name\n      @atrs     = atrs    ? new Map()\n      @content  = content ? []\n      return undefined\n\n    #-------------------------------------------------------------------------------------------------------\n    toString: ->\n      R = []\n      R.push \"<#{@name}\"\n      R.push \" ATRs\"\n      R.push \">\"\n      R.push e for e in @content\n      R.push \"</#{@name}>\"\n      return R.join ''\n\n  #.........................................................................................................\n  return { Html, }\n\n\n#===========================================================================================================\ntests =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_infiniproxy: ->\n    { Html,                           } = require_html_class()\n    { walk_parts,\n      is_tagfun_call,                 } = SFMODULES.require_tagfun_tools()\n    { create_infiniproxy,\n      get_proxy,                      } = SFMODULES.require_infiniproxy()\n    { escape_html_text,               } = SFMODULES.require_escape_html_text()\n    # { append,                         } = SFMODULES.require_list_tools()\n    as_text                             = ( x ) -> \"#{x}\"\n    #.......................................................................................................\n    handler = ( P... ) ->\n      [ name, atrs..., ] = @stack\n      # debug 'Ωdsh___1', [ @stack..., ]\n      debug 'Ωdsh___2', { name, atrs, }\n      content = [ ( walk_parts P... )..., ]\n      # for part from walk_parts P...\n      #   debug 'Ωdsh___3', part\n      return new Html name, null, content\n    #.......................................................................................................\n    handler.on_click = ( P... ) ->\n      # info 'Ωdsh___4', @\n      # info 'Ωdsh___5', H\n      return sub_proxy\n    H         = create_infiniproxy handler\n    sub_proxy = H[ get_proxy ]\n    #.......................................................................................................\n    urge 'Ωdsh___9',          new Html 'div'\n    urge 'Ωdsh__10',          new Html 'div', null, \"content\"\n    urge 'Ωdsh__11', as_text  new Html 'div'\n    urge 'Ωdsh__12', as_text  new Html 'div', null, \"content\"\n    # urge 'Ωdsh__13',          H.div._cssclass\"<content>\"\n    # urge 'Ωdsh__14', as_text  H.div._cssclass\"<content>\"\n    # urge 'Ωdsh__15',          H.div.red.outline.on_click'doit()'\n    urge 'Ωdsh__16',          H.div.red\"<content>\"\n    urge 'Ωdsh__17',          H.div.red.outline.on_click'doit()'.extra\"<content>\"\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    # urge 'Ωdsh__18',          GUY.trm.truth H.div is H.div.on_click\n    urge 'Ωdsh__19',          H.div.on_click'doit()'\n    # urge 'Ωdsh__20',          GUY.trm.truth H.div is H.div.on_click'doit()'\n    # urge 'Ωdsh__21',          H.div.on_click'doit()'._cssclass # \"<content>\"\n    urge 'Ωdsh__22',          H.div.on_click'doit()'._cssclass\"<content>\"\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { tests, }\n\n\n"
  ]
}