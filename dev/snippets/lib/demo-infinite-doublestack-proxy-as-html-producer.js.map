{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-doublestack-proxy-as-html-producer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_list_utils = ->\n  append = ( list, P... ) -> list.splice list.length, 0, P...\n  return { append, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_escape_html_text = ->\n  escape_html_text = ( text ) ->\n    R = text\n    R = R.replace /&/g, '&amp;'\n    R = R.replace /</g, '&lt;'\n    R = R.replace />/g, '&gt;'\n    return R\n  return { escape_html_text, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_text_from_tagged_template_call = ->\n  ### NOTE When `expression_to_string` is given, it will be used to turn each expression (the parts of\n  tagged templates that are within curlies) into a string; could use this to apply some escaping etc. ###\n  create_text_from_tagged_template_call = ( expression_to_string = null ) ->\n    return ( parts, expressions... ) ->\n      R = parts[ 0 ]\n      for expression, idx in expressions\n        if expression_to_string?\n          expression_rpr = expression_to_string expression\n        else\n          expression_rpr  = \"#{expression}\"\n        R += expression_rpr + parts[ idx + 1 ]\n      return R\n    text_from_tagged_template_call = create_text_from_tagged_template_call()\n  return { create_text_from_tagged_template_call, text_from_tagged_template_call, }\n\n\n#===========================================================================================================\nclass Raw\n  constructor: ( text ) ->\n    @data = text\n    return undefined\n  toString: -> @data\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_html_escaped_text_from_tagged_template_call = ( dont_escape = null ) ->\n  { create_text_from_tagged_template_call,  } = require_text_from_tagged_template_call()\n  { escape_html_text,                       } = require_escape_html_text()\n  #.........................................................................................................\n  html_safe_text_from_tagged_template_call = create_text_from_tagged_template_call ( expression ) ->\n    R = \"#{expression}\"\n    if dont_escape?\n      R = escape_html_text R unless dont_escape expression\n    return R\n  #.........................................................................................................\n  return { html_safe_text_from_tagged_template_call, }\n\n\n#===========================================================================================================\ndemo_proxy_as_html_producer = ->\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { demo_proxy_as_html_producer, }\n"
  ]
}