{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-doublestack-proxy-as-html-producer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_list_utils = ->\n  append = ( list, P... ) -> list.splice list.length, 0, P...\n  return { append, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_escape_html_text = ->\n  escape_html_text = ( text ) ->\n    R = text\n    R = R.replace /&/g, '&amp;'\n    R = R.replace /</g, '&lt;'\n    R = R.replace />/g, '&gt;'\n    return R\n  return { escape_html_text, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_text_from_tagged_template_call = ->\n  ### NOTE When `expression_to_string` is given, it will be used to turn each expression (the parts of\n  tagged templates that are within curlies) into a string; could use this to apply some escaping etc. ###\n  ### TAINT should provide means to also format constant parts ###\n  create_text_from_tagged_template_call = ( expression_to_string = null ) ->\n    expression_to_string ?= ( expression ) -> \"#{expression}\"\n    return ( parts, expressions... ) ->\n      R = parts[ 0 ]\n      for expression, idx in expressions\n        R += ( expression_to_string expression ) + parts[ idx + 1 ]\n      return R\n  text_from_tagged_template_call = create_text_from_tagged_template_call()\n  return { create_text_from_tagged_template_call, text_from_tagged_template_call, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_is_tagged_template_call = ->\n  is_tagged_template_call = ( P... ) ->\n    return false unless Array.isArray   P[ 0 ]\n    return false unless Object.isFrozen P[ 0 ]\n    return false unless P[ 0 ].raw?\n    return true\n  return { is_tagged_template_call, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_managed_properties_helpers = ->\n  set_getter = ( object, name, get ) -> Object.defineProperties object, { [name]: { get, }, }\n  hide = ( object, name, value ) => Object.defineProperty object, name,\n      enumerable:   false\n      writable:     true\n      configurable: true\n      value:        value\n  return { set_getter, hide, }\n\n#-----------------------------------------------------------------------------------------------------------\n### NOTE Future Single-File Module ###\nrequire_nameit = ->\n  nameit = ( name, fn ) -> Object.defineProperty fn, 'name', { value: name, }; fn\n  return { nameit, }\n\n\n############################################################################################################\n#\n#===========================================================================================================\nclass Raw\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( text ) ->\n    @data = text\n    return undefined\n  toString: -> @data\n\n#===========================================================================================================\nrequire_stack_classes = ->\n  { set_getter,\n    hide,       } = require_managed_properties_helpers()\n  misfit          = Symbol 'misfit'\n  class XXX_Stack_error extends Error\n\n  #===========================================================================================================\n  class Stack\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      @data = []\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    set_getter @::, 'length', -> @data.length\n\n    #---------------------------------------------------------------------------------------------------------\n    push:     ( x ) -> @data.push x;    null\n    unshift:  ( x ) -> @data.unshift x; null\n\n    #---------------------------------------------------------------------------------------------------------\n    pop: ( fallback = misfit ) ->\n      if @length < 1\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___1 unable to pop value from empty stack\"\n      return @data.pop()\n\n    #---------------------------------------------------------------------------------------------------------\n    shift: ( fallback = misfit ) ->\n      if @length < 1\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___2 unable to shift value from empty stack\"\n      return @data.shift()\n\n    #---------------------------------------------------------------------------------------------------------\n    peek: ( fallback = misfit ) ->\n      if @length < 1\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___3 unable to peek value of empty stack\"\n      return @data.at -1\n\n\n  #===========================================================================================================\n  class Doublestack\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      @data = []\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    set_getter @::, 'length', -> @data.length\n\n    #---------------------------------------------------------------------------------------------------------\n    push_new_stack: -> @data.push ( new Stack() ); @peek_stack()\n    # unshift_new_stack:  -> @data.unshift []; null\n\n    #---------------------------------------------------------------------------------------------------------\n    pop_old_stack: ( fallback = misfit ) ->\n      if @length < 1\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___4 unable to peek value of empty stack\"\n      return @data.pop()\n\n    # #---------------------------------------------------------------------------------------------------------\n    # shift_old_stack:  ( fallback = misfit ) ->\n    #   if @length < 1\n    #     return fallback unless fallback is misfit\n    #     throw new XXX_Stack_error \"Ωidsp___5 unable to peek value of empty stack\"\n    #   return @data.shift()\n\n    #---------------------------------------------------------------------------------------------------------\n    peek_stack: ( fallback = misfit ) ->\n      if @length < 1\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___6 unable to peek value of empty stack\"\n      return @data.at -1\n\n  #-----------------------------------------------------------------------------------------------------------\n  return { Stack, Doublestack, }\n\n#-----------------------------------------------------------------------------------------------------------\ncreate_html_escaped_text_from_tagged_template_call = ( dont_escape = null ) ->\n  ### NOTE will only escape *expressions* of tagged templates, not the constant parts ###\n  { create_text_from_tagged_template_call,  } = require_text_from_tagged_template_call()\n  { escape_html_text,                       } = require_escape_html_text()\n  #.........................................................................................................\n  html_safe_text_from_tagged_template_call = create_text_from_tagged_template_call ( expression ) ->\n    R = \"#{expression}\"\n    if dont_escape?\n      R = escape_html_text R unless dont_escape expression\n    return R\n  #.........................................................................................................\n  return { html_safe_text_from_tagged_template_call, }\n\n\n#===========================================================================================================\ntests = ->\n  { is_tagged_template_call,                  } = require_is_tagged_template_call()\n  { html_safe_text_from_tagged_template_call, } = do =>\n    dont_escape_raw_instances = ( x ) -> x instanceof Raw\n    return create_html_escaped_text_from_tagged_template_call dont_escape_raw_instances\n  #.........................................................................................................\n  do test_is_tagged_template_call = =>\n    fn = ( P... ) -> is_tagged_template_call P...\n    @eq ( Ωidsp___7 = -> fn()             ), false\n    @eq ( Ωidsp___8 = -> fn [ 1, 2, 3, ]  ), false\n    @eq ( Ωidsp___9 = -> fn\"[ 1, 2, 3, ]\" ), true\n    return null\n  #.........................................................................................................\n  do test_escape_html_text = =>\n    { escape_html_text, } = require_escape_html_text()\n    @eq ( Ωidsp__10 = -> escape_html_text ''                    ), ''\n    @eq ( Ωidsp__11 = -> escape_html_text 'abc'                 ), 'abc'\n    @eq ( Ωidsp__12 = -> escape_html_text 'abc<tag>d&e&f</tag>' ), 'abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;'\n    return null\n  #.........................................................................................................\n  do test_html_safe_text_from_tagged_template_call = =>\n    fn = html_safe_text_from_tagged_template_call\n    @eq ( Ωidsp__13 = -> fn''                           ), ''\n    @eq ( Ωidsp__14 = -> fn'abc'                        ), 'abc'\n    @eq ( Ωidsp__15 = -> fn'abc<tag>d&e&f</tag>'        ), 'abc<tag>d&e&f</tag>'\n    @eq ( Ωidsp__16 = -> fn\"(#{'abc<tag>d&e&f</tag>'})\" ), '(abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;)'\n    return null\n  #.........................................................................................................\n  do test_doublestack = =>\n    { Stack\n      Doublestack, }  = require_stack_classes()\n    ds                = new Doublestack()\n    my_stack_1        = null\n    my_stack_2        = null\n    @eq ( Ωidsp__17 = -> ds.data                                                  ), []\n    @eq ( Ωidsp__18 = -> ds.length                                                ), 0\n    @eq ( Ωidsp__19 = -> ds.peek_stack null                                       ), null\n    @eq ( Ωidsp__20 = -> ( my_stack_1 = ds.push_new_stack()   ) instanceof Stack  ), true\n    @eq ( Ωidsp__21 = -> ds.length                                                ), 1\n    @eq ( Ωidsp__22 = -> ( my_stack_2 = ds.peek_stack()       ) instanceof Stack  ), true\n    @eq ( Ωidsp__23 = -> my_stack_1 is my_stack_2                                 ), true\n    return null\n  #.........................................................................................................\n  return null\n\n# #===========================================================================================================\n# demo_managed_properties = ->\n#   # new_properties = ( me, P... ) -> Object.defineProperties me.prototype, P...\n#   { set_getter,\n#     hide,       } = require_managed_properties_helpers()\n#   class D\n#     #---------------------------------------------------------------------------------------------------------\n#     constructor: ->\n#       hide @, 'data', []\n#       return undefined\n#     #---------------------------------------------------------------------------------------------------------\n#     set_getter @::, 'length', -> @data.length\n#   #.........................................................................................................\n#   echo '——————————————————————————————————————————————————————————————————————————————'\n#   d = new D()\n#   d.data.push 5\n#   d.data.push 6\n#   d.data.push 7\n#   debug 'Ωidsp__24', d\n#   debug 'Ωidsp__25', d.length\n#   #.........................................................................................................\n#   return null\n\n#===========================================================================================================\ndemo_proxy_as_html_producer = ->\n  #.........................................................................................................\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { tests, }\n  demo_proxy_as_html_producer()\n  # demo_managed_properties()\n"
  ]
}