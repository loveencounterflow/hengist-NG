{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-doublestack-proxy-as-html-producer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_list_tools = ->\n  append    = ( list, P... ) -> list.splice list.length, 0, P...\n  is_empty  = ( list ) -> list.length is 0\n  return { append, is_empty, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_escape_html_text = ->\n  escape_html_text = ( text ) ->\n    R = text\n    R = R.replace /&/g, '&amp;'\n    R = R.replace /</g, '&lt;'\n    R = R.replace />/g, '&gt;'\n    return R\n  return { escape_html_text, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_tagfun_tools = ->\n  create_get_first_argument_fn = ( as_text = null ) ->\n    as_text ?= ( expression ) -> \"#{expression}\"\n    ### TAINT use proper validation ###\n    unless ( typeof as_text ) is 'function'\n      throw new Error \"Ωidsp___1 expected a function, got #{rpr as_text}\"\n    #.......................................................................................................\n    get_first_argument = ( P... ) ->\n      ### Given the arguments of either a tagged template function call ('tagfun call') or the single\n      argument of a conventional function call, return either\n\n      * the result of applying `as_text()` to the sole argument, or\n\n      * the result of concatenating the constant parts and the interpolated expressions, which each\n      expression replaced by the result of applying `as_text()` to it.\n\n      Another way to describe this behavior is to say that this function treats a conventional call with\n      a single expression the same way that it treats a funtag call with a string that contains nothing but\n      that same expression, so the invariant `( get_first_argument exp ) == ( get_first_argument\"#{ exp }\"\n      )` holds.\n\n      * intended for string producers, text processing, markup production;\n      * list some examples. ###\n      unless is_tagfun_call P...\n        unless P.length is 1\n          throw new Error \"Ωidsp___2 expected 1 argument, got #{P.length}\"\n        return as_text P[ 0 ]\n      #.....................................................................................................\n      [ parts, expressions..., ] = P\n      R = parts[ 0 ]\n      for expression, idx in expressions\n        R += ( as_text expression ) + parts[ idx + 1 ]\n      return R\n    #.......................................................................................................\n    get_first_argument.create = create_get_first_argument_fn\n    return get_first_argument\n\n  #---------------------------------------------------------------------------------------------------------\n  is_tagfun_call = ( P... ) ->\n    return false unless Array.isArray   P[ 0 ]\n    return false unless Object.isFrozen P[ 0 ]\n    return false unless P[ 0 ].raw?\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  return { get_first_argument: create_get_first_argument_fn(), is_tagfun_call, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_managed_property_tools = ->\n  set_getter = ( object, name, get ) -> Object.defineProperties object, { [name]: { get, }, }\n  hide = ( object, name, value ) => Object.defineProperty object, name,\n      enumerable:   false\n      writable:     true\n      configurable: true\n      value:        value\n\n  #---------------------------------------------------------------------------------------------------------\n  return { set_getter, hide, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_nameit = ->\n  nameit = ( name, fn ) -> Object.defineProperty fn, 'name', { value: name, }; fn\n  #---------------------------------------------------------------------------------------------------------\n  return { nameit, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_stack_classes = ->\n  { set_getter,\n    hide,       } = require_managed_property_tools()\n  misfit          = Symbol 'misfit'\n  class XXX_Stack_error extends Error\n\n  #===========================================================================================================\n  class Stack\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      @data = []\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    toString: -> \"[#{ ( \"#{e}\" for e in @data ).join'.' }]\"\n\n    #---------------------------------------------------------------------------------------------------------\n    set_getter @::, 'length',   -> @data.length\n    set_getter @::, 'is_empty', -> @data.length is 0\n    clear: -> @data.length = 0; null\n    [Symbol.iterator]: -> yield from @data\n\n    #---------------------------------------------------------------------------------------------------------\n    push:     ( x ) -> @data.push x;    null\n    unshift:  ( x ) -> @data.unshift x; null\n\n    #---------------------------------------------------------------------------------------------------------\n    pop: ( fallback = misfit ) ->\n      if @is_empty\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___3 unable to pop value from empty stack\"\n      return @data.pop()\n\n    #---------------------------------------------------------------------------------------------------------\n    shift: ( fallback = misfit ) ->\n      if @is_empty\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___4 unable to shift value from empty stack\"\n      return @data.shift()\n\n    #---------------------------------------------------------------------------------------------------------\n    peek: ( fallback = misfit ) ->\n      if @is_empty\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___5 unable to peek value of empty stack\"\n      return @data.at -1\n\n\n  #===========================================================================================================\n  class Doublestack\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      @data = []\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    toString: -> if @length is 0 then \"{ DS[] }\" else \"{ DS[ #{ @length-1} ] = #{@peek_stack '[]'} }\"\n\n    #---------------------------------------------------------------------------------------------------------\n    set_getter @::, 'length',   -> @data.length\n    set_getter @::, 'is_empty', -> @data.length is 0\n    clear: -> @data.length = 0; null\n    ### TAINT might want to iterate over topmost stack in @data ###\n    [Symbol.iterator]: -> yield from @data\n\n    #---------------------------------------------------------------------------------------------------------\n    push_new_stack: -> @data.push ( new Stack() ); @peek_stack()\n    # unshift_new_stack:  -> @data.unshift []; null\n\n    #---------------------------------------------------------------------------------------------------------\n    pop_old_stack: ( fallback = misfit ) ->\n      if @is_empty\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___6 unable to peek value of empty stack\"\n      return @data.pop()\n\n    # #---------------------------------------------------------------------------------------------------------\n    # shift_old_stack:  ( fallback = misfit ) ->\n    #   if @is_empty\n    #     return fallback unless fallback is misfit\n    #     throw new XXX_Stack_error \"Ωidsp___7 unable to peek value of empty stack\"\n    #   return @data.shift()\n\n    #---------------------------------------------------------------------------------------------------------\n    peek_stack: ( fallback = misfit ) ->\n      if @is_empty\n        return fallback unless fallback is misfit\n        throw new XXX_Stack_error \"Ωidsp___8 unable to peek value of empty stack\"\n      return @data.at -1\n\n  #-----------------------------------------------------------------------------------------------------------\n  return { Stack, Doublestack, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_doublestack_infiniproxy = ->\n  { Stack,\n    Doublestack,  } = require_stack_classes()\n  #...........................................................................................................\n  dsip_cfg_template =\n    base:                     null\n    is_initial:               true\n    # empty_stack_on_new_chain: true\n  #-----------------------------------------------------------------------------------------------------------\n  create_doublestack_infiniproxy = ( base ) ->\n    doublestack = new Doublestack()\n    get_proxy   = Symbol 'get_proxy'\n    #.........................................................................................................\n    extendended_base = ( P... ) ->\n      R = base P...\n      doublestack.pop_old_stack() unless doublestack.is_empty\n      return R\n    #---------------------------------------------------------------------------------------------------------\n    new_doublestack_infiniproxy = ( cfg ) ->\n      cfg = { dsip_cfg_template..., cfg..., }\n      # cfg.is_initial = false unless cfg.empty_stack_on_new_chain\n      #.......................................................................................................\n      proxy = new Proxy extendended_base,\n        get: ( target, key ) ->\n          return new_doublestack_infiniproxy { base, is_initial: false, } if key is get_proxy\n          return target[ key ]                                            if ( typeof key ) is 'symbol'\n          return target[ key ]                                            if Reflect.has target, key\n          doublestack.push_new_stack()                                    if cfg.is_initial\n          doublestack.peek_stack().push key\n          return R\n      if cfg.is_initial then  R = new_doublestack_infiniproxy { base, is_initial: false, }\n      else                    R = proxy\n      return proxy\n    #.........................................................................................................\n    return do ( proxy = new_doublestack_infiniproxy base ) => { proxy, doublestack, }\n\n  #-----------------------------------------------------------------------------------------------------------\n  return { create_doublestack_infiniproxy, }\n\n\n############################################################################################################\n#\n#===========================================================================================================\nclass Raw\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( text ) ->\n    @data = text\n    return undefined\n  toString: -> @data\n\n# #===========================================================================================================\n# create_html_escaped_text_from_tagfun_call = ( dont_escape = null ) ->\n#   ### NOTE will only escape *expressions* of tagged templates, not the constant parts ###\n#   { get_first_argument,           } = require_tagfun_tools()\n#   { escape_html_text,             } = require_escape_html_text()\n#   #.........................................................................................................\n#   html_safe_text_from_tagfun_call = get_first_argument.create ( expression ) ->\n#     R = \"#{expression}\"\n#     R = escape_html_text R if ( dont_escape? ) and ( not dont_escape expression )\n#     return R\n#   #.........................................................................................................\n#   return { html_safe_text_from_tagfun_call, }\n\n\n#===========================================================================================================\ntests =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_is_tagfun_call: ->\n    { is_tagfun_call,                  } = require_tagfun_tools()\n    fn = ( P... ) -> is_tagfun_call P...\n    @eq ( Ωidsp___9 = -> fn()             ), false\n    @eq ( Ωidsp__10 = -> fn [ 1, 2, 3, ]  ), false\n    @eq ( Ωidsp__11 = -> fn\"[ 1, 2, 3, ]\" ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_escape_html_text: ->\n    { escape_html_text, } = require_escape_html_text()\n    @eq ( Ωidsp__12 = -> escape_html_text ''                    ), ''\n    @eq ( Ωidsp__13 = -> escape_html_text 'abc'                 ), 'abc'\n    @eq ( Ωidsp__14 = -> escape_html_text 'abc<tag>d&e&f</tag>' ), 'abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;'\n    return null\n  # #.........................................................................................................\n  # do test_html_safe_text_from_tagfun_call = =>\n  #   { html_safe_text_from_tagfun_call, } = do =>\n  #     dont_escape_raw_instances = ( x ) -> x instanceof Raw\n  #     return create_html_escaped_text_from_tagfun_call dont_escape_raw_instances\n  #   fn = html_safe_text_from_tagfun_call\n  #   @eq ( Ωidsp__15 = -> fn''                           ), ''\n  #   @eq ( Ωidsp__16 = -> fn'abc'                        ), 'abc'\n  #   @eq ( Ωidsp__17 = -> fn'abc<tag>d&e&f</tag>'        ), 'abc<tag>d&e&f</tag>'\n  #   @eq ( Ωidsp__18 = -> fn\"(#{'abc<tag>d&e&f</tag>'})\" ), '(abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;)'\n  #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack: ->\n    { Stack\n      Doublestack, }  = require_stack_classes()\n    ds                = new Doublestack()\n    my_stack_1        = null\n    my_stack_2        = null\n    @eq ( Ωidsp__19 = -> ds.data                                                  ), []\n    @eq ( Ωidsp__20 = -> ds.length                                                ), 0\n    @eq ( Ωidsp__21 = -> ds.peek_stack null                                       ), null\n    @eq ( Ωidsp__22 = -> ( my_stack_1 = ds.push_new_stack()   ) instanceof Stack  ), true\n    @eq ( Ωidsp__23 = -> ds.length                                                ), 1\n    @eq ( Ωidsp__24 = -> ( my_stack_2 = ds.peek_stack()       ) instanceof Stack  ), true\n    @eq ( Ωidsp__25 = -> my_stack_1 is my_stack_2                                 ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack_infiniproxy: ->\n    { is_tagfun_call,                 } = require_tagfun_tools()\n    { create_doublestack_infiniproxy, } = require_doublestack_infiniproxy()\n    { get_first_argument,          } = require_tagfun_tools()\n    #.......................................................................................................\n    create_echoing_proxy = ( doublestack ) ->\n      base = ( P... ) ->\n        text  = get_first_argument P...\n        chain = doublestack.peek_stack().data.join '.'\n        return \"[#{chain}:#{rpr text}]\"\n      { proxy, doublestack, } = create_doublestack_infiniproxy base\n      return { proxy, doublestack, }\n    #.......................................................................................................\n    do =>\n      { proxy, doublestack, } = create_echoing_proxy()\n      info 'Ωidsp__26', rpr proxy.gold.bold.underlined\"text 1\"\n      info 'Ωidsp__27', rpr proxy.red.reverse.italic\"text 2\"\n      info 'Ωidsp__28', rpr proxy.red.reverse.italic\"text 2 #{proxy.gold.bold.underlined\"(embedded text)\"}!!\"\n      #.......................................................................................................\n      @eq ( Ωidsp__29 = -> proxy.gold.bold.underlined\"text 1\"                                                 ), \"\"\"[gold.bold.underlined:'text 1']\"\"\"\n      @eq ( Ωidsp__30 = -> proxy.red.reverse.italic\"text 2\"                                                   ), \"\"\"[red.reverse.italic:'text 2']\"\"\"\n      @eq ( Ωidsp__31 = -> proxy.red.reverse.italic\"text 2 #{proxy.gold.bold.underlined\"(embedded text)\"}!!\"  ), \"\"\"[red.reverse.italic:\"text 2 [gold.bold.underlined:'(embedded text)']!!\"]\"\"\"\n      ### NOTE 'unused' property chains shouldn't leave traces on stack, but they do: ###\n      @eq ( Ωidsp__32 = ->                                                          doublestack.length ), 0\n      @eq ( Ωidsp__33 = ->                          proxy.using_chain_2\"some text\"; doublestack.length ), 0\n      @eq ( Ωidsp__34 = -> proxy.building.chain_1;  proxy.using_chain_2\"some text\"; doublestack.length ), 1 ### NOTE: should be 0 ###\n      return null\n    #.......................................................................................................\n    do =>\n      echo '——————————————————————————————————————————————————————————————————————————————'\n      { proxy, doublestack, } = create_echoing_proxy()\n      proxy.a.b.c\n      proxy.d.e.f\n      @eq ( Ωidsp__35 = -> doublestack.length   ), 2\n      @eq ( Ωidsp__36 = -> proxy.g.h.i 127      ), \"[g.h.i:'127']\"\n      @eq ( Ωidsp__37 = -> doublestack.length   ), 2\n      @eq ( Ωidsp__38 = -> doublestack.clear()  ), null\n      @eq ( Ωidsp__39 = -> doublestack.length   ), 0\n    #.......................................................................................................\n    do =>\n      echo '——————————————————————————————————————————————————————————————————————————————'\n      { proxy, doublestack, } = create_echoing_proxy()\n      @.eq ( Ωidsp__40 = -> proxy.a.b.c 90              ), \"\"\"[a.b.c:'90']\"\"\"\n      @.eq ( Ωidsp__41 = -> proxy.a.b.c proxy.d.e.f 90  ), \"\"\"[a.b.c:\"[d.e.f:'90']\"]\"\"\"\n      @.eq ( Ωidsp__42 = -> doublestack.length          ), 0\n      return null\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\ntests_for_doublestack_infiniproxy =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_1: ->\n    { is_tagfun_call,                 } = require_tagfun_tools()\n    { create_doublestack_infiniproxy, } = require_doublestack_infiniproxy()\n    { get_first_argument,             } = require_tagfun_tools()\n    { append,                         } = require_list_tools()\n    #.......................................................................................................\n    { escape_html_text,               } = require_escape_html_text()\n    #.......................................................................................................\n    get_first_argument_for_html = get_first_argument.create ( x ) ->\n      return \"#{x}\" if x instanceof Raw\n      return escape_html_text \"#{x}\"\n    #.......................................................................................................\n    create_html_proxy = ( doublestack ) ->\n      base = ( P... ) ->\n        text  = get_first_argument_for_html P...\n        debug 'Ωidsp__43', rpr text\n        return text if doublestack.is_empty\n        chain = doublestack.peek_stack()\n        R = []\n        [ tag_name, attr_names..., ] = chain\n        append R, '<', tag_name\n        debug 'Ωidsp__44', [ tag_name, attr_names, ]\n        append R, '>', text, '</', tag_name, '>'\n        return R.join ''\n      { proxy, doublestack, } = create_doublestack_infiniproxy base\n      return { proxy, doublestack, }\n    #.......................................................................................................\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    { proxy: H, } = create_html_proxy()\n    @.eq ( Ωidsp__45 = -> H '<&>'                 ), \"&lt;&amp;&gt;\"\n    @.eq ( Ωidsp__46 = -> H'<&>'                  ), '<&>'\n    @.eq ( Ωidsp__47 = -> H\"#{'<&>'}\"             ), \"&lt;&amp;&gt;\"\n    @.eq ( Ωidsp__48 = -> H new Raw '<&>'         ), '<&>'\n    @.eq ( Ωidsp__49 = -> H\"<span>#{98}</span>\"   ), \"<span>98</span>\"\n    # @.eq ( Ωidsp__50 = -> H.a.b.c H.d.e.f 90  ), \"\"\"[a.b.c:'[d.e.f:90]']\"\"\"\n    return null\n\n\n#===========================================================================================================\nall_tests = { tests, tests_for_doublestack_infiniproxy, }\n\n\n#===========================================================================================================\ndemo_proxy_as_html_producer = ->\n  #.........................................................................................................\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { all_tests, }\n  # demo_proxy_as_html_producer()\n  # demo_managed_properties()\n"
  ]
}