{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-doublestack-proxy-as-html-producer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n\n#===========================================================================================================\nrequire_html_class = ->\n\n  #---------------------------------------------------------------------------------------------------------\n  class Html\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( name, atrs, content ) ->\n      @name     = name\n      @atrs     = atrs    ? new Map()\n      @content  = content ? []\n      return undefined\n\n    #-------------------------------------------------------------------------------------------------------\n    toString: ->\n      R = []\n      R.push \"<#{name}\"\n      R.push \" ATRs\"\n      R.push \">\"\n      R.push e for e in content\n      R.push \"</#{name}>\"\n      return R.join ''\n  return { Html, }\n\n#===========================================================================================================\ntests =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack_infiniproxy: ->\n    { get_first_argument,\n      is_tagfun_call,                 } = SFMODULES.require_tagfun_tools()\n    { create_doublestack_infiniproxy, } = SFMODULES.require_doublestack_infiniproxy()\n    { append,                         } = SFMODULES.require_list_tools()\n    #.......................................................................................................\n    { escape_html_text,               } = SFMODULES.require_escape_html_text()\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { tests, }\n\n\n"
  ]
}