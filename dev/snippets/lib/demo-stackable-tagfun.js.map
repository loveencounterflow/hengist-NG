{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-stackable-tagfun.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_nameit = ->\n  nameit = ( name, fn ) -> Object.defineProperty fn, 'name', { value: name, }; fn\n  #---------------------------------------------------------------------------------------------------------\n  return { nameit, }\n\n\n#===========================================================================================================\ndemo_stackable_tagfun_with_zwnbsp = ->\n  #===========================================================================================================\n  require_stackable_tagfun = ->\n    { nameit, } = require_nameit()\n    template    =\n      name:       '(anonymous)'\n      as_text:    ( x ) -> \"#{x}\"\n      transform:  ( x ) -> x\n    #.........................................................................................................\n    create_stackable_tagfun = ( cfg ) ->\n      { name,\n        as_text,\n        transform, }  = { template..., cfg..., }\n      #.......................................................................................................\n      stackable_tagfun = ( parts, expressions... ) ->\n        debug 'Ω___1', ( rpr parts[ 0 ] )\n        R = parts[ 0 ]\n        for expression, idx in expressions\n          R += ( as_text expression ) + parts[ idx + 1 ]\n        R = transform R\n        return R\n      #.......................................................................................................\n      nameit name, stackable_tagfun\n      stackable_tagfun.create = create_stackable_tagfun\n      return stackable_tagfun\n    #.........................................................................................................\n    return { stackable_tagfun: create_stackable_tagfun(), }\n  #===========================================================================================================\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  { stackable_tagfun, } = require_stackable_tagfun()\n  P = stackable_tagfun.create\n    name:       'parenthesize'\n    as_text:    ( expression  ) ->\n      expression = \"#{expression}\" unless ( typeof expression ) is 'string'\n      expression = expression[ 1 .. ] if expression.startsWith zwnbsp\n      return expression\n    transform:  ( result      ) -> \"#{zwnbsp}(#{result})\"\n  zwnbsp = '\\ufeff' ### Zero-Width Non-Breaking Space; a no-op at the start of a text ###\n  info 'Ω___2', rpr P\"first!\"\n  info 'Ω___3',     P\"second\"\n  info 'Ω___4', rpr P\"abc#{P\"jkl\"}xyz\"\n  info 'Ω___5', rpr P\"abc#{P\"jkl\"}mno#{P\"pqr#{P\"stu\"}\"}xyz\"\n  info 'Ω___6', rpr P\"abc#{P\"jkl\"}mno#{P\"pqr#{P\"stu\"}\"}xyz\".replace /\\ufeff/gv, '█'\n  info 'Ω___7', rpr Array.from P\"abc\"\n  info 'Ω___8', rpr ( ( Array.from P\"abc\" )[ 0 ].codePointAt 0 ).toString 16\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\ndemo_stackable_tagfun_with_object = ->\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_escape_html_text = ->\n    escape_html_text = ( text ) ->\n      R = text\n      R = R.replace /&/g, '&amp;'\n      R = R.replace /</g, '&lt;'\n      R = R.replace />/g, '&gt;'\n      return R\n    return { escape_html_text, }\n  #===========================================================================================================\n  require_html_class = ->\n    class Html\n\n      #-------------------------------------------------------------------------------------------------------\n      constructor: ( name, atrs, content ) ->\n        @name     = name\n        @atrs     = atrs    ? new Map()\n        @content  = content ? []\n        return undefined\n\n      #-------------------------------------------------------------------------------------------------------\n      toString: ->\n        R = []\n        R.push \"<#{name}\"\n        R.push \" ATRs\"\n        R.push \">\"\n        R.push e for e in content\n        R.push \"</#{name}>\"\n        return R.join ''\n    return { Html, }\n\n  #===========================================================================================================\n  require_stackable_tagfun = ->\n    { nameit,           } = require_nameit()\n    template =\n      name:       '(anonymous)'\n      as_text:    ( x ) -> \"#{x}\"\n      transform:  ( x ) -> x\n    #.........................................................................................................\n    create_stackable_tagfun = ( cfg ) ->\n      { name,\n        as_text,\n        transform, }  = { template..., cfg..., }\n      #.......................................................................................................\n      stackable_tagfun = ( parts, expressions... ) ->\n        debug 'Ω___9', ( rpr parts[ 0 ] )\n        R = ( as_text parts[ 0 ] )\n        for expression, idx in expressions\n          R += ( as_text expression ) + ( as_text parts[ idx + 1 ] )\n        R = transform R\n        return R\n      #.......................................................................................................\n      nameit name, stackable_tagfun\n      stackable_tagfun.create = create_stackable_tagfun\n      return stackable_tagfun\n    #.........................................................................................................\n    return { stackable_tagfun: create_stackable_tagfun(), }\n  #===========================================================================================================\n  { Html,             } = require_html_class()\n  { escape_html_text, } = require_escape_html_text()\n  { stackable_tagfun, } = require_stackable_tagfun()\n  # P = stackable_tagfun.create\n  #   name:       'parenthesize'\n  #   as_text:    ( expression  ) ->\n  #     return expression if expression instanceof Html\n  #     expression = \"#{expression}\" unless typeof expression is 'string'\n  #     return escape_html_text expression\n  #   transform:  ( result      ) -> \"#{zwnbsp}(#{result})\"\n  # info 'Ω__10', rpr P\"first!\"\n  # info 'Ω__11',     P\"second\"\n  # info 'Ω__12', rpr P\"abc#{P\"jkl\"}xyz\"\n  # info 'Ω__13', rpr P\"abc#{P\"jkl\"}mno#{P\"pqr#{P\"stu\"}\"}xyz\"\n  # info 'Ω__14', rpr Array.from P\"abc\"\n  # info 'Ω__15', rpr ( ( Array.from P\"abc\" )[ 0 ].codePointAt 0 ).toString 16\n  #---------------------------------------------------------------------------------------------------------\n  is_tagfun_call = ( P... ) ->\n    return false unless Array.isArray   P[ 0 ]\n    return false unless Object.isFrozen P[ 0 ]\n    return false unless P[ 0 ].raw?\n    return true\n  #---------------------------------------------------------------------------------------------------------\n  walk_raw_parts = ( chunks, values... ) ->\n    chunks      = ( chunk for chunk in chunks.raw )\n    chunks.raw  = chunks[ ... ]\n    Object.freeze chunks\n    yield from walk_parts chunks, values...\n  #---------------------------------------------------------------------------------------------------------\n  walk_parts = ( chunks, values... ) ->\n    unless is_tagfun_call chunks, values...\n      if values.length isnt 0\n        throw new Error \"Ω__16 expected 1 argument in non-template call, got #{arguments.length}\"\n      if typeof chunks is 'string' then [ chunks, values, ] = [ [ chunks, ], [],          ]\n      else                              [ chunks, values, ] = [ [ '', '', ], [ chunks, ], ]\n    #.......................................................................................................\n    yield { chunk: chunks[ 0 ], isa: 'chunk', }\n    for value, idx in values\n      yield { value, isa: 'value', }\n      yield { chunk: chunks[ idx + 1 ], isa: 'chunk', }\n    #.......................................................................................................\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  walk_raw_nonempty_parts = ( chunks, values... ) ->\n    for part from walk_raw_parts chunks, values...\n      yield part unless ( part.chunk is '' ) or ( part.value is '' )\n    return null\n  #---------------------------------------------------------------------------------------------------------\n  walk_nonempty_parts = ( chunks, values... ) ->\n    for part from walk_parts chunks, values...\n      yield part unless ( part.chunk is '' ) or ( part.value is '' )\n    return null\n  #=========================================================================================================\n  # echo '——————————————————————————————————————————————————————————————————————————————'\n  @eq ( Ωt__17 = -> [ ( walk_parts\"\"                  )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n  @eq ( Ωt__18 = -> [ ( walk_parts \"\"                 )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n  @eq ( Ωt__19 = -> [ ( walk_nonempty_parts\"\"         )..., ] ), []\n  @eq ( Ωt__20 = -> [ ( walk_nonempty_parts ''        )..., ] ), []\n  @eq ( Ωt__21 = -> [ ( walk_parts\"a\"                 )..., ] ), [ { chunk: 'a', isa: 'chunk', }, ]\n  @eq ( Ωt__22 = -> [ ( walk_parts\"\\na\"               )..., ] ), [ { chunk: '\\na', isa: 'chunk', }, ]\n  @eq ( Ωt__23 = -> [ ( walk_raw_parts\"\\na\"           )..., ] ), [ { chunk: '\\\\na', isa: 'chunk', }, ]\n  @eq ( Ωt__24 = -> [ ( walk_parts\"#{1}\"              )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n  @eq ( Ωt__25 = -> [ ( walk_nonempty_parts\"#{1}\"     )..., ] ), [ { value: 1, isa: 'value', }, ]\n  @eq ( Ωt__26 = -> [ ( walk_parts\"a#{1}\"             )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n  @eq ( Ωt__27 = -> [ ( walk_parts\"#{1}#{2}\"          )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', } ]\n  @eq ( Ωt__28 = -> [ ( walk_nonempty_parts\"#{1}#{2}\" )..., ] ), [ { value: 1, isa: 'value', }, { value: 2, isa: 'value', }, ]\n  @eq ( Ωt__29 = -> [ ( walk_parts\"a#{1}z\"            )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, ]\n  @eq ( Ωt__30 = -> [ ( walk_parts\"a#{1}z#{2}\"        )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n  @eq ( Ωt__31 = -> [ ( walk_parts \"atoz\"             )..., ] ), [ { chunk: 'atoz', isa: 'chunk', }, ]\n  @eq ( Ωt__32 = -> [ ( walk_parts 12                 )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 12, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n  @eq ( Ωt__33 = -> [ ( walk_nonempty_parts 12        )..., ] ), [ { value: 12, isa: 'value', }, ]\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test { demo_stackable_tagfun_with_zwnbsp, }\n  ( new Test guytest_cfg ).test { demo_stackable_tagfun_with_object, }\n"
  ]
}