{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-stackable-tagfun.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_nameit = ->\n  nameit = ( name, fn ) -> Object.defineProperty fn, 'name', { value: name, }; fn\n  #---------------------------------------------------------------------------------------------------------\n  return { nameit, }\n\n#===========================================================================================================\n### NOTE Future Single-File Module ###\nrequire_escape_html_text = ->\n  escape_html_text = ( text ) ->\n    R = text\n    R = R.replace /&/g, '&amp;'\n    R = R.replace /</g, '&lt;'\n    R = R.replace />/g, '&gt;'\n    return R\n  return { escape_html_text, }\n\n#===========================================================================================================\nrequire_html_class = ->\n\n  #---------------------------------------------------------------------------------------------------------\n  class Html\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( name, atrs, content ) ->\n      @name     = name\n      @atrs     = atrs    ? new Map()\n      @content  = content ? []\n      return undefined\n\n    #-------------------------------------------------------------------------------------------------------\n    toString: ->\n      R = []\n      R.push \"<#{name}\"\n      R.push \" ATRs\"\n      R.push \">\"\n      R.push e for e in content\n      R.push \"</#{name}>\"\n      return R.join ''\n  return { Html, }\n\n\n#===========================================================================================================\nrequire_tagfun_tools = ->\n\n  #---------------------------------------------------------------------------------------------------------\n  is_tagfun_call = ( P... ) ->\n    return false unless Array.isArray   P[ 0 ]\n    return false unless Object.isFrozen P[ 0 ]\n    return false unless P[ 0 ].raw?\n    return true\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_raw_parts = ( chunks, values... ) ->\n    chunks      = ( chunk for chunk in chunks.raw )\n    chunks.raw  = chunks[ ... ]\n    Object.freeze chunks\n    yield from walk_parts chunks, values...\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_parts = ( chunks, values... ) ->\n    unless is_tagfun_call chunks, values...\n      if values.length isnt 0\n        throw new Error \"Ω__16 expected 1 argument in non-template call, got #{arguments.length}\"\n      if typeof chunks is 'string' then [ chunks, values, ] = [ [ chunks, ], [],          ]\n      else                              [ chunks, values, ] = [ [ '', '', ], [ chunks, ], ]\n    #.......................................................................................................\n    yield { chunk: chunks[ 0 ], isa: 'chunk', }\n    for value, idx in values\n      yield { value, isa: 'value', }\n      yield { chunk: chunks[ idx + 1 ], isa: 'chunk', }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_raw_nonempty_parts = ( chunks, values... ) ->\n    for part from walk_raw_parts chunks, values...\n      yield part unless ( part.chunk is '' ) or ( part.value is '' )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_nonempty_parts = ( chunks, values... ) ->\n    for part from walk_parts chunks, values...\n      yield part unless ( part.chunk is '' ) or ( part.value is '' )\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  return { is_tagfun_call, walk_parts, walk_nonempty_parts, walk_raw_parts, walk_raw_nonempty_parts, }\n\n#===========================================================================================================\ntests =\n  walk_tagfun_call_parts: ->\n    # { Html,                     } = require_html_class()\n    # { escape_html_text,         } = require_escape_html_text()\n    # { stackable_tagfun,         } = require_stackable_tagfun()\n    { walk_parts,\n      walk_nonempty_parts,\n      walk_raw_parts,\n      walk_raw_nonempty_parts,  } = require_tagfun_tools()\n    #-------------------------------------------------------------------------------------------------------\n    @eq ( Ωt__17 = -> [ ( walk_parts\"\"                  )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__18 = -> [ ( walk_parts \"\"                 )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__19 = -> [ ( walk_nonempty_parts\"\"         )..., ] ), []\n    @eq ( Ωt__20 = -> [ ( walk_nonempty_parts ''        )..., ] ), []\n    @eq ( Ωt__21 = -> [ ( walk_parts\"a\"                 )..., ] ), [ { chunk: 'a', isa: 'chunk', }, ]\n    @eq ( Ωt__22 = -> [ ( walk_parts\"\\na\"               )..., ] ), [ { chunk: '\\na', isa: 'chunk', }, ]\n    @eq ( Ωt__23 = -> [ ( walk_raw_parts\"\\na\"           )..., ] ), [ { chunk: '\\\\na', isa: 'chunk', }, ]\n    @eq ( Ωt__24 = -> [ ( walk_parts\"#{1}\"              )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__25 = -> [ ( walk_nonempty_parts\"#{1}\"     )..., ] ), [ { value: 1, isa: 'value', }, ]\n    @eq ( Ωt__26 = -> [ ( walk_parts\"a#{1}\"             )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__27 = -> [ ( walk_parts\"#{1}#{2}\"          )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', } ]\n    @eq ( Ωt__28 = -> [ ( walk_nonempty_parts\"#{1}#{2}\" )..., ] ), [ { value: 1, isa: 'value', }, { value: 2, isa: 'value', }, ]\n    @eq ( Ωt__29 = -> [ ( walk_parts\"a#{1}z\"            )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, ]\n    @eq ( Ωt__30 = -> [ ( walk_parts\"a#{1}z#{2}\"        )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__31 = -> [ ( walk_parts \"a#{1}z#{2}\"       )..., ] ), [ { chunk: 'a1z2', isa: 'chunk', }, ]\n    @eq ( Ωt__32 = -> [ ( walk_parts 12                 )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 12, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__33 = -> [ ( walk_nonempty_parts 12        )..., ] ), [ { value: 12, isa: 'value', }, ]\n    #.........................................................................................................\n    return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test { demo_stackable_tagfun_with_zwnbsp, }\n  ( new Test guytest_cfg ).test { tests, }\n"
  ]
}