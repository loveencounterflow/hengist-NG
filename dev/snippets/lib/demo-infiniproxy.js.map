{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infiniproxy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**: `SQL.insert.into.employees('id','name').values(id,name)`\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nC                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n\n\n#===========================================================================================================\ndemo_instance_function_as_proxy = ->\n\n  #===========================================================================================================\n  { D, } = do ->\n    { create_infinyproxy,\n      sys_symbol,           } = SFMODULES.require_infiniproxy()\n    #=========================================================================================================\n    class D\n\n      #-------------------------------------------------------------------------------------------------------\n      constructor: ( callable ) ->\n        @other_prop = 'OTHER_PROP'\n        Object.setPrototypeOf callable, @\n        R = create_infinyproxy callable\n        # ...\n        return R\n\n      #-------------------------------------------------------------------------------------------------------\n      method_of_d: ( value ) ->\n        whisper 'Ω__33', 'METHOD_OF_D'\n        @[ sys_symbol ].stack.push 'generated'\n        @[ sys_symbol ].stack.push 'stuff'\n        @[ sys_symbol ].stack.push \"value:#{rpr value}\"\n        return @[ sys_symbol ].sub_level_proxy\n\n      #-------------------------------------------------------------------------------------------------------\n      property_of_d: 'PROPERTY_OF_D'\n\n    #---------------------------------------------------------------------------------------------------------\n    return exports = { D, }\n  #.........................................................................................................\n  do =>\n    my_fn_3 = ( P... ) ->\n      whisper 'Ω__34', @stack, @stack.is_empty, [ @stack..., ]\n      chain   = [ @stack..., ].join '.'\n      content = ( ( rpr p ) for p in P )\n      return \"[#{chain}:#{content}]\"\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    help 'Ω__35', rpr d = new D my_fn_3\n    help 'Ω__36', reverse GUY.trm.truth ( d instanceof D )   # true\n    help 'Ω__37', rpr Object.getPrototypeOf d\n    help 'Ω__38', rpr ( typeof Object.getPrototypeOf d ) is ( typeof ( -> ) )\n    help 'Ω__39', rpr typeof d\n    help 'Ω__40', rpr Object::toString.call d\n    help 'Ω__41', rpr d instanceof Function\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    info 'Ω__42', rpr d.other_prop     # OTHER_PROP\n    info 'Ω__43', rpr d.method_of_d()  # METHOD_OF_D\n    info 'Ω__44', rpr d.property_of_d  # PROPERTY_OF_D\n    info 'Ω__45', rpr d.unknown_key    # something else: 'unknown_key'\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    info 'Ω__46', rpr d 1, 2, 'c'\n    info 'Ω__47', rpr d.red\n    info 'Ω__48', rpr d 1, 2, 'c'\n    info 'Ω__49', rpr d.red.bold 1, 2, 'c'\n    info 'Ω__50', rpr d.red.bold.method_of_d(123).hola 'ftw'\n    info 'Ω__50', rpr d.red.bold.method_of_d'123'.hola 'ftw'\n  return null\n\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  stack = []\n  #.........................................................................................................\n  template =\n    bearer:       null\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( bearer, base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        unless Reflect.has bearer, key\n          throw new TMP_error \"Ω__26 unknown key #{rpr key}\"\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { bearer, base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = P[ 0 ]\n    while stack.length > 0\n      key = stack.pop()\n      R   = C[ key ] R\n    return R\n  #.........................................................................................................\n  p = new_infiniproxy C, base, { is_initial: true, }\n  info 'Ω__27', p.green.bold.inverse \" holy moly \"\n  #.........................................................................................................\n  info 'Ω__28', p.yellow.italic\"some text\"\n  info 'Ω__29', p.green.bold.inverse.underline\"some text\"\n  ### Building the chain: ###\n  chain = p.cyan.bold\n  chain.underline\n  info 'Ω__30', p \"finally, a call\"\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test { demo_proxy_as_html_producer, }\n  #.........................................................................................................\n  # demo_infinite_proxy()\n  demo_instance_function_as_proxy()\n  demo_colorful_proxy()\n"
  ]
}