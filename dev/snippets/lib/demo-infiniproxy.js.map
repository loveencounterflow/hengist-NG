{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infiniproxy.coffee"
  ],
  "names": [],
  "mappings": "AA0BG;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;EAGH;AAHG,MAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,+BAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA;;;EAMH,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,YAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,KAHF,EAIE,IAJF,EAKE,IALF,EAME,IANF,EAOE,GAPF,EAQE,IARF,EASE,OATF,EAUE,GAVF,CAAA,GAU4B,GAAG,CAAC,GAVhC;;EAWA,CAAA,CAAE,CAAF,CAAA,GAA4B,OAAA,CAAQ,yBAAR,CAA5B;;EACA,KAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,CAArB;EAAT;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,4CAAR,CAA5B;;EACA,IAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,IAA5B;;EACA,SAAA,GAA4B,OAAA,CAAQ,uBAAR,EAjCzB;;;EAqCH,SAAS,CAAC,mBAAV,GAAgC,QAAA,CAAA,CAAA;AAChC,QAAA,KAAA,EAAA,eAAA,EAAA;IAAE,CAAA,CAAE,KAAF,CAAA,GAAwB,SAAS,CAAC,qBAAV,CAAA,CAAxB,EAAF;;;;IAIE,QAAA,GACE;MAAA,OAAA,EAAc,IAAd;MACA,UAAA,EAAc;IADd,EALJ;;WAQE,eAAA,GAAkB,GAAA,CAAI,CAAE,QAAF,CAAJ,EAAmB,QAAA,CAAE,OAAF,EAAW,UAAX,EAAuB,GAAvB,CAAA;AACvC,UAAA,CAAA,EAAA;MAAI,KAA0B,GAAG,CAAC,wBAA9B;QAAA,UAAA,GAAa,MAAb;;MACA,KAAA,GAAQ,IAAI,KAAJ,CAAU,OAAV,EACN;QAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;UACH,IAA0D,GAAA,KAAO,SAAjE;AAAA,mBAAO,eAAA,CAAgB;cAAE,OAAF;cAAW,UAAA,EAAY;YAAvB,CAAhB,EAAP;;UACA,IAAwB,CAAE,OAAO,GAAT,CAAA,KAAkB,QAA1C;AAAA,mBAAO,MAAM,CAAE,GAAF,EAAb;;UACA,IAAoB,UAApB;YAAA,KAAK,CAAC,MAAN,GAAe,EAAf;;UACA,KAAK,CAAC,IAAN,CAAW,GAAX;AACA,iBAAO;QALJ;MAAL,CADM;MAOR,IAAG,UAAH;QAAoB,CAAA,GAAI,eAAA,CAAgB;UAAE,OAAF;UAAW,UAAA,EAAY;QAAvB,CAAhB,EAAxB;OAAA,MAAA;QACoB,CAAA,GAAI,MADxB;;AAEA,aAAO;IAX4B,CAAnB;EATY,EArC7B;;;EA6DH,mBAAA,GAAsB,QAAA,CAAA,CAAA;AACtB,QAAA,IAAA;;IACE,IAAA,GAAO,QAAA,CAAA,GAAE,CAAF,CAAA;AACT,UAAA;MAAI,CAAA,GAAI,CAAA,CAAA,CAAG,KAAK,CAAC,IAAN,CAAW,GAAX,CAAH,CAAA,EAAA,CAAA,CAAsB,GAAA,CAAI,CAAJ,CAAtB,CAAA;MACJ,KAAK,CAAC,MAAN,GAAe;AACf,aAAO;IAHF;IAMJ,CAAA,CAAA,CAAA,GAAA,EAAA;;AACL,UAAA;MAAI,IAAA,CAAK,gFAAL;MACA,CAAA,GAAI,eAAA,CAAgB,IAAhB,EAAsB;QAAE,wBAAA,EAA0B;MAA5B,CAAtB;AAAyD,yBAC7D,CAAC,CAAC;MAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;MACV,CAAC,CAAC;MAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;MACV,CAAC,CAAC;MAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;MACV,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,YAAY,CAAA,SAAA,CAA5B;MACA,KAAA,CAAM,OAAN,EAAe,KAAf;AACA,aAAO;IARN,CAAA;IAWA,CAAA,CAAA,CAAA,GAAA,EAAA;;AACL,UAAA;MAAI,IAAA,CAAK,gFAAL;MACA,CAAA,GAAI,eAAA,CAAgB,IAAhB,EAAsB;QAAE,wBAAA,EAA0B;MAA5B,CAAtB;AAA0D,wBAC9D,CAAC,CAAC;MAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;MACV,CAAC,CAAC;MAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;MACV,CAAC,CAAC;MAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;MACV,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,YAAY,CAAA,SAAA,CAA5B;MACA,KAAA,CAAM,OAAN,EAAe,KAAf;AACA,aAAO;IARN,CAAA;IAUA,CAAA,CAAA,CAAA,GAAA,EAAA;;;;AACL,UAAA,CAAA,EAAA;MAAI,IAAA,CAAK,gFAAL;MACA,CAAA,GAAI,eAAA,CAAgB,IAAhB;MACJ,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAA,SAAA,CAAlC,EAFJ;;MAII,CAAC,CAAC,IAAI,CAAC;MACP,CAAC,CAAC,aAAa,CAAC,QALpB;;MAOI,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,MAAM,CAAA,eAAA,CAAtB;MAIA,KAAA,GAAQ,CAAC,CAAE,SAAF,EAXb;;MAaI,KAAK,CAAC,IAAI,CAAC;MACX,KAAK,CAAC;MACN,KAAK,CAAC;MACN,KAAK,CAAC,OAhBV;;MAkBI,IAAA,CAAK,OAAL,EAAc,KAAK,CAAA,2EAAA,CAAnB;AACA,aAAO;IApBN,CAAA;AAqBH,WAAO;EAlDa,EA7DnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyJH,mBAAA,GAAsB,QAAA,CAAA,CAAA,EAAA;;AACtB,QAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EAAA,eAAA,EAAA,CAAA,EAAA,KAAA,EAAA;IAAQ,YAAN,MAAA,UAAA,QAAwB,MAAxB,CAAA;IACA,KAAA,GAAQ,GADV;;IAGE,QAAA,GACE;MAAA,MAAA,EAAc,IAAd;MACA,IAAA,EAAc,IADd;MAEA,UAAA,EAAc;IAFd,EAJJ;;IAQE,eAAA,GAAkB,GAAA,CAAI,CAAE,QAAF,CAAJ,EAAmB,QAAA,CAAE,MAAF,EAAU,IAAV,EAAgB,UAAhB,EAA4B,GAA5B,CAAA;AACvC,UAAA,CAAA,EAAA;MAAI,KAAA,GAAQ,IAAI,KAAJ,CAAU,IAAV,EACN;QAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;UACH,IAAwB,CAAE,OAAO,GAAT,CAAA,KAAkB,QAA1C;AAAA,mBAAO,MAAM,CAAE,GAAF,EAAb;;UACA,KAAO,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,GAApB,CAAP;YACE,MAAM,IAAI,SAAJ,CAAc,CAAA,kBAAA,CAAA,CAAqB,GAAA,CAAI,GAAJ,CAArB,CAAA,CAAd,EADR;;UAEA,IAAoB,UAApB;YAAA,KAAK,CAAC,MAAN,GAAe,EAAf;;UACA,KAAK,CAAC,IAAN,CAAW,GAAX;AACA,iBAAO;QANJ;MAAL,CADM;MAQR,IAAG,UAAH;QAAoB,CAAA,GAAI,eAAA,CAAgB;UAAE,MAAF;UAAU,IAAV;UAAgB,UAAA,EAAY;QAA5B,CAAhB,EAAxB;OAAA,MAAA;QACoB,CAAA,GAAI,MADxB;;AAEA,aAAO;IAX4B,CAAnB,EARpB;;IAqBE,IAAA,GAAO,QAAA,CAAA,GAAE,CAAF,CAAA;AACT,UAAA,CAAA,EAAA;MAAI,CAAA,GAAI,CAAC,CAAE,CAAF;AACL,aAAM,KAAK,CAAC,MAAN,GAAe,CAArB;QACE,GAAA,GAAM,KAAK,CAAC,GAAN,CAAA;QACN,CAAA,GAAM,CAAC,CAAE,GAAF,CAAD,CAAS,CAAT;MAFR;AAGA,aAAO;IALF,EArBT;;IA4BE,CAAA,GAAI,eAAA,CAAgB,CAAhB,EAAmB,IAAnB,EAAyB;MAAE,UAAA,EAAY;IAAd,CAAzB;IACJ,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAb,CAAqB,aAArB,CAAd,EA7BF;;IA+BE,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,MAAM,CAAC,MAAM,CAAA,SAAA,CAA7B;IACA,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAA,SAAA,CAA5C;IAEA,KAAA,GAAQ,CAAC,CAAC,IAAI,CAAC;IACf,KAAK,CAAC;IACN,IAAA,CAAK,OAAL,EAAc,CAAA,CAAE,iBAAF,CAAd;AACA,WAAO;EAtCa,EAzJnB;;;EAkMH,+BAAA,GAAkC,QAAA,CAAA,CAAA;AAClC,QAAA,CAAA,EAAA,KAAA,EAAA,YAAA,EAAA,IAAA,EAAA;IAAE,CAAA,CAAE,IAAF,CAAA,GAA0B,SAAS,CAAC,8BAAV,CAAA,CAA1B;IACA,CAAA,CAAE,KAAF,CAAA,GAA0B,SAAS,CAAC,qBAAV,CAAA,CAA1B,EADF;;IAGE,YAAA,GAAe,MAAM,CAAC,GAAP,CAAW,OAAX,EAHjB;;IAKE,YAAA,GAAe,QAAA,CAAE,QAAF,CAAA;AACjB,UAAA,SAAA,EAAA,KAAA,EAAA,eAAA,EAAA;MAAI,KAAA,GAAQ;QAAE,KAAA,EAAS,IAAI,KAAJ,CAAA;MAAX,EAAZ;;MAEI,SAAA,GAAY,QAAA,CAAC,CAAE,YAAF,CAAD,CAAA;eAAuB,IAAI,KAAJ,CAAU,QAAV,EAWjC,CAAA;;;;;;;;;;UAAA,KAAA,EAAO,QAAA,CAAE,MAAF,EAAU,GAAV,EAAe,CAAf,CAAA;AACb,gBAAA,CAAA,EAAA;YAAQ,IAAA,CAAK,OAAL,EAAc,CAAA,MAAA,CAAA,CAAS,GAAA,CAAI,CAAE,MAAF,EAAU,GAAV,EAAe,CAAf,EAAkB,YAAlB,CAAJ,CAAT,CAAA,CAAd;YACA,GAAA,GAAM;cAAE,GAAA,EAAK,mBAAP;cAA4B,YAA5B;cAA0C,GAAA;YAA1C;YACN,CAAA,GAAI,OAAO,CAAC,KAAR,CAAc,MAAd,EAAsB,GAAtB,EAA2B,CAA3B;AAA6B,mFACjC,KAAK,CAAC,KAAK,CAAC,KAAZ,CAAA;AACA,mBAAO;UALF,CAAP;;UAQA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;YACH,IAAA,CAAK,OAAL,EAAc,CAAA,IAAA,CAAA,CAAO,GAAA,CAAI,CAAE,MAAF,EAAU,GAAV,CAAJ,CAAP,CAAA,CAAd;YACA,IAAyB,GAAA,KAAkB,YAA3C;AAAA,qBAAO,MAAP;;YACA,IAAyB,CAAE,OAAO,GAAT,CAAA,KAAkB,QAA3C;AAAA,qBAAO,MAAM,CAAE,GAAF,EAAb;;YACA,IAAkC,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,GAApB,CAAlC;AAAA,qBAAO,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,GAApB,EAAP;;YACA,IAAuB,YAAvB;cAAA,KAAK,CAAC,KAAK,CAAC,KAAZ,CAAA,EAAA;;YACA,KAAK,CAAC,KAAK,CAAC,IAAZ,CAAiB,GAAjB,EALR;;AAOQ,mBAAO;UARJ;QARL,CAXiC;MAAvB,EAFhB;;MA+BI,eAAA,GAAkB,SAAA,CAAU;QAAE,YAAA,EAAc;MAAhB,CAAV;MAClB,eAAA,GAAkB,SAAA,CAAU;QAAE,YAAA,EAAc;MAAhB,CAAV;AAClB,aAAO;IAlCM;IAqCT;;MAAN,MAAA,EAAA,CAAA;;QAGE,WAAa,CAAE,QAAF,CAAA;AACjB,cAAA;UAAM,IAAC,CAAA,UAAD,GAAc;UACd,MAAM,CAAC,cAAP,CAAsB,QAAtB,EAAgC,IAAhC;UACA,CAAA,GAAI,YAAA,CAAa,QAAb,EAFV;;AAIM,iBAAO;QALI,CADjB;;;QASI,WAAa,CAAA,CAAA;iBAAG;QAAH;;MAXf;;kBAYE,aAAA,GAAe;;;;;IAEd,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA;MAAI,IAAA,CAAK,gFAAL;MACA,CAAA,GAAI,IAAI,CAAJ,CAAM,QAAA,CAAA,GAAE,CAAF,CAAA;eAAY,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,CAAJ,CAAhB,CAAA,EAAA;MAAZ,CAAN;MACJ,KAAA,CAAM,OAAN,EAAe,CAAf,EAFJ;MAGI,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,UAAjB,EAHJ;MAII,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,WAAF,CAAA,CAAf,EAJJ;MAKI,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,aAAjB,EALJ;MAMI,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,WAAjB,EANJ;MAOI,KAAA,CAAM,OAAN,EAAe,CAAA,YAAa,CAA5B,EAPJ;aAQI,KAAA,CAAM,OAAN,EAAe,CAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,GAAR,CAAf;IATC,CAAA;IAWA,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA,KAAA,EAAA;MAAI,IAAA,CAAK,gFAAL;MACA,KAAA,GAAQ,QAAA,CAAA,GAAE,CAAF,CAAA;eAAY,CAAA,kBAAA,CAAA,CAAqB,GAAA,CAAI,KAAJ,CAArB,CAAA,QAAA,CAAA,CAAyC,GAAA,CAAI,IAAJ,CAAzC,CAAA,MAAA,CAAA,CAAuD,GAAA,CAAI,CAAJ,CAAvD,CAAA;MAAZ;MACR,IAAA,CAAK,KAAL,EAAY,YAAZ,EAA0B,2BAA1B;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,KAAA,GAAQ,YAAA,CAAa,KAAb,CAAZ,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,KAAA,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,CAAJ,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,KAAK,CAAC,KAAV,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,KAAK,CAAC,UAAV,CAAd;aACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAE,OAAO,MAAM,CAAC,cAAP,CAAsB,KAAtB,CAAT,CAAA,KAA0C,CAAE,OAAO,CAAE,QAAA,CAAA,CAAA,EAAA,CAAF,CAAT,CAA9C,CAAd;IARC,CAAA;IAUA,CAAA,CAAA,CAAA,GAAA,EAAA;AACL,UAAA,CAAA,EAAA;MAAI,IAAA,CAAK,gFAAL;MACA,OAAA,GAAU,QAAA,CAAA,GAAE,CAAF,CAAA;QACR,IAAA,CAAK,OAAL,EAAc,IAAC,CAAA,KAAf,EAAsB,IAAC,CAAA,KAAK,CAAC,QAA7B,EAAuC,CAAE,GAAA,IAAC,CAAA,KAAH,CAAvC;AACA,eAAO,CAAA,kBAAA,CAAA,CAAqB,GAAA,CAAI,OAAJ,CAArB,CAAA,QAAA,CAAA,CAA2C,GAAA,CAAI,IAAJ,CAA3C,CAAA,MAAA,CAAA,CAAyD,GAAA,CAAI,CAAJ,CAAzD,CAAA;MAFC;MAGV,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAA,GAAI,IAAI,CAAJ,CAAM,OAAN,CAAR,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,UAAN,CAAd,EALJ;MAMI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,WAAF,CAAA,CAAJ,CAAd,EANJ;MAOI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,aAAN,CAAd,EAPJ;MAQI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,WAAN,CAAd,EARJ;MASI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAA,YAAa,CAAjB,CAAd,EATJ;MAUI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAA,CAAE,CAAF,EAAK,CAAL,EAAQ,GAAR,CAAJ,CAAd;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,GAAN,CAAd;aACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,GAAG,CAAC,IAAN,CAAW,CAAX,EAAc,CAAd,EAAiB,GAAjB,CAAJ,CAAd;IAbC,CAAA;AAcH,WAAO;EA5FyB,EAlM/B;;;EAmSH,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;AACxC,UAAA;MAAE,WAAA,GAAc;QAAE,cAAA,EAAgB,KAAlB;QAA0B,WAAA,EAAa,KAAvC;QAA8C,aAAA,EAAe;MAA7D;MACd,WAAA,GAAc;QAAE,cAAA,EAAgB,IAAlB;QAA0B,WAAA,EAAa,KAAvC;QAA8C,aAAA,EAAe;MAA7D,EADhB;;;;MAKE,mBAAA,CAAA;aACA,+BAAA,CAAA;IAPsC,CAAA,IAAxC;;AAnSG",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**: `SQL.insert.into.employees('id','name').values(id,name)`\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nC                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n\n#===========================================================================================================\nSFMODULES.require_infiniproxy = ->\n  { Stack,            } = SFMODULES.require_stack_classes()\n  # stack                 = new Stack()\n  # get_proxy = Symbol 'get_proxy'\n  #.........................................................................................................\n  template =\n    handler:      null\n    is_initial:   true\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( handler, is_initial, cfg ) ->\n    is_initial = false unless cfg.empty_stack_on_new_chain\n    proxy = new Proxy handler,\n      get: ( target, key ) ->\n        return new_infiniproxy { handler, is_initial: false, } if key is get_proxy\n        return target[ key ] if ( typeof key ) is 'symbol'\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { handler, is_initial: false, }\n    else                R = proxy\n    return proxy\n\n\n#===========================================================================================================\ndemo_infinite_proxy = ->\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = \"#{stack.join '.'}::#{rpr P}\"\n    stack.length = 0\n    return R\n  #.........................................................................................................\n  ### These calls will be `stack`ed but then get thrown away as soon as any property of `p` is used: ###\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base, { empty_stack_on_new_chain: true } ### default ###\n    p.ooops;  debug 'Ω___1', stack\n    p.wat;    debug 'Ω___2', stack\n    p.nö;     debug 'Ω___3', stack\n    info 'Ω___4', p.more_of_this\"some text\"\n    debug 'Ω___5', stack\n    return null\n  #.........................................................................................................\n  ### These calls will be `stack`ed and remain on the stack until `p` is called: ###\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base, { empty_stack_on_new_chain: false } ### opt-in ###\n    p.ooops;  debug 'Ω___6', stack\n    p.wat;    debug 'Ω___7', stack\n    p.nö;     debug 'Ω___8', stack\n    info 'Ω___9', p.more_of_this\"some text\"\n    debug 'Ω__10', stack\n    return null\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base\n    info 'Ω__11', p.red.bold.underline\"some text\"\n    ### Some random property retrievals without call... ###\n    p.bold.underline\n    p.strikethrough.inverse\n    ### ...won't influence the meaning of the next property chain: ###\n    info 'Ω__12', p.yellow\"finally, a call\"\n    ### But if needed, can always reference a proxy from an intermediate result and build a property chain\n    on that; here we used a special unique value `get_proxy` that produces an intermediate result *without*\n    adding it to the property chain: ###\n    proxy = p[ get_proxy ]\n    ### Imagine we go through some branching if/then clauses to decide whether to add some styles: ###\n    proxy.bold.underline\n    proxy.strikethrough\n    proxy.inverse\n    proxy.yellow\n    ### Finally, we're ready to print: ###\n    info 'Ω__13', proxy\"this will be printed in bold + underline + strikethrough + inverse + yellow\"\n    return null\n  return null\n\n# #===========================================================================================================\n# demo_picocolors_chalk = ->\n#   do =>\n#     # info 'Ω__14',     C.yellow\"█▒█\"\n#     # info 'Ω__15',     C.yellow\"█#{ C.green\"▒\" }█\"\n#     info 'Ω__16',     C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n#     # info 'Ω__17', rpr C.yellow\"█▒█\"\n#     # info 'Ω__18', rpr C.yellow\"█#{ C.green\"▒\" }█\"\n#     info 'Ω__19', rpr C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n#     info 'Ω__20',     C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n#     info 'Ω__21', rpr C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n#     return null\n#   do =>\n#     #-----------------------------------------------------------------------------------------------------------\n#     color_codes =\n#       red:    '\\x1B[31m'\n#       green:  '\\x1B[32m'\n#       yellow: '\\x1B[33m'\n#     color_off = '\\x1B[39m'\n#     #.......................................................................................................\n#     colorizer_from_color_code = ( color_code ) ->\n#       R = ( parts, expressions... ) ->\n#         R = color_code + parts[ 0 ]\n#         for expression, idx in expressions\n#           inner = expression.toString().replace /\\x1B\\[39m$/, ''\n#           R += ( inner ) + ( color_code + parts[ idx + 1 ] )\n#         return R + color_off\n#       return R\n#     #.......................................................................................................\n#     red     = colorizer_from_color_code color_codes.red\n#     green   = colorizer_from_color_code color_codes.green\n#     yellow  = colorizer_from_color_code color_codes.yellow\n#     # info 'Ω__22',     red\"█#{'▒'}█#{ 'GREEN' }###\"\n#     # info 'Ω__23', rpr red\"█#{'▒'}█#{ 'GREEN' }###\"\n#     info 'Ω__24',     red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n#     info 'Ω__25', rpr red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n#     return null\n#   return null\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  stack = []\n  #.........................................................................................................\n  template =\n    bearer:       null\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( bearer, base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        unless Reflect.has bearer, key\n          throw new TMP_error \"Ω__26 unknown key #{rpr key}\"\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { bearer, base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = P[ 0 ]\n    while stack.length > 0\n      key = stack.pop()\n      R   = C[ key ] R\n    return R\n  #.........................................................................................................\n  p = new_infiniproxy C, base, { is_initial: true, }\n  info 'Ω__27', p.green.bold.inverse \" holy moly \"\n  #.........................................................................................................\n  info 'Ω__28', p.yellow.italic\"some text\"\n  info 'Ω__29', p.green.bold.inverse.underline\"some text\"\n  ### Building the chain: ###\n  chain = p.cyan.bold\n  chain.underline\n  info 'Ω__30', p \"finally, a call\"\n  return null\n\n#===========================================================================================================\ndemo_instance_function_as_proxy = ->\n  { hide,               } = SFMODULES.require_managed_property_tools()\n  { Stack,              } = SFMODULES.require_stack_classes()\n  #===========================================================================================================\n  state_symbol = Symbol.for 'state'\n  #-----------------------------------------------------------------------------------------------------------\n  create_proxy = ( callable ) ->\n    state = { stack: ( new Stack() ), }\n    #.........................................................................................................\n    new_proxy = ({ is_top_level, }) -> new Proxy callable,\n\n      # #-------------------------------------------------------------------------------------------------------\n      # construct: ( target, P, new_target ) ->\n      #   urge 'Ω__31', rpr target, new_target, target is new_target\n      #   urge 'Ω__32', rpr P\n      #   # return new target P\n      #   return new_target P\n      #   # return { value: 56, }\n\n      #-------------------------------------------------------------------------------------------------------\n      apply: ( target, key, P ) ->\n        urge 'Ω__33', \"apply #{rpr { target, key, P, is_top_level, }}\"\n        ctx = { iam: 'synthetic-context', is_top_level, state..., }\n        R = Reflect.apply target, ctx, P ### NOTE: cannot use `target.apply()`, must use `Reflect` ###\n        state.stack.clear()\n        return R\n\n      #-------------------------------------------------------------------------------------------------------\n      get: ( target, key ) ->\n        urge 'Ω__34', \"get #{rpr { target, key, }}\"\n        return state          if key            is state_symbol\n        return target[ key ]  if ( typeof key ) is 'symbol'\n        return Reflect.get target, key if Reflect.has target, key\n        state.stack.clear() if is_top_level\n        state.stack.push key\n        # return \"[result for getting non-preset key #{rpr key}] from #{rpr target}\"\n        return sub_level_proxy\n    #.........................................................................................................\n    top_level_proxy = new_proxy { is_top_level: true, }\n    sub_level_proxy = new_proxy { is_top_level: false, }\n    return top_level_proxy\n\n  #===========================================================================================================\n  class D\n\n    #-------------------------------------------------------------------------------------------------------\n    constructor: ( callable ) ->\n      @other_prop = 'OTHER_PROP'\n      Object.setPrototypeOf callable, @\n      R = create_proxy callable\n      # ...\n      return R\n\n    #-------------------------------------------------------------------------------------------------------\n    method_of_d: -> 'METHOD_OF_D'\n    property_of_d: 'PROPERTY_OF_D'\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    d = new D ( P... ) -> \"{ arguments: #{rpr P} }\"\n    debug 'Ω__35', d                # D { other_prop: 'OTHER_PROP' }\n    debug 'Ω__36', d.other_prop     # OTHER_PROP\n    debug 'Ω__37', d.method_of_d()  # METHOD_OF_D\n    debug 'Ω__38', d.property_of_d  # PROPERTY_OF_D\n    debug 'Ω__39', d.unknown_key    # something else: 'unknown_key'\n    debug 'Ω__40', d instanceof D   # true\n    debug 'Ω__41', d 1, 2, 'c'\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    my_fn = ( P... ) -> \"result of calling #{rpr my_fn} in ctx #{rpr @} with #{rpr P}\"\n    hide my_fn, 'preset_key', \"value of my_fn.preset_key\"\n    info 'Ω__42', rpr proxy = create_proxy my_fn\n    info 'Ω__43', rpr proxy 4, 5, 6\n    info 'Ω__44', rpr proxy.mykey\n    info 'Ω__45', rpr proxy.preset_key\n    info 'Ω__46', rpr ( typeof Object.getPrototypeOf proxy ) is ( typeof ( -> ) )\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    my_fn_3 = ( P... ) ->\n      help 'Ω__47', @stack, @stack.is_empty, [ @stack..., ]\n      return \"result of calling #{rpr my_fn_3} in ctx #{rpr @} with #{rpr P}\"\n    info 'Ω__48', rpr d = new D my_fn_3\n    info 'Ω__49', rpr d.other_prop     # OTHER_PROP\n    info 'Ω__50', rpr d.method_of_d()  # METHOD_OF_D\n    info 'Ω__51', rpr d.property_of_d  # PROPERTY_OF_D\n    info 'Ω__52', rpr d.unknown_key    # something else: 'unknown_key'\n    info 'Ω__53', rpr d instanceof D   # true\n    info 'Ω__54', rpr d 1, 2, 'c'\n    info 'Ω__55', rpr d.red\n    info 'Ω__56', rpr d.red.bold 1, 2, 'c'\n  return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test { demo_proxy_as_html_producer, }\n  #.........................................................................................................\n  # demo_infinite_proxy()\n  demo_colorful_proxy()\n  demo_instance_function_as_proxy()\n"
  ]
}