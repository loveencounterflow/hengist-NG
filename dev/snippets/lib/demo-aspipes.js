(async function() {
  'use strict';
  var GTNG, GUY, Test, alert, createAsPipes, debug, demo, demo_2, echo, f, help, info, inspect, log, plain, praise, reverse, rpr, urge, warn, whisper;

  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('bricabrac-sfmodules/test-basics'));

  ({rpr, inspect, echo, reverse, log} = GUY.trm);

  // WGUY                      = require '../../../apps/webguy'
  GTNG = require('../../../apps/guy-test-NG');

  ({Test} = GTNG);

  ({f} = require('../../../apps/effstring'));

  ({createAsPipes} = require('aspipes'));

  //===========================================================================================================
  demo = async function() {
    var asPipe, ex, greeting, pipe, take, upper;
    ({pipe, asPipe, take} = createAsPipes());
    upper = asPipe(function(d) {
      return d.toUpperCase();
    });
    ex = asPipe(function(d, mark = '!') {
      return d + mark;
    });
    greeting = pipe('hello');
    // greeting        \
    //   | upper       \
    //   | ex '!!!'
    greeting + upper;
    greeting + ex('!!!');
    info('Ωap___1', greeting);
    info('Ωap___2', (await greeting.run()));
    info('Ωap___3', (await greeting.run()));
    info('Ωap___4', (await greeting.run()));
    return null;
  };

  //===========================================================================================================
  demo_2 = function() {
    var d, dec, pipeline;
    dec = function(pipeline, gfn) {
      var my_idx;
      my_idx = pipeline.length;
      pipeline.push(function*(d) {
        var e, results, successor;
        if ((successor = pipeline[my_idx + 1]) == null) {
          yield* gfn(d);
          return null;
        }
        results = [];
        for (e of gfn(d)) {
          results.push((yield* successor(e)));
        }
        return results;
      });
      return null;
    };
    pipeline = [];
    dec(pipeline, function*(d) {
      urge('Ωap___5', 'upper:  ', rpr(d));
      return (yield d.toUpperCase());
    });
    dec(pipeline, function*(d, mark = '!') {
      urge('Ωap___6', 'ex:     ', rpr(d));
      yield d;
      return (yield mark);
    });
    debug('Ωap___7', pipeline);
    info('Ωap___8', [
      ...((function() {
        var results;
        results = [];
        for (d of pipeline[0]('hidey-ho')) {
          results.push(d);
        }
        return results;
      })())
    ]);
    return null;
  };

  //===========================================================================================================
  if (module === require.main) {
    await (async() => {
      // await demo()
      return (await demo_2());
    })();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlbW8tYXNwaXBlcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFBQTtBQUFBLE1BQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTs7RUFFQSxHQUFBLEdBQTRCLE9BQUEsQ0FBUSxLQUFSOztFQUM1QixDQUFBLENBQUUsS0FBRixFQUNFLEtBREYsRUFFRSxJQUZGLEVBR0UsSUFIRixFQUlFLEtBSkYsRUFLRSxNQUxGLEVBTUUsSUFORixFQU9FLElBUEYsRUFRRSxPQVJGLENBQUEsR0FRNEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFSLENBQW9CLGlDQUFwQixDQVI1Qjs7RUFTQSxDQUFBLENBQUUsR0FBRixFQUNFLE9BREYsRUFFRSxJQUZGLEVBR0UsT0FIRixFQUlFLEdBSkYsQ0FBQSxHQUk0QixHQUFHLENBQUMsR0FKaEMsRUFaQTs7O0VBa0JBLElBQUEsR0FBNEIsT0FBQSxDQUFRLDJCQUFSOztFQUM1QixDQUFBLENBQUUsSUFBRixDQUFBLEdBQTRCLElBQTVCOztFQUNBLENBQUEsQ0FBRSxDQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLHlCQUFSLENBQTVCOztFQUNBLENBQUEsQ0FBRSxhQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLFNBQVIsQ0FBNUIsRUFyQkE7OztFQXdCQSxJQUFBLEdBQU8sTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUNQLFFBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtJQUFFLENBQUEsQ0FBRSxJQUFGLEVBQ0UsTUFERixFQUVFLElBRkYsQ0FBQSxHQUVZLGFBQUEsQ0FBQSxDQUZaO0lBR0EsS0FBQSxHQUFnQixNQUFBLENBQU8sUUFBQSxDQUFFLENBQUYsQ0FBQTthQUFzQixDQUFDLENBQUMsV0FBRixDQUFBO0lBQXRCLENBQVA7SUFDaEIsRUFBQSxHQUFnQixNQUFBLENBQU8sUUFBQSxDQUFFLENBQUYsRUFBSyxPQUFPLEdBQVosQ0FBQTthQUFzQixDQUFBLEdBQUk7SUFBMUIsQ0FBUDtJQUNoQixRQUFBLEdBQWdCLElBQUEsQ0FBSyxPQUFMLEVBTGxCOzs7O0lBU0UsUUFBQSxHQUFZO0lBQ1osUUFBQSxHQUFZLEVBQUEsQ0FBRyxLQUFIO0lBQ1osSUFBQSxDQUFLLFNBQUwsRUFBZ0IsUUFBaEI7SUFDQSxJQUFBLENBQUssU0FBTCxFQUFnQixDQUFBLE1BQU0sUUFBUSxDQUFDLEdBQVQsQ0FBQSxDQUFOLENBQWhCO0lBQ0EsSUFBQSxDQUFLLFNBQUwsRUFBZ0IsQ0FBQSxNQUFNLFFBQVEsQ0FBQyxHQUFULENBQUEsQ0FBTixDQUFoQjtJQUNBLElBQUEsQ0FBSyxTQUFMLEVBQWdCLENBQUEsTUFBTSxRQUFRLENBQUMsR0FBVCxDQUFBLENBQU4sQ0FBaEI7QUFDQSxXQUFPO0VBaEJGLEVBeEJQOzs7RUEyQ0EsTUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO0FBQ1QsUUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0lBQUUsR0FBQSxHQUFZLFFBQUEsQ0FBRSxRQUFGLEVBQVksR0FBWixDQUFBO0FBQ2QsVUFBQTtNQUFJLE1BQUEsR0FBUyxRQUFRLENBQUM7TUFDbEIsUUFBUSxDQUFDLElBQVQsQ0FBYyxTQUFBLENBQUUsQ0FBRixDQUFBO0FBQ2xCLFlBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQTtRQUFNLElBQU8sMENBQVA7VUFDRSxPQUFXLEdBQUEsQ0FBSSxDQUFKO0FBQ1gsaUJBQU8sS0FGVDs7QUFHQTtRQUFBLEtBQUEsV0FBQTt1QkFDRSxDQUFBLE9BQVcsU0FBQSxDQUFVLENBQVYsQ0FBWDtRQURGLENBQUE7O01BSlksQ0FBZDtBQU1BLGFBQU87SUFSRztJQVNaLFFBQUEsR0FBWTtJQUNaLEdBQUEsQ0FBSSxRQUFKLEVBQWMsU0FBQSxDQUFFLENBQUYsQ0FBQTtNQUFzQixJQUFBLENBQUssU0FBTCxFQUFnQixVQUFoQixFQUE0QixHQUFBLENBQUksQ0FBSixDQUE1QjthQUFtQyxDQUFBLE1BQU0sQ0FBQyxDQUFDLFdBQUYsQ0FBQSxDQUFOO0lBQXpELENBQWQ7SUFDQSxHQUFBLENBQUksUUFBSixFQUFjLFNBQUEsQ0FBRSxDQUFGLEVBQUssT0FBTyxHQUFaLENBQUE7TUFBc0IsSUFBQSxDQUFLLFNBQUwsRUFBZ0IsVUFBaEIsRUFBNEIsR0FBQSxDQUFJLENBQUosQ0FBNUI7TUFBbUMsTUFBTTthQUFHLENBQUEsTUFBTSxJQUFOO0lBQWxFLENBQWQ7SUFDQSxLQUFBLENBQU0sU0FBTixFQUFpQixRQUFqQjtJQUNBLElBQUEsQ0FBSyxTQUFMLEVBQWdCO01BQUUsR0FBQTs7QUFBRTtRQUFBLEtBQUEsNEJBQUE7dUJBQUE7UUFBQSxDQUFBOztVQUFGLENBQUY7S0FBaEI7QUFDQSxXQUFPO0VBZkEsRUEzQ1Q7OztFQThEQSxJQUFHLE1BQUEsS0FBVSxPQUFPLENBQUMsSUFBckI7SUFBK0IsTUFBUyxDQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQTs7YUFFdEMsQ0FBQSxNQUFNLE1BQUEsQ0FBQSxDQUFOO0lBRnNDLENBQUEsSUFBeEM7O0FBOURBIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuR1VZICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2d1eSdcbnsgYWxlcnRcbiAgZGVidWdcbiAgaGVscFxuICBpbmZvXG4gIHBsYWluXG4gIHByYWlzZVxuICB1cmdlXG4gIHdhcm5cbiAgd2hpc3BlciB9ICAgICAgICAgICAgICAgPSBHVVkudHJtLmdldF9sb2dnZXJzICdicmljYWJyYWMtc2Ztb2R1bGVzL3Rlc3QtYmFzaWNzJ1xueyBycHJcbiAgaW5zcGVjdFxuICBlY2hvXG4gIHJldmVyc2VcbiAgbG9nICAgICB9ICAgICAgICAgICAgICAgPSBHVVkudHJtXG4jIFdHVVkgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL3dlYmd1eSdcbkdUTkcgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2d1eS10ZXN0LU5HJ1xueyBUZXN0ICAgICAgICAgICAgICAgICAgfSA9IEdUTkdcbnsgZiB9ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2VmZnN0cmluZydcbnsgY3JlYXRlQXNQaXBlcywgICAgICAgIH0gPSByZXF1aXJlICdhc3BpcGVzJ1xuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmRlbW8gPSAtPlxuICB7IHBpcGUsXG4gICAgYXNQaXBlLFxuICAgIHRha2UsIH0gPSBjcmVhdGVBc1BpcGVzKClcbiAgdXBwZXIgICAgICAgICA9IGFzUGlwZSAoIGQgICAgICAgICAgICAgICkgLT4gZC50b1VwcGVyQ2FzZSgpXG4gIGV4ICAgICAgICAgICAgPSBhc1BpcGUgKCBkLCBtYXJrID0gJyEnICApIC0+IGQgKyBtYXJrXG4gIGdyZWV0aW5nICAgICAgPSBwaXBlICdoZWxsbydcbiAgIyBncmVldGluZyAgICAgICAgXFxcbiAgIyAgIHwgdXBwZXIgICAgICAgXFxcbiAgIyAgIHwgZXggJyEhISdcbiAgZ3JlZXRpbmcgICsgdXBwZXJcbiAgZ3JlZXRpbmcgICsgZXggJyEhISdcbiAgaW5mbyAnzqlhcF9fXzEnLCBncmVldGluZ1xuICBpbmZvICfOqWFwX19fMicsIGF3YWl0IGdyZWV0aW5nLnJ1bigpXG4gIGluZm8gJ86pYXBfX18zJywgYXdhaXQgZ3JlZXRpbmcucnVuKClcbiAgaW5mbyAnzqlhcF9fXzQnLCBhd2FpdCBncmVldGluZy5ydW4oKVxuICByZXR1cm4gbnVsbFxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmRlbW9fMiA9IC0+XG4gIGRlYyAgICAgICA9ICggcGlwZWxpbmUsIGdmbiApIC0+XG4gICAgbXlfaWR4ID0gcGlwZWxpbmUubGVuZ3RoXG4gICAgcGlwZWxpbmUucHVzaCAoIGQgKSAtPlxuICAgICAgdW5sZXNzICggc3VjY2Vzc29yID0gcGlwZWxpbmVbIG15X2lkeCArIDEgXSApP1xuICAgICAgICB5aWVsZCBmcm9tIGdmbiBkXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICBmb3IgZSBmcm9tIGdmbiBkXG4gICAgICAgIHlpZWxkIGZyb20gc3VjY2Vzc29yIGVcbiAgICByZXR1cm4gbnVsbFxuICBwaXBlbGluZSAgPSBbXVxuICBkZWMgcGlwZWxpbmUsICggZCAgICAgICAgICAgICAgKSAtPiB1cmdlICfOqWFwX19fNScsICd1cHBlcjogICcsIHJwciBkOyB5aWVsZCBkLnRvVXBwZXJDYXNlKClcbiAgZGVjIHBpcGVsaW5lLCAoIGQsIG1hcmsgPSAnIScgICkgLT4gdXJnZSAnzqlhcF9fXzYnLCAnZXg6ICAgICAnLCBycHIgZDsgeWllbGQgZDsgeWllbGQgbWFya1xuICBkZWJ1ZyAnzqlhcF9fXzcnLCBwaXBlbGluZVxuICBpbmZvICfOqWFwX19fOCcsIFsgKCBkIGZvciBkIGZyb20gcGlwZWxpbmVbIDAgXSAnaGlkZXktaG8nICkuLi4sIF1cbiAgcmV0dXJuIG51bGxcblxuXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmlmIG1vZHVsZSBpcyByZXF1aXJlLm1haW4gdGhlbiBhd2FpdCBkbyA9PlxuICAjIGF3YWl0IGRlbW8oKVxuICBhd2FpdCBkZW1vXzIoKVxuIl19
