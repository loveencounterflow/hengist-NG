(async function() {
  'use strict';
  var GTNG, GUY, Test, alert, createAsPipes, debug, demo, demo_2, echo, f, help, info, inspect, log, plain, praise, reverse, rpr, urge, warn, whisper;

  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('bricabrac-sfmodules/test-basics'));

  ({rpr, inspect, echo, reverse, log} = GUY.trm);

  // WGUY                      = require '../../../apps/webguy'
  GTNG = require('../../../apps/guy-test-NG');

  ({Test} = GTNG);

  ({f} = require('../../../apps/effstring'));

  ({createAsPipes} = require('aspipes'));

  //===========================================================================================================
  demo = async function() {
    var asPipe, ex, greeting, pipe, take, upper;
    ({pipe, asPipe, take} = createAsPipes());
    upper = asPipe(function(d) {
      return d.toUpperCase();
    });
    ex = asPipe(function(d, mark = '!') {
      return d + mark;
    });
    greeting = pipe('hello');
    // greeting        \
    //   | upper       \
    //   | ex '!!!'
    greeting + upper;
    greeting + ex('!!!');
    info('Ωap___1', greeting);
    info('Ωap___2', (await greeting.run()));
    info('Ωap___3', (await greeting.run()));
    info('Ωap___4', (await greeting.run()));
    return null;
  };

  //===========================================================================================================
  demo_2 = function() {
    var d, dec, pipeline;
    dec = function(pipeline, gfn) {
      var my_idx;
      my_idx = pipeline.length;
      pipeline.push(function*(d) {
        var e, results, successor;
        if ((successor = pipeline[my_idx + 1]) == null) {
          yield* gfn(d);
          return null;
        }
        results = [];
        for (e of gfn(d)) {
          results.push((yield* successor(e)));
        }
        return results;
      });
      return null;
    };
    pipeline = [];
    dec(pipeline, function*(d) {
      debug('Ωap___5', 'upper:  ', rpr(d));
      return (yield d.toUpperCase());
    });
    dec(pipeline, function*(d, mark = '!') {
      urge('Ωap___6', 'ex:     ', rpr(d));
      yield d;
      return (yield mark);
    });
    debug('Ωap___7', pipeline);
    for (d of pipeline[0]('hidey-ho')) {
      debug('Ωap___7', d);
    }
    return null;
  };

  //===========================================================================================================
  if (module === require.main) {
    await (async() => {
      // await demo()
      return (await demo_2());
    })();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlbW8tYXNwaXBlcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFBQTtBQUFBLE1BQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTs7RUFFQSxHQUFBLEdBQTRCLE9BQUEsQ0FBUSxLQUFSOztFQUM1QixDQUFBLENBQUUsS0FBRixFQUNFLEtBREYsRUFFRSxJQUZGLEVBR0UsSUFIRixFQUlFLEtBSkYsRUFLRSxNQUxGLEVBTUUsSUFORixFQU9FLElBUEYsRUFRRSxPQVJGLENBQUEsR0FRNEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFSLENBQW9CLGlDQUFwQixDQVI1Qjs7RUFTQSxDQUFBLENBQUUsR0FBRixFQUNFLE9BREYsRUFFRSxJQUZGLEVBR0UsT0FIRixFQUlFLEdBSkYsQ0FBQSxHQUk0QixHQUFHLENBQUMsR0FKaEMsRUFaQTs7O0VBa0JBLElBQUEsR0FBNEIsT0FBQSxDQUFRLDJCQUFSOztFQUM1QixDQUFBLENBQUUsSUFBRixDQUFBLEdBQTRCLElBQTVCOztFQUNBLENBQUEsQ0FBRSxDQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLHlCQUFSLENBQTVCOztFQUNBLENBQUEsQ0FBRSxhQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLFNBQVIsQ0FBNUIsRUFyQkE7OztFQXdCQSxJQUFBLEdBQU8sTUFBQSxRQUFBLENBQUEsQ0FBQTtBQUNQLFFBQUEsTUFBQSxFQUFBLEVBQUEsRUFBQSxRQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtJQUFFLENBQUEsQ0FBRSxJQUFGLEVBQ0UsTUFERixFQUVFLElBRkYsQ0FBQSxHQUVZLGFBQUEsQ0FBQSxDQUZaO0lBR0EsS0FBQSxHQUFnQixNQUFBLENBQU8sUUFBQSxDQUFFLENBQUYsQ0FBQTthQUFzQixDQUFDLENBQUMsV0FBRixDQUFBO0lBQXRCLENBQVA7SUFDaEIsRUFBQSxHQUFnQixNQUFBLENBQU8sUUFBQSxDQUFFLENBQUYsRUFBSyxPQUFPLEdBQVosQ0FBQTthQUFzQixDQUFBLEdBQUk7SUFBMUIsQ0FBUDtJQUNoQixRQUFBLEdBQWdCLElBQUEsQ0FBSyxPQUFMLEVBTGxCOzs7O0lBU0UsUUFBQSxHQUFZO0lBQ1osUUFBQSxHQUFZLEVBQUEsQ0FBRyxLQUFIO0lBQ1osSUFBQSxDQUFLLFNBQUwsRUFBZ0IsUUFBaEI7SUFDQSxJQUFBLENBQUssU0FBTCxFQUFnQixDQUFBLE1BQU0sUUFBUSxDQUFDLEdBQVQsQ0FBQSxDQUFOLENBQWhCO0lBQ0EsSUFBQSxDQUFLLFNBQUwsRUFBZ0IsQ0FBQSxNQUFNLFFBQVEsQ0FBQyxHQUFULENBQUEsQ0FBTixDQUFoQjtJQUNBLElBQUEsQ0FBSyxTQUFMLEVBQWdCLENBQUEsTUFBTSxRQUFRLENBQUMsR0FBVCxDQUFBLENBQU4sQ0FBaEI7QUFDQSxXQUFPO0VBaEJGLEVBeEJQOzs7RUEyQ0EsTUFBQSxHQUFTLFFBQUEsQ0FBQSxDQUFBO0FBQ1QsUUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBO0lBQUUsR0FBQSxHQUFZLFFBQUEsQ0FBRSxRQUFGLEVBQVksR0FBWixDQUFBO0FBQ2QsVUFBQTtNQUFJLE1BQUEsR0FBUyxRQUFRLENBQUM7TUFDbEIsUUFBUSxDQUFDLElBQVQsQ0FBYyxTQUFBLENBQUUsQ0FBRixDQUFBO0FBQ2xCLFlBQUEsQ0FBQSxFQUFBLE9BQUEsRUFBQTtRQUFNLElBQU8sMENBQVA7VUFDRSxPQUFXLEdBQUEsQ0FBSSxDQUFKO0FBQ1gsaUJBQU8sS0FGVDs7QUFHQTtRQUFBLEtBQUEsV0FBQTt1QkFDRSxDQUFBLE9BQVcsU0FBQSxDQUFVLENBQVYsQ0FBWDtRQURGLENBQUE7O01BSlksQ0FBZDtBQU1BLGFBQU87SUFSRztJQVNaLFFBQUEsR0FBWTtJQUNaLEdBQUEsQ0FBSSxRQUFKLEVBQWMsU0FBQSxDQUFFLENBQUYsQ0FBQTtNQUFzQixLQUFBLENBQU0sU0FBTixFQUFpQixVQUFqQixFQUE2QixHQUFBLENBQUksQ0FBSixDQUE3QjthQUFvQyxDQUFBLE1BQU0sQ0FBQyxDQUFDLFdBQUYsQ0FBQSxDQUFOO0lBQTFELENBQWQ7SUFDQSxHQUFBLENBQUksUUFBSixFQUFjLFNBQUEsQ0FBRSxDQUFGLEVBQUssT0FBTyxHQUFaLENBQUE7TUFBc0IsSUFBQSxDQUFNLFNBQU4sRUFBaUIsVUFBakIsRUFBNkIsR0FBQSxDQUFJLENBQUosQ0FBN0I7TUFBb0MsTUFBTTthQUFHLENBQUEsTUFBTSxJQUFOO0lBQW5FLENBQWQ7SUFDQSxLQUFBLENBQU0sU0FBTixFQUFpQixRQUFqQjtJQUNBLEtBQUEsNEJBQUE7TUFBQSxLQUFBLENBQU0sU0FBTixFQUFpQixDQUFqQjtJQUFBO0FBQ0EsV0FBTztFQWZBLEVBM0NUOzs7RUE4REEsSUFBRyxNQUFBLEtBQVUsT0FBTyxDQUFDLElBQXJCO0lBQStCLE1BQVMsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUE7O2FBRXRDLENBQUEsTUFBTSxNQUFBLENBQUEsQ0FBTjtJQUZzQyxDQUFBLElBQXhDOztBQTlEQSIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5cbkdVWSAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdndXknXG57IGFsZXJ0XG4gIGRlYnVnXG4gIGhlbHBcbiAgaW5mb1xuICBwbGFpblxuICBwcmFpc2VcbiAgdXJnZVxuICB3YXJuXG4gIHdoaXNwZXIgfSAgICAgICAgICAgICAgID0gR1VZLnRybS5nZXRfbG9nZ2VycyAnYnJpY2FicmFjLXNmbW9kdWxlcy90ZXN0LWJhc2ljcydcbnsgcnByXG4gIGluc3BlY3RcbiAgZWNob1xuICByZXZlcnNlXG4gIGxvZyAgICAgfSAgICAgICAgICAgICAgID0gR1VZLnRybVxuIyBXR1VZICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy93ZWJndXknXG5HVE5HICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9ndXktdGVzdC1ORydcbnsgVGVzdCAgICAgICAgICAgICAgICAgIH0gPSBHVE5HXG57IGYgfSAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9lZmZzdHJpbmcnXG57IGNyZWF0ZUFzUGlwZXMsICAgICAgICB9ID0gcmVxdWlyZSAnYXNwaXBlcydcblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5kZW1vID0gLT5cbiAgeyBwaXBlLFxuICAgIGFzUGlwZSxcbiAgICB0YWtlLCB9ID0gY3JlYXRlQXNQaXBlcygpXG4gIHVwcGVyICAgICAgICAgPSBhc1BpcGUgKCBkICAgICAgICAgICAgICApIC0+IGQudG9VcHBlckNhc2UoKVxuICBleCAgICAgICAgICAgID0gYXNQaXBlICggZCwgbWFyayA9ICchJyAgKSAtPiBkICsgbWFya1xuICBncmVldGluZyAgICAgID0gcGlwZSAnaGVsbG8nXG4gICMgZ3JlZXRpbmcgICAgICAgIFxcXG4gICMgICB8IHVwcGVyICAgICAgIFxcXG4gICMgICB8IGV4ICchISEnXG4gIGdyZWV0aW5nICArIHVwcGVyXG4gIGdyZWV0aW5nICArIGV4ICchISEnXG4gIGluZm8gJ86pYXBfX18xJywgZ3JlZXRpbmdcbiAgaW5mbyAnzqlhcF9fXzInLCBhd2FpdCBncmVldGluZy5ydW4oKVxuICBpbmZvICfOqWFwX19fMycsIGF3YWl0IGdyZWV0aW5nLnJ1bigpXG4gIGluZm8gJ86pYXBfX180JywgYXdhaXQgZ3JlZXRpbmcucnVuKClcbiAgcmV0dXJuIG51bGxcblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5kZW1vXzIgPSAtPlxuICBkZWMgICAgICAgPSAoIHBpcGVsaW5lLCBnZm4gKSAtPlxuICAgIG15X2lkeCA9IHBpcGVsaW5lLmxlbmd0aFxuICAgIHBpcGVsaW5lLnB1c2ggKCBkICkgLT5cbiAgICAgIHVubGVzcyAoIHN1Y2Nlc3NvciA9IHBpcGVsaW5lWyBteV9pZHggKyAxIF0gKT9cbiAgICAgICAgeWllbGQgZnJvbSBnZm4gZFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgZm9yIGUgZnJvbSBnZm4gZFxuICAgICAgICB5aWVsZCBmcm9tIHN1Y2Nlc3NvciBlXG4gICAgcmV0dXJuIG51bGxcbiAgcGlwZWxpbmUgID0gW11cbiAgZGVjIHBpcGVsaW5lLCAoIGQgICAgICAgICAgICAgICkgLT4gZGVidWcgJ86pYXBfX181JywgJ3VwcGVyOiAgJywgcnByIGQ7IHlpZWxkIGQudG9VcHBlckNhc2UoKVxuICBkZWMgcGlwZWxpbmUsICggZCwgbWFyayA9ICchJyAgKSAtPiB1cmdlICAnzqlhcF9fXzYnLCAnZXg6ICAgICAnLCBycHIgZDsgeWllbGQgZDsgeWllbGQgbWFya1xuICBkZWJ1ZyAnzqlhcF9fXzcnLCBwaXBlbGluZVxuICBkZWJ1ZyAnzqlhcF9fXzcnLCBkIGZvciBkIGZyb20gcGlwZWxpbmVbIDAgXSAnaGlkZXktaG8nXG4gIHJldHVybiBudWxsXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5pZiBtb2R1bGUgaXMgcmVxdWlyZS5tYWluIHRoZW4gYXdhaXQgZG8gPT5cbiAgIyBhd2FpdCBkZW1vKClcbiAgYXdhaXQgZGVtb18yKClcbiJdfQ==
