{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-generalized-function-signature.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ gold\n  blue\n  reverse\n  bold                  } = GUY.trm\n\n###\n\n# Restriction\n\nIn order to avoid having to integrate a JS expression parser, we restrict eligible functions to those whose\nsignatures consists of nothing but bare parameter names, parameter names with spread (soak) symbol '...',\nand parameter names with the symbolic default 'optional' which must be spelled out in those same letters.\n\n# CFG Resolution Strategies\n\n* demand fixed number positional\n* demand last one named\n* signature has *p* ∈ ℕ₀ positional parameters (named in signature)\n* signature has *q* ∈ [ 0, 1 ] PODs for named parameters (i.e. has one or none)\n* signature has *p* + *q* = *b* ∈ ℕ₀ parameters\n* signature has *s* ∈ [ 0, 1 ] splats (i.e. has one or none)\n* function call has *a* ∈ ℕ₀ arguments\n  * pre-check strategies:\n    * **PCS1**: reject if *b* ≠ *p*\n    * **PCS2**: reject if *b* > *p* (Note: can/will not apply if any parameter is declared as a rest (or\n      soak) parameter (i.e. with `...`); in that case, assume *b* = *p*)\n* recognition of CFG:\n  * all strategies / invariants:\n    * CFG may only be last parameter and therefore last argument\n    * CFG must be a POD\n  * CFG recognition strategies:\n    * **CRS1** CFG must be at position of CFG in parameters, arguments[ b - 1 ]\n    * **CRS2** CFG must be at last position of arguments, arguments[ a - 1 ]\nGiven a function `f = ( a, b, c, cfg ) ->` that is called as follows:\n\n* **p0_n0**: f()\n* **p1_n0**: f 1\n* **p2_n0**: f 1, 2\n* **p3_n0**: f 1, 2, 3\n* **p0_n1**: f          { a: 4, d: 5, }\n* **p1_n1**: f 1,       { a: 4, d: 5, }\n* **p2_n1**: f 1, 2,    { a: 4, d: 5, }\n* **p3_n1**: f 1, 2, 3, { a: 4, d: 5, }\n* **p4_n0**: f 1, 2, 3, 4\n\n* **NN**: demand 4 arguments, last one must be a POD\n  * **p0_n0**: f()                          # ERROR\n  * **p1_n0**: f 1                          # ERROR\n  * **p2_n0**: f 1, 2                       # ERROR\n  * **p3_n0**: f 1, 2, 3                    # ERROR\n  * **p0_n1**: f          { a: 4, d: 5, }   # ERROR\n  * **p1_n1**: f 1,       { a: 4, d: 5, }   # ERROR\n  * **p2_n1**: f 1, 2,    { a: 4, d: 5, }   # ERROR\n  * **p3_n1**: f 1, 2, 3, { a: 4, d: 5, }   # depends on Name Clash Resolution Strategy\n  * **p4_n0**: f 1, 2, 3, 4                 # ERROR\n\n* **NN**: assign positional arguments that appear in signature, last must be a POD\n  * **p0_n0**: f()                          # ERROR\n  * **p1_n0**: f 1                          # ERROR\n  * **p2_n0**: f 1, 2                       # ERROR\n  * **p3_n0**: f 1, 2, 3                    # ERROR\n  * **p0_n1**: f          { a: 4, d: 5, }   # { a: 4, d: 5, }\n  * **p1_n1**: f 1,       { a: 4, d: 5, }   # {       d: 5, }, `a` depends on Name Clash Resolution Strategy\n  * **p2_n1**: f 1, 2,    { a: 4, d: 5, }   # {       d: 5, }, `a` depends on Name Clash Resolution Strategy\n  * **p3_n1**: f 1, 2, 3, { a: 4, d: 5, }   # {       d: 5, }, `a` depends on Name Clash Resolution Strategy\n  * **p4_n0**: f 1, 2, 3, 4                 # ERROR\n\n* **NN**: assign positional arguments that appear in signature, last may be a POD (udf: `undefined`)\n  * **p0_n0**: f()                          # { a: 4, b: udf, c: udf, }\n  * **p1_n0**: f 1                          # { a: 4, b: udf, c: udf, }\n  * **p2_n0**: f 1, 2                       # { a: 4, b: udf, c: udf, }\n  * **p3_n0**: f 1, 2, 3                    # { a: 4, b: udf, c: udf, }\n  * **p0_n1**: f          { a: 4, d: 5, }   # { a: 4, b: udf, c: udf, d: 5, }\n  * **p1_n1**: f 1,       { a: 4, d: 5, }   # {       b: udf, c: udf, d: 5, }, `a` depends on Name Clash Resolution Strategy\n  * **p2_n1**: f 1, 2,    { a: 4, d: 5, }   # {       b: udf, c: udf, d: 5, }, `a` depends on Name Clash Resolution Strategy\n  * **p3_n1**: f 1, 2, 3, { a: 4, d: 5, }   # {       b: udf, c: udf, d: 5, }, `a` depends on Name Clash Resolution Strategy\n  * **p4_n0**: f 1, 2, 3, 4                 # ERROR\n\n###\n\n#===========================================================================================================\ndemo_generalized_signature = ->\n  get_fn_args = ( require 'fn-args' ).default\n  # functionArguments\n  do =>\n    d      = []\n    d[ 0 ] = 7\n    d.k    = 6\n    d[ 1 ] = 5\n    urge 'Ω___1', Object.keys d                 # [ '0', '1', 'k' ]\n    urge 'Ω___2', [ ( Object.entries d )..., ]  # [ [ '0', 7 ], [ '1', 5 ], [ 'k', 6 ] ]\n    return null\n  do =>\n    #.......................................................................................................\n    pod_prototypes  = Object.freeze [ null, ( Object.getPrototypeOf {} ), ]\n    gnd =\n      pod: isa: ( x ) -> x? and ( Object.getPrototypeOf x ) in pod_prototypes\n    #.......................................................................................................\n    get_arguments_poscfg = ( names, argvments, fallback = null ) ->\n      help()\n      # argvments = [ argvments..., ]\n      positional_names      = names[      0 .. names.length     - 2 ]\n      named_name            =     names.at -1\n      info 'Ω___3', { positional_names, named_name, positional_argvments, named_argvment, fallback, }\n      R = {}\n      #.....................................................................................................\n      if gnd.pod.isa argvments.at -1\n        positional_argvments  = argvments[  0 .. argvments.length - 2 ]\n        named_argvment        = argvments.at -1\n      else\n        positional_argvments  = argvments[  ..                        ]\n        named_argvment        = null\n      #.....................................................................................................\n      last_arg_idx = positional_argvments.length - 1\n      for name, idx in names\n        if idx <= last_arg_idx\n          help 'Ω___4', name, rpr positional_argvments[ idx ]\n          R[ name ] = positional_argvments[ idx ]\n        else\n          urge 'Ω___5', \"fallback for positional argument @#{idx} = #{rpr argvments[ idx ]}\"\n          R[ name ] = fallback\n      #.....................................................................................................\n      if named_argvment?\n        help 'Ω___6', \"named_argvment #{rpr named_argvment}\"\n        for name, value of named_argvment\n          if Reflect.has R, name\n            warn 'Ω___7', \"repeated named argument { #{name}: #{rpr value}, }\"\n            # apply one of strategy = [ 'error', 'named_wins', 'positional_wins', ]\n            R[ name ] = value\n          else\n            R[ name ] = value\n      else\n        urge 'Ω___8', \"no named argvments\"\n      #.....................................................................................................\n      return R\n    #.......................................................................................................\n    f = ( a, b, Q ) ->\n      # cfg = Object.assign ( Object.create null ), { a, b, }, Q...\n      cfg = Object.assign {}, { a, b, }, Q...\n      # info 'Ω___9', f\"#{GUY.trm.gold [ arguments..., ]}:>30c;\", GUY.trm.blue { a, b, cfg, }\n      info 'Ω__10', ( GUY.trm.gold [ arguments..., ] ), GUY.trm.blue { a, b, cfg, }\n    #.......................................................................................................\n    debug 'Ω__11', ( f.toString().split '\\n' )[ 0 ].replace /^.*function\\(\\s*/, ''\n    # debug 'Ω__12', ( ( ( a, b = ')', c ) -> ).toString().split '\\n' )[ 0 ].replace /^.*function\\(\\s*/, ''\n    # debug 'Ω__13', ( ( ( a, b ### = ) ###, c, Q... ) => ).toString().split '\\n' )[ 0 ].replace /^.*function\\(\\s*/, ''\n    unset = Symbol 'unset'\n    info 'Ω__14', get_arguments_poscfg [ 'a', 'b', 'cfg', ], [ 1,                    ], unset\n    info 'Ω__15', get_arguments_poscfg [ 'a', 'b', 'cfg', ], [ 1, k: 'K',            ], unset\n    info 'Ω__16', get_arguments_poscfg [ 'a', 'b', 'cfg', ], [ 1, 2, k: 'K',         ], unset\n    info 'Ω__17', get_arguments_poscfg [ 'a', 'b', 'cfg', ], [ 1, 2, 3, k: 'K',      ], unset\n    info 'Ω__18', get_arguments_poscfg [ 'a', 'b', 'cfg', ], [ 1, 2, k: 'K', a: 'A', ], unset\n    # f 1\n    # f 1, 2, 3\n    # f 1, 2, k: 'K'\n    # f 1, 2, k: 'K', 9, m: 'M'\n    return null\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_call_styles = ->\n  f = ( first, second, also ) ->\n    # info()\n    info 'Ω__19', arguments.length, ( gold [ arguments..., ] ), ( blue { first, second, also, } )\n  f 'one'\n  f 'one', { second: 'two', also: 'three', }\n  f 'one', 'two'\n  f 'one', 'two', { also: 'three', }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_get_parameter_names = ->\n  get_fn_args = ( require 'fn-args' ).default\n  get_signature = ( f ) ->\n    debug()\n    body    = f.toString()\n    kernel  = body.replace /// ^ [^ \\( ]* \\( \\s* ( [^ \\) ]* ) \\s* \\) .* $ ///sv, '$1'\n    parts   = kernel.split /// , \\s* ///sv\n    # urge 'Ω__20', rpr body\n    urge 'Ω__21', rpr kernel\n    urge 'Ω__22', rpr parts\n    $names  = []\n    # R       = { $names, }\n    R       = {}\n    for part in parts\n      switch true\n        when ( match = part.match /// ^ [.]{3} \\s* (?<name> \\S+ ) \\s* $ ///sv )?\n          name          = match.groups.name\n          disposition   = 'soak'\n        when ( match = part.match /// ^ (?<name> \\S+ ) \\s* = \\s* optional $///sv )?\n          name          = match.groups.name\n          disposition   = 'optional'\n        else\n          name          = part\n          disposition   = 'bare'\n      info 'Ω__24', ( rpr part ), { name, disposition, }\n      R[ name ] = disposition\n      # R[ name ] = { name, disposition, }\n      $names.push name\n    return R\n  optional = Symbol 'optional'\n  #.........................................................................................................\n  # do =>\n  #   ```\n  #   const f = function (\n  #     a,\n  #     b = ', e = 7,',\n  #     /* d = 9, */\n  #     c = 8,\n  #     ...P\n  #     ) {}\n  #   ```\n  #   debug 'Ω__25', get_signature f\n  #   debug 'Ω__26', get_fn_args f\n  #   return null\n  # #.........................................................................................................\n  # do =>\n  #   f = ( a, b = 4 * ( sqrt 8 ), c = ( foo bar ) ) ->\n  #   debug 'Ω__27', get_signature f\n  #   debug 'Ω__28', get_fn_args f\n  #   return null\n  #.........................................................................................................\n  do =>\n    f = ( a, b = optional, c = optional ) -> { $A: [ arguments..., ], a, b, c, }\n    help 'Ω__29', get_signature f\n    help 'Ω__30', get_fn_args f\n    help 'Ω__31', f 1\n    help 'Ω__32', f 1, 2\n    help 'Ω__33', f 1, 2, 3\n    return null\n  #.........................................................................................................\n  do =>\n    f = ( a, b=optional, c... ) -> { $A: [ arguments..., ], a, b, c, }\n    help 'Ω__34', get_signature f\n    help 'Ω__35', get_fn_args f\n    help 'Ω__36', f 1\n    help 'Ω__37', f 1, 2\n    help 'Ω__38', f 1, 2, 3\n    return null\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  # guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test @cleartype_tasks\n  # # ( new Test guytest_cfg ).test @cleartype_tasks.builtins\n  # demo_generalized_signature()\n  demo_get_parameter_names()\n  # demo_call_styles()\n  # ```f = ( a, b, ...P, cfg ) => {}```\n\n\n\n"
  ]
}