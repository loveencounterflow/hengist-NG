{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-proxy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n  #.........................................................................................................\n# @blink                    = \"\\x1b[5m\"\n# @bold                     = \"\\x1b[1m\"\n# @reverse                  = \"\\x1b[7m\"\n# @underline                = \"\\x1b[4m\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# # Effects Off\n# #...........................................................................................................\n# @no_blink                 = \"\\x1b[25m\"\n# @no_bold                  = \"\\x1b[22m\"\n# @no_reverse               = \"\\x1b[27m\"\n# @no_underline             = \"\\x1b[24m\"\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  gold\n  red\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nC                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\n\n\n#===========================================================================================================\ndemo_proxy = ->\n  stack     = []\n  get_proxy = Symbol 'get_proxy'\n  #.........................................................................................................\n  template =\n    base:                     null\n    is_initial:               true\n    empty_stack_on_new_chain: true\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    is_initial = false unless cfg.empty_stack_on_new_chain\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return new_infiniproxy { base, is_initial: false, } if key is get_proxy\n        return target[ key ] if ( typeof key ) is 'symbol'\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = \"#{stack.join '.'}::#{rpr P}\"\n    stack.length = 0\n    return R\n  #.........................................................................................................\n  ### These calls will be `stack`ed but then get thrown away as soon as any property of `p` is used: ###\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base, { empty_stack_on_new_chain: true } ### default ###\n    p.ooops;  debug 'Ω___1', stack\n    p.wat;    debug 'Ω___2', stack\n    p.nö;     debug 'Ω___3', stack\n    info 'Ω___4', p.more_of_this\"some text\"\n    debug 'Ω___5', stack\n    return null\n  #.........................................................................................................\n  ### These calls will be `stack`ed and remain on the stack until `p` is called: ###\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base, { empty_stack_on_new_chain: false } ### opt-in ###\n    p.ooops;  debug 'Ω___6', stack\n    p.wat;    debug 'Ω___7', stack\n    p.nö;     debug 'Ω___8', stack\n    info 'Ω___9', p.more_of_this\"some text\"\n    debug 'Ω__10', stack\n    return null\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base\n    info 'Ω__11', p.red.bold.underline\"some text\"\n    ### Some random property retrievals without call... ###\n    p.bold.underline\n    p.strikethrough.inverse\n    ### ...won't influence the meaning of the next property chain: ###\n    info 'Ω__12', p.yellow\"finally, a call\"\n    ### But if needed, can always reference a proxy from an intermediate result and build a property chain\n    on that; here we used a special unique value `get_proxy` that produces an intermediate result *without*\n    adding it to the property chain: ###\n    proxy = p[ get_proxy ]\n    ### Imagine we go through some branching if/then clauses to decide whether to add some styles: ###\n    proxy.bold.underline\n    proxy.strikethrough\n    proxy.inverse\n    proxy.yellow\n    ### Finally, we're ready to print: ###\n    info 'Ω__13', proxy\"this will be printed in bold + underline + strikethrough + inverse + yellow\"\n    return null\n  return null\n\n#===========================================================================================================\ndemo_proxy_as_html_producer = ->\n  ### NOTE in order for nested calls to properly work, it looks like we need a stack of stacks;\n  currently\n  ```\n  H.div\"this stuff is #{H.span\"cool!\"}\"\n  ```\n  returns an empty string.\n  ###\n  stack       = []\n  properties  = new Map()\n  get_proxy   = Symbol 'get_proxy'\n  #.........................................................................................................\n  template =\n    base:                     null\n    is_initial:               true\n    empty_stack_on_new_chain: true\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    is_initial = false unless cfg.empty_stack_on_new_chain\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return new_infiniproxy { base, is_initial: false, } if key is get_proxy\n        return target[ key ] if ( typeof key ) is 'symbol'\n        return target[ key ] if Reflect.has target, key\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    #.......................................................................................................\n    tag_function = ( parts, expressions... ) ->\n      debug 'Ω__14', arguments\n      R = parts[ 0 ]\n      for expression, idx in expressions\n        R += expression.toString() + parts[ idx + 1 ]\n      R = R.replace /&/g, '&amp;'\n      R = R.replace /</g, '&lt;'\n      R = R.replace />/g, '&gt;'\n      return R\n    #.......................................................................................................\n    render_html = ( P... ) ->\n      is_template_call = ( Array.isArray P[ 0 ] ) and ( Object.isFrozen P[ 0 ] ) and ( P[ 0 ].raw? )\n      if is_template_call\n        text = tag_function P...\n      else\n        switch true\n          when P.length is 0 then text = ''\n          when P.length is 1 then text = tag_function P\n          else throw new Error \"Ω__15 more than one argument not allowed\"\n      # debug 'Ω__16', { is_template_call, text, }\n      #.....................................................................................................\n      R = []\n      if stack.length > 0\n        tag_name    = stack.shift()\n        if stack.length > 0\n          class_names = stack.join ' '\n          class_rpr   = \" class='#{class_names}'\"\n        else\n          class_rpr   = ''\n        #...................................................................................................\n        R.push \"<\"\n        R.push tag_name\n        R.push class_rpr\n        #...................................................................................................\n        ### properties: ###\n        p = do =>\n          return '' if properties.size is 0\n          _p = []\n          for [ property_name, property_value, ] from properties.entries()\n            ### TAINT must escape, quote value ###\n            property_value_rpr = property_value.replace /'/g, '&apos;'\n            _p.push \"#{property_name}='#{property_value_rpr}'\"\n          properties.clear()\n          return ' ' + _p.join ' '\n        #...................................................................................................\n        R.push p\n        R.push \">\"\n        R.push text\n        R.push \"</\"\n        R.push tag_name\n        R.push \">\"\n      #.....................................................................................................\n      stack.length = 0\n      urge 'Ω__10', R\n      return R.join ''\n    #.......................................................................................................\n    render_html.on_click = ( action ) ->\n      action = action[ 0 ] if Array.isArray action\n      properties.set 'on_click', action\n      return @\n    #.......................................................................................................\n    H = new_infiniproxy render_html\n    info 'Ω__17', H.div.big.important\"some <arbitrary> text\"\n    info 'Ω__18', H.div.big.important \"some <arbitrary> text\"\n    info 'Ω__19', H.on_click'send_form()'.xxx ### TAINT wrong result ###\n    info 'Ω__20', H.div.on_click'send_form()'.big.important\"this value is #{true}\"\n    info 'Ω__21', H.span\"cool!\"\n    info 'Ω__22', H.div\"this stuff is #{\"cool!\"}\"\n    info 'Ω__23', H.div\"this stuff is #{H.span\"cool!\"}\"\n    info 'Ω__24', H.div.on_click'send_form()'\"this stuff is #{H.span\"cool!\"}\"\n    info 'Ω__25', H.div.on_click'send_form()'.big.important\"this stuff is #{H.span\"cool!\"}\"\n    return null\n  return null\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  stack = []\n  #.........................................................................................................\n  template =\n    bearer:       null\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( bearer, base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        unless Reflect.has bearer, key\n          throw new TMP_error \"Ω__26 unknown key #{rpr key}\"\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { bearer, base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = P[ 0 ]\n    while stack.length > 0\n      key = stack.pop()\n      R   = C[ key ] R\n    return R\n  #.........................................................................................................\n  p = new_infiniproxy C, base, { is_initial: true, }\n  info 'Ω__27', p.green.bold.inverse \" holy moly \"\n  #.........................................................................................................\n  info 'Ω__28', p.yellow.italic\"some text\"\n  info 'Ω__29', p.green.bold.inverse.underline\"some text\"\n  ### Building the chain: ###\n  chain = p.cyan.bold\n  chain.underline\n  info 'Ω__30', p \"finally, a call\"\n  return null\n\n\n\n\n#===========================================================================================================\ndemo_picocolors_chalk = ->\n  do =>\n    # info 'Ω__35',     C.yellow\"█▒█\"\n    # info 'Ω__36',     C.yellow\"█#{ C.green\"▒\" }█\"\n    info 'Ω__37',     C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n    # info 'Ω__38', rpr C.yellow\"█▒█\"\n    # info 'Ω__39', rpr C.yellow\"█#{ C.green\"▒\" }█\"\n    info 'Ω__40', rpr C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n    info 'Ω__41',     C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n    info 'Ω__42', rpr C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n    return null\n  do =>\n    #-----------------------------------------------------------------------------------------------------------\n    color_codes =\n      red:    '\\x1B[31m'\n      green:  '\\x1B[32m'\n      yellow: '\\x1B[33m'\n    color_off = '\\x1B[39m'\n    #.......................................................................................................\n    colorizer_from_color_code = ( color_code ) ->\n      R = ( parts, expressions... ) ->\n        R = color_code + parts[ 0 ]\n        for expression, idx in expressions\n          inner = expression.toString().replace /\\x1B\\[39m$/, ''\n          R += ( inner ) + ( color_code + parts[ idx + 1 ] )\n        return R + color_off\n      return R\n    #.......................................................................................................\n    red     = colorizer_from_color_code color_codes.red\n    green   = colorizer_from_color_code color_codes.green\n    yellow  = colorizer_from_color_code color_codes.yellow\n    # info 'Ω__61',     red\"█#{'▒'}█#{ 'GREEN' }###\"\n    # info 'Ω__62', rpr red\"█#{'▒'}█#{ 'GREEN' }###\"\n    info 'Ω__63',     red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n    info 'Ω__64', rpr red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n    return null\n  return null\n\n\n\n# { Chalk: [class Chalk], __esModule: true,\n#   backgroundColorNames: [ 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   backgroundColors: [ 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   chalkStderr: { [Function: chalk] createChalk level: 3 },\n#   colorNames: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright', 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   colors: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright', 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   default: { [Function: chalk] createChalk level: 3 }, foregroundColorNames: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright' ], foregroundColors: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright' ], modifierNames: [ 'reset', 'bold', 'dim', 'italic', 'underline', 'overline', 'inverse', 'hidden', 'strikethrough' ], modifiers: [ 'reset', 'bold', 'dim', 'italic', 'underline', 'overline', 'inverse', 'hidden', 'strikethrough' ], supportsColor: { level: 3, hasBasic: true, has256: true, has16m: true }, supportsColorStderr: { level: 3, hasBasic: true, has256: true, has16m: true } }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo_proxy()\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  echo()\n  demo_colorful_proxy()\n  echo()\n  demo_proxy_as_html_producer()\n  echo()\n  demo_picocolors_chalk()\n  echo()\n\n"
  ]
}