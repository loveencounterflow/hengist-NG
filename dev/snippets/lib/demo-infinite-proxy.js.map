{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-proxy.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,mBAAA,EAAA,eAAA,EAAA,qBAAA,EAAA,UAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,YAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,KAHF,EAIE,IAJF,EAKE,GALF,EAME,OANF,EAOE,GAPF,CAAA,GAO4B,GAAG,CAAC,GAPhC;;EAQA,CAAA,CAAE,CAAF,CAAA,GAA4B,OAAA,CAAQ,yBAAR,CAA5B;;EACA,KAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,CAArB;EAAT;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,4CAAR,CAA5B,EAxBA;;;EA4BA,UAAA,GAAa,QAAA,CAAA,CAAA,EAAA;;AACb,QAAA,IAAA,EAAA,KAAA,EAAA,eAAA,EAAA,CAAA,EAAA,KAAA,EAAA;IAAE,KAAA,GAAQ,GAAV;;IAEE,QAAA,GACE;MAAA,IAAA,EAAc,IAAd;MACA,UAAA,EAAc;IADd,EAHJ;;IAME,eAAA,GAAkB,GAAA,CAAI,CAAE,QAAF,CAAJ,EAAmB,QAAA,CAAE,IAAF,EAAQ,UAAR,EAAoB,GAApB,CAAA;AACvC,UAAA,CAAA,EAAA;MAAI,KAAA,GAAQ,IAAI,KAAJ,CAAU,IAAV,EACN;QAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;UACH,IAAwB,CAAE,OAAO,GAAT,CAAA,KAAkB,QAA1C;AAAA,mBAAO,MAAM,CAAE,GAAF,EAAb;;UACA,IAAoB,UAApB;YAAA,KAAK,CAAC,MAAN,GAAe,EAAf;;UACA,KAAK,CAAC,IAAN,CAAW,GAAX;AACA,iBAAO;QAJJ;MAAL,CADM;MAMR,IAAG,UAAH;QAAoB,CAAA,GAAI,eAAA,CAAgB;UAAE,IAAF;UAAQ,UAAA,EAAY;QAApB,CAAhB,EAAxB;OAAA,MAAA;QACoB,CAAA,GAAI,MADxB;;AAEA,aAAO;IAT4B,CAAnB,EANpB;;IAiBE,IAAA,GAAO,QAAA,CAAA,GAAE,CAAF,CAAA;AACT,UAAA,CAAA;;MACI,CAAA,GAAI,CAAA,CAAA,CAAG,KAAK,CAAC,IAAN,CAAW,GAAX,CAAH,CAAA,EAAA,CAAA,CAAsB,GAAA,CAAI,CAAJ,CAAtB,CAAA;MACJ,KAAK,CAAC,MAAN,GAAe;AACf,aAAO;IAJF;IAKP,CAAA,GAAI,eAAA,CAAgB,IAAhB,EAAsB;MAAE,UAAA,EAAY;IAAd,CAAtB;IACJ,KAAA,CAAM,OAAN,EAAe,CAAf;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,GAAjB;IACA,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAT,CAAY,CAAZ,CAAd,EAzBF;;;IA4BE,CAAC,CAAC;IAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;IACV,CAAC,CAAC;IAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;IACV,CAAC,CAAC;IAAQ,KAAA,CAAM,OAAN,EAAe,KAAf;IACV,IAAA,CAAK,OAAL,EAAc,CAAC,CAAA,SAAA,CAAf;IACA,KAAA,CAAM,OAAN,EAAe,KAAf,EAhCF;;IAkCE,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAA,SAAA,CAAzB;IACA,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAA,SAAA,CAAnC;IAEA,KAAA,GAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;IACjB,KAAK,CAAC,IAAI,CAAC;IACX,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;IACf,IAAA,CAAK,OAAL,EAAc,CAAA,CAAE,iBAAF,CAAd;AACA,WAAO;EA1CI,EA5Bb;;;EAyEA,mBAAA,GAAsB,QAAA,CAAA,CAAA,EAAA;;AACtB,QAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EAAA,SAAA,EAAA,eAAA,EAAA,CAAA,EAAA,KAAA,EAAA;IAAQ,YAAN,MAAA,UAAA,QAAwB,MAAxB,CAAA;IACA,KAAA,GAAQ,GADV;;IAGE,QAAA,GACE;MAAA,MAAA,EAAc,IAAd;MACA,IAAA,EAAc,IADd;MAEA,UAAA,EAAc;IAFd,EAJJ;;IAQE,eAAA,GAAkB,GAAA,CAAI,CAAE,QAAF,CAAJ,EAAmB,QAAA,CAAE,MAAF,EAAU,IAAV,EAAgB,UAAhB,EAA4B,GAA5B,CAAA;AACvC,UAAA,CAAA,EAAA;MAAI,KAAA,GAAQ,IAAI,KAAJ,CAAU,IAAV,EACN;QAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,GAAV,CAAA;UACH,IAAwB,CAAE,OAAO,GAAT,CAAA,KAAkB,QAA1C;AAAA,mBAAO,MAAM,CAAE,GAAF,EAAb;;UACA,KAAO,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,GAApB,CAAP;YACE,MAAM,IAAI,SAAJ,CAAc,CAAA,kBAAA,CAAA,CAAqB,GAAA,CAAI,GAAJ,CAArB,CAAA,CAAd,EADR;;UAEA,IAAoB,UAApB;YAAA,KAAK,CAAC,MAAN,GAAe,EAAf;;UACA,KAAK,CAAC,IAAN,CAAW,GAAX;AACA,iBAAO;QANJ;MAAL,CADM;MAQR,IAAG,UAAH;QAAoB,CAAA,GAAI,eAAA,CAAgB;UAAE,MAAF;UAAU,IAAV;UAAgB,UAAA,EAAY;QAA5B,CAAhB,EAAxB;OAAA,MAAA;QACoB,CAAA,GAAI,MADxB;;AAEA,aAAO;IAX4B,CAAnB,EARpB;;IAqBE,IAAA,GAAO,QAAA,CAAA,GAAE,CAAF,CAAA;AACT,UAAA,CAAA,EAAA;MAAI,CAAA,GAAI,CAAC,CAAE,CAAF;AACL,aAAM,KAAK,CAAC,MAAN,GAAe,CAArB;QACE,GAAA,GAAM,KAAK,CAAC,GAAN,CAAA;QACN,CAAA,GAAM,CAAC,CAAE,GAAF,CAAD,CAAS,CAAT;MAFR;AAGA,aAAO;IALF,EArBT;;;;;;;;;;;;;;;;;;;;IA8CE,SAAA,GACE;MAAA,KAAA,EAAO,QAAA,CAAE,CAAF,CAAA;QACL,KAAA,CAAM,OAAN,EAAe,GAAA,CAAI,CAAJ,CAAf;AACA,eAAO;MAFF;IAAP,EA/CJ;;IAmDE,CAAA,GAAI,eAAA,CAAgB,CAAhB,EAAmB,IAAnB,EAAyB;MAAE,UAAA,EAAY;IAAd,CAAzB;IACJ,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAb,CAAqB,aAArB,CAAd,EApDF;;;IAuDE,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,MAAM,CAAC,MAAM,CAAA,SAAA,CAA7B;IACA,IAAA,CAAK,OAAL,EAAc,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAA,SAAA,CAA5C;IAEA,KAAA,GAAQ,CAAC,CAAC,IAAI,CAAC;IACf,KAAK,CAAC;IACN,IAAA,CAAK,OAAL,EAAc,CAAA,CAAE,iBAAF,CAAd;AACA,WAAO;EA9Da,EAzEtB;;;EA2IA,eAAA,GAAkB,QAAA,CAAA,CAAA;AAClB,QAAA,UAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;IAAQ,wBAAN,MAAA,sBAAA,QAAoC,MAApC,CAAA;IACA,MAAA,GAAS,MAAA,CAAO,QAAP,EADX;;IAGQ,aAAN,MAAA,WAAA,CAAA;;MAGE,WAAa,CAAA,CAAA;QACX,IAAC,CAAA,OAAD,GAAY;QACZ,IAAC,CAAA,KAAD,GAAY,IAAI,GAAJ,CAAA;AACZ,eAAO;MAHI,CADjB;;;MAOI,UAAY,CAAE,CAAF,CAAA;QAAS,IAAC,CAAA,OAAO,CAAC,OAAT,CAAiB,CAAjB;AAAoB,eAAO;MAApC,CAPhB;;;MAUI,GAAK,CAAE,GAAF,EAAO,WAAW,MAAlB,CAAA;AACT,YAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAM,IAAY,iCAAZ;AAAA,iBAAO,EAAP;;AACA;QAAA,KAAA,qCAAA;;UACE,KAAgB,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,GAApB,CAAhB;AAAA,qBAAA;;UACA,IAAC,CAAA,KAAK,CAAC,GAAP,CAAW,GAAX,EAAgB,CAAA,GAAI;YAAE,MAAF;YAAU,KAAA,EAAO,MAAM,CAAE,GAAF;UAAvB,CAApB;AACA,iBAAO;QAHT;QAIA,IAAuB,QAAA,KAAY,MAAnC;AAAA,iBAAO,SAAP;;QACA,MAAM,IAAI,qBAAJ,CAA0B,CAAA,kBAAA,CAAA,CAAqB,GAAA,CAAI,GAAJ,CAArB,CAAA,CAA1B;MAPH;;IAZP,EAHF;;IAyBE,CAAA,GAAI;MAAE,CAAA,EAAG,GAAL;MAAU,CAAA,EAAG;IAAb;IACJ,CAAA,GAAI;MAAE,CAAA,EAAG;IAAL;IACJ,CAAA,GAAI,IAAI,UAAJ,CAAA;IACJ,CAAC,CAAC,UAAF,CAAa,CAAb;IACA,CAAC,CAAC,UAAF,CAAa,CAAb;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,GAAF,CAAM,KAAN,EAAa,IAAb,CAAf;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,GAAF,CAAM,GAAN,CAAf;IACA,KAAA,CAAM,OAAN,EAAe,CAAC,CAAC,GAAF,CAAM,GAAN,CAAf;AACA,WAAO;EAlCS,EA3IlB;;;EAiLA,qBAAA,GAAwB,QAAA,CAAA,CAAA;IACnB,CAAA,CAAA,CAAA,GAAA,EAAA;;;MAGD,IAAA,CAAK,OAAL,EAAkB,CAAC,CAAC,GAAG,CAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,KAAK,CAAA,CAAA,CAAf,CAAA,CAAA,CAAA,CAAwB,CAAC,CAAC,KAAF,CAAQ,OAAR,CAAxB,CAAA,GAAA,CAAvB,EAFJ;;;MAKI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,GAAG,CAAA,CAAA,CAAA,CAAQ,CAAC,CAAC,KAAK,CAAA,CAAA,CAAf,CAAA,CAAA,CAAA,CAAwB,CAAC,CAAC,KAAF,CAAQ,OAAR,CAAxB,CAAA,GAAA,CAAT,CAAd;MACA,IAAA,CAAK,OAAL,EAAkB,CAAC,CAAC,GAAG,CAAA,IAAA,CAAA,CAAO,CAAC,CAAC,KAAK,CAAA,IAAA,CAAA,CAAO,CAAC,CAAC,MAAM,CAAA,IAAA,CAAf,CAAA,IAAA,CAAd,CAAA,IAAA,CAAvB;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,CAAC,CAAC,GAAG,CAAA,IAAA,CAAA,CAAO,CAAC,CAAC,KAAK,CAAA,IAAA,CAAA,CAAO,CAAC,CAAC,MAAM,CAAA,IAAA,CAAf,CAAA,IAAA,CAAd,CAAA,IAAA,CAAT,CAAd;AACA,aAAO;IATN,CAAA;IAmBA,CAAA,CAAA,CAAA,GAAA,EAAA;;;;;;;;;AACL,UAAA,CAAA,EAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA;MAAI,CAAA,GAAI,CAAE,OAAA,CAAQ,OAAR,CAAF,CAAmB,CAAC,QAA5B;;MAEI,MAAA,GAAY;MACZ,QAAA,GAAY;MACZ,SAAA,GAAY;MACZ,QAAA,GAAY;MACZ,QAAA,GAAY;MACZ,MAAA,GAAS,QAAA,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACb,YAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAM,CAAA,GAAI,QAAA,GAAW,KAAK,CAAE,CAAF;QACpB,KAAA,yDAAA;;UACE,CAAA,IAAK,CAAE,QAAA,GAAW,UAAU,CAAC,QAAX,CAAA,CAAb,CAAA,GAAuC,CAAE,QAAA,GAAW,KAAK,CAAE,GAAA,GAAM,CAAR,CAAlB;QAD9C;AAEA,eAAO,CAAA,GAAI;MAJJ,EAPb;;;MAcI,IAAA,CAAK,OAAL,EAAkB,MAAM,CAAA,CAAA,CAAA,CAAI,GAAJ,CAAA,CAAA,CAAA,CAAY,OAAZ,CAAA,GAAA,CAAxB,EAdJ;;;MAiBI,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,MAAM,CAAA,CAAA,CAAA,CAAI,GAAJ,CAAA,CAAA,CAAA,CAAY,OAAZ,CAAA,GAAA,CAAV,CAAd,EAjBJ;;;;;;;AAwBI,aAAO;IAzBN,CAAA;IA0BA,CAAA,CAAA,CAAA,GAAA;AACL,UAAA,WAAA,EAAA,SAAA,EAAA,yBAAA,EAAA,KAAA,EAAA,MAAA;;MACI,WAAA,GACE;QAAA,GAAA,EAAQ,UAAR;QACA,KAAA,EAAQ,UADR;QAEA,MAAA,EAAQ;MAFR;MAGF,SAAA,GAAY,WALhB;;MAOI,yBAAA,GAA4B,QAAA,CAAE,UAAF,CAAA;AAChC,YAAA;QAAM,CAAA,GAAI,QAAA,CAAE,KAAF,EAAA,GAAS,WAAT,CAAA;AACV,cAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA;UAAQ,CAAA,GAAI,UAAA,GAAa,KAAK,CAAE,CAAF;UACtB,KAAA,yDAAA;;YACE,KAAA,GAAQ,UAAU,CAAC,QAAX,CAAA,CAAqB,CAAC,OAAtB,CAA8B,YAA9B,EAA4C,EAA5C;YACR,CAAA,IAAO,KAAF,GAAY,CAAE,UAAA,GAAa,KAAK,CAAE,GAAA,GAAM,CAAR,CAApB;UAFnB;AAGA,iBAAO,CAAA,GAAI;QALT;AAMJ,eAAO;MAPmB,EAPhC;;MAgBI,GAAA,GAAU,yBAAA,CAA0B,WAAW,CAAC,GAAtC;MACV,KAAA,GAAU,yBAAA,CAA0B,WAAW,CAAC,KAAtC;MACV,MAAA,GAAU,yBAAA,CAA0B,WAAW,CAAC,MAAtC,EAlBd;;;MAqBI,IAAA,CAAK,OAAL,EAAkB,GAAG,CAAA,IAAA,CAAA,CAAO,KAAK,CAAA,IAAA,CAAA,CAAO,MAAM,CAAA,IAAA,CAAb,CAAA,IAAA,CAAZ,CAAA,IAAA,CAArB;MACA,IAAA,CAAK,OAAL,EAAc,GAAA,CAAI,GAAG,CAAA,IAAA,CAAA,CAAO,KAAK,CAAA,IAAA,CAAA,CAAO,MAAM,CAAA,IAAA,CAAb,CAAA,IAAA,CAAZ,CAAA,IAAA,CAAP,CAAd;AACA,aAAO;IAxBN,CAAA;AAyBH,WAAO;EAvEe,EAjLxB;;;;;;;;;;;EAoQA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;MACtC,UAAA,CAAA;MACA,IAAA,CAAK,gFAAL;MACA,IAAA,CAAA;MACA,mBAAA,CAAA;MACA,IAAA,CAAA;MACA,eAAA,CAAA;MACA,IAAA,CAAA;MACA,qBAAA,CAAA;aACA,IAAA,CAAA;IATsC,CAAA,IAAxC;;AApQA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  gold\n  red\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nC                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\n\n\n#===========================================================================================================\ndemo_proxy = ->\n  stack = []\n  #.........................................................................................................\n  template =\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    # debug 'Ω___1', P\n    R = \"#{stack.join '.'}::#{rpr P}\"\n    stack.length = 0\n    return R\n  p = new_infiniproxy base, { is_initial: true, }\n  debug 'Ω___2', p\n  debug 'Ω___3', p.arc\n  info 'Ω___4', p.arc.bo.cy 8\n  #.........................................................................................................\n  ### These calls will be `stack`ed but then get thrown away as soon as any property of `p` is used: ###\n  p.ooops;  debug 'Ω___5', stack\n  p.wat;    debug 'Ω___6', stack\n  p.nö;     debug 'Ω___7', stack\n  info 'Ω___8', p\"some text\"\n  debug 'Ω___9', stack\n  #.........................................................................................................\n  info 'Ω__10', p.arc.bo.cy\"some text\"\n  info 'Ω__11', p.arc.bo.cy.dean.blah\"some text\"\n  ### Building the chain: ###\n  chain = p.arc.bo.cy\n  chain.dean.blah\n  chain.and.then.some\n  info 'Ω__12', p \"finally, a call\"\n  return null\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  stack = []\n  #.........................................................................................................\n  template =\n    bearer:       null\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( bearer, base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        unless Reflect.has bearer, key\n          throw new TMP_error \"Ω__13 unknown key #{rpr key}\"\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { bearer, base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = P[ 0 ]\n    while stack.length > 0\n      key = stack.pop()\n      R   = C[ key ] R\n    return R\n  #.........................................................................................................\n# @blink                    = \"\\x1b[5m\"\n# @bold                     = \"\\x1b[1m\"\n# @reverse                  = \"\\x1b[7m\"\n# @underline                = \"\\x1b[4m\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# # Effects Off\n# #...........................................................................................................\n# @no_blink                 = \"\\x1b[25m\"\n# @no_bold                  = \"\\x1b[22m\"\n# @no_reverse               = \"\\x1b[27m\"\n# @no_underline             = \"\\x1b[24m\"\n  #.........................................................................................................\n  # C =\n  #   blink: ( x ) ->\n  #     debug 'Ω__14', rpr x\n  #     return '---'\n  # Object.setPrototypeOf C, C\n  extension =\n    blink: ( x ) ->\n      debug 'Ω__15', rpr x\n      return '---'\n  #.........................................................................................................\n  p = new_infiniproxy C, base, { is_initial: true, }\n  info 'Ω__16', p.green.bold.inverse \" holy moly \"\n  # info 'Ω__17', p.green.bold.inverse.blink \" holy moly \"\n  #.........................................................................................................\n  info 'Ω__18', p.yellow.italic\"some text\"\n  info 'Ω__19', p.green.bold.inverse.underline\"some text\"\n  ### Building the chain: ###\n  chain = p.cyan.bold\n  chain.underline\n  info 'Ω__20', p \"finally, a call\"\n  return null\n\n\n#===========================================================================================================\ndemo_commutator = ->\n  class TMP_no_such_key_error extends Error\n  misfit = Symbol 'misfit'\n  #===========================================================================================================\n  class Commutator\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      @bearers  = []\n      @cache    = new Map()\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    add_bearer: ( x ) -> @bearers.unshift x; return null\n\n    #---------------------------------------------------------------------------------------------------------\n    get: ( key, fallback = misfit ) ->\n      return R if ( R = @cache.get key )?\n      for bearer in @bearers\n        continue unless Reflect.has bearer, key\n        @cache.set key, R = { bearer, value: bearer[ key ], }\n        return R\n      return fallback unless fallback is misfit\n      throw new TMP_no_such_key_error \"Ω__21 unknown key #{rpr key}\"\n\n  #===========================================================================================================\n  a = { k: 'K', l: 'not this', }\n  b = { l: 'L', }\n  c = new Commutator()\n  c.add_bearer a\n  c.add_bearer b\n  debug 'Ω__22', c.get 'ttt', null\n  debug 'Ω__23', c.get 'k'\n  debug 'Ω__24', c.get 'l'\n  return null\n\n\n#===========================================================================================================\ndemo_picocolors_chalk = ->\n  do =>\n    # info 'Ω__25',     C.yellow\"█▒█\"\n    # info 'Ω__26',     C.yellow\"█#{ C.green\"▒\" }█\"\n    info 'Ω__27',     C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n    # info 'Ω__28', rpr C.yellow\"█▒█\"\n    # info 'Ω__29', rpr C.yellow\"█#{ C.green\"▒\" }█\"\n    info 'Ω__30', rpr C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n    info 'Ω__31',     C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n    info 'Ω__32', rpr C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n    return null\n  # do =>\n  #   P = require 'picocolors'\n  #   info 'Ω__33',     P.yellow\"█▒█\"\n  #   info 'Ω__34',     P.yellow\"█#{ P.green\"▒\" }█\"\n  #   info 'Ω__35',     P.red\"█#{    P.green\"▒\" }█\"\n  #   info 'Ω__36', rpr P.yellow\"█▒█\"\n  #   info 'Ω__37', rpr P.yellow\"█#{ P.green\"▒\" }█\"\n  #   info 'Ω__38', rpr P.red\"█#{    P.green\"▒\" }█\"\n  #   return null\n  do =>\n    H = ( require 'chalk' ).default\n    #-----------------------------------------------------------------------------------------------------------\n    red_on    = '\\x1B[31m'\n    green_on  = '\\x1B[32m'\n    color_off = '\\x1B[39m'\n    outer_on  = red_on\n    inner_on  = green_on\n    hcolor = ( parts, expressions... ) ->\n      R = outer_on + parts[ 0 ]\n      for expression, idx in expressions\n        R += ( inner_on + expression.toString() ) + ( outer_on + parts[ idx + 1 ] )\n      return R + color_off\n    # info 'Ω__39',     hcolor\"█\"\n    # info 'Ω__40',     hcolor\"█#{'▒'}\"\n    info 'Ω__41',     hcolor\"█#{'▒'}█#{ 'GREEN' }###\"\n    # info 'Ω__42', rpr hcolor\"█\"\n    # info 'Ω__43', rpr hcolor\"█#{'▒'}\"\n    info 'Ω__44', rpr hcolor\"█#{'▒'}█#{ 'GREEN' }###\"\n    # info 'Ω__45',     H.yellow\"█▒█\"\n    # info 'Ω__46',     H.yellow\"█#{ H.green\"▒\" }█\"\n    # info 'Ω__47',     H.red\"█#{    H.green\"▒\" }█\"\n    # info 'Ω__48', rpr H.yellow\"█▒█\"\n    # info 'Ω__49', rpr H.yellow\"█#{ H.green\"▒\" }█\"\n    # info 'Ω__50', rpr H.red\"█#{    H.green\"▒\" }█\"\n    return null\n  do =>\n    #-----------------------------------------------------------------------------------------------------------\n    color_codes =\n      red:    '\\x1B[31m'\n      green:  '\\x1B[32m'\n      yellow: '\\x1B[33m'\n    color_off = '\\x1B[39m'\n    #.......................................................................................................\n    colorizer_from_color_code = ( color_code ) ->\n      R = ( parts, expressions... ) ->\n        R = color_code + parts[ 0 ]\n        for expression, idx in expressions\n          inner = expression.toString().replace /\\x1B\\[39m$/, ''\n          R += ( inner ) + ( color_code + parts[ idx + 1 ] )\n        return R + color_off\n      return R\n    #.......................................................................................................\n    red     = colorizer_from_color_code color_codes.red\n    green   = colorizer_from_color_code color_codes.green\n    yellow  = colorizer_from_color_code color_codes.yellow\n    # info 'Ω__41',     red\"█#{'▒'}█#{ 'GREEN' }###\"\n    # info 'Ω__44', rpr red\"█#{'▒'}█#{ 'GREEN' }###\"\n    info 'Ω__31',     red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n    info 'Ω__31', rpr red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n    return null\n  return null\n\n# { Chalk: [class Chalk], __esModule: true,\n#   backgroundColorNames: [ 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   backgroundColors: [ 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   chalkStderr: { [Function: chalk] createChalk level: 3 },\n#   colorNames: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright', 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   colors: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright', 'bgBlack', 'bgRed', 'bgGreen', 'bgYellow', 'bgBlue', 'bgMagenta', 'bgCyan', 'bgWhite', 'bgBlackBright', 'bgGray', 'bgGrey', 'bgRedBright', 'bgGreenBright', 'bgYellowBright', 'bgBlueBright', 'bgMagentaBright', 'bgCyanBright', 'bgWhiteBright' ],\n#   default: { [Function: chalk] createChalk level: 3 }, foregroundColorNames: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright' ], foregroundColors: [ 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'blackBright', 'gray', 'grey', 'redBright', 'greenBright', 'yellowBright', 'blueBright', 'magentaBright', 'cyanBright', 'whiteBright' ], modifierNames: [ 'reset', 'bold', 'dim', 'italic', 'underline', 'overline', 'inverse', 'hidden', 'strikethrough' ], modifiers: [ 'reset', 'bold', 'dim', 'italic', 'underline', 'overline', 'inverse', 'hidden', 'strikethrough' ], supportsColor: { level: 3, hasBasic: true, has256: true, has16m: true }, supportsColorStderr: { level: 3, hasBasic: true, has256: true, has16m: true } }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo_proxy()\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  echo()\n  demo_colorful_proxy()\n  echo()\n  demo_commutator()\n  echo()\n  demo_picocolors_chalk()\n  echo()\n\n"
  ]
}