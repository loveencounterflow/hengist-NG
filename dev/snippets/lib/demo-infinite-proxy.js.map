{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-proxy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nC                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n#===========================================================================================================\ndemo_infinite_proxy = ->\n  stack     = []\n  get_proxy = Symbol 'get_proxy'\n  #.........................................................................................................\n  template =\n    base:                     null\n    is_initial:               true\n    empty_stack_on_new_chain: true\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    is_initial = false unless cfg.empty_stack_on_new_chain\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return new_infiniproxy { base, is_initial: false, } if key is get_proxy\n        return target[ key ] if ( typeof key ) is 'symbol'\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = \"#{stack.join '.'}::#{rpr P}\"\n    stack.length = 0\n    return R\n  #.........................................................................................................\n  ### These calls will be `stack`ed but then get thrown away as soon as any property of `p` is used: ###\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base, { empty_stack_on_new_chain: true } ### default ###\n    p.ooops;  debug 'Ω___1', stack\n    p.wat;    debug 'Ω___2', stack\n    p.nö;     debug 'Ω___3', stack\n    info 'Ω___4', p.more_of_this\"some text\"\n    debug 'Ω___5', stack\n    return null\n  #.........................................................................................................\n  ### These calls will be `stack`ed and remain on the stack until `p` is called: ###\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base, { empty_stack_on_new_chain: false } ### opt-in ###\n    p.ooops;  debug 'Ω___6', stack\n    p.wat;    debug 'Ω___7', stack\n    p.nö;     debug 'Ω___8', stack\n    info 'Ω___9', p.more_of_this\"some text\"\n    debug 'Ω__10', stack\n    return null\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    p = new_infiniproxy base\n    info 'Ω__11', p.red.bold.underline\"some text\"\n    ### Some random property retrievals without call... ###\n    p.bold.underline\n    p.strikethrough.inverse\n    ### ...won't influence the meaning of the next property chain: ###\n    info 'Ω__12', p.yellow\"finally, a call\"\n    ### But if needed, can always reference a proxy from an intermediate result and build a property chain\n    on that; here we used a special unique value `get_proxy` that produces an intermediate result *without*\n    adding it to the property chain: ###\n    proxy = p[ get_proxy ]\n    ### Imagine we go through some branching if/then clauses to decide whether to add some styles: ###\n    proxy.bold.underline\n    proxy.strikethrough\n    proxy.inverse\n    proxy.yellow\n    ### Finally, we're ready to print: ###\n    info 'Ω__13', proxy\"this will be printed in bold + underline + strikethrough + inverse + yellow\"\n    return null\n  return null\n\n# #===========================================================================================================\n# demo_picocolors_chalk = ->\n#   do =>\n#     # info 'Ω__14',     C.yellow\"█▒█\"\n#     # info 'Ω__15',     C.yellow\"█#{ C.green\"▒\" }█\"\n#     info 'Ω__16',     C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n#     # info 'Ω__17', rpr C.yellow\"█▒█\"\n#     # info 'Ω__18', rpr C.yellow\"█#{ C.green\"▒\" }█\"\n#     info 'Ω__19', rpr C.red\"█#{    C.green\"▒\" }█#{ C.green 'GREEN' }###\"\n#     info 'Ω__20',     C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n#     info 'Ω__21', rpr C.red\"████#{C.green\"████#{C.yellow\"████\"}████\"}████\"\n#     return null\n#   do =>\n#     #-----------------------------------------------------------------------------------------------------------\n#     color_codes =\n#       red:    '\\x1B[31m'\n#       green:  '\\x1B[32m'\n#       yellow: '\\x1B[33m'\n#     color_off = '\\x1B[39m'\n#     #.......................................................................................................\n#     colorizer_from_color_code = ( color_code ) ->\n#       R = ( parts, expressions... ) ->\n#         R = color_code + parts[ 0 ]\n#         for expression, idx in expressions\n#           inner = expression.toString().replace /\\x1B\\[39m$/, ''\n#           R += ( inner ) + ( color_code + parts[ idx + 1 ] )\n#         return R + color_off\n#       return R\n#     #.......................................................................................................\n#     red     = colorizer_from_color_code color_codes.red\n#     green   = colorizer_from_color_code color_codes.green\n#     yellow  = colorizer_from_color_code color_codes.yellow\n#     # info 'Ω__22',     red\"█#{'▒'}█#{ 'GREEN' }###\"\n#     # info 'Ω__23', rpr red\"█#{'▒'}█#{ 'GREEN' }###\"\n#     info 'Ω__24',     red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n#     info 'Ω__25', rpr red\"████#{green\"████#{yellow\"████\"}████\"}████\"\n#     return null\n#   return null\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  stack = []\n  #.........................................................................................................\n  template =\n    bearer:       null\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( bearer, base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        unless Reflect.has bearer, key\n          throw new TMP_error \"Ω__26 unknown key #{rpr key}\"\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { bearer, base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    R = P[ 0 ]\n    while stack.length > 0\n      key = stack.pop()\n      R   = C[ key ] R\n    return R\n  #.........................................................................................................\n  p = new_infiniproxy C, base, { is_initial: true, }\n  info 'Ω__27', p.green.bold.inverse \" holy moly \"\n  #.........................................................................................................\n  info 'Ω__28', p.yellow.italic\"some text\"\n  info 'Ω__29', p.green.bold.inverse.underline\"some text\"\n  ### Building the chain: ###\n  chain = p.cyan.bold\n  chain.underline\n  info 'Ω__30', p \"finally, a call\"\n  return null\n\n\n#===========================================================================================================\ndemo_proxy_as_html_producer = ->\n  stackofstacks   = []\n  get_stack       = -> stackofstacks.at -1\n  push_new_stack  = -> stackofstacks.push []; get_stack()\n  pop_old_stack   = -> stackofstacks.pop()\n  # push_new_stack()\n  properties    = new Map()\n  get_proxy     = Symbol 'get_proxy'\n  #.........................................................................................................\n  template =\n    base:                     null\n    is_initial:               true\n    empty_stack_on_new_chain: true\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    is_initial = false unless cfg.empty_stack_on_new_chain\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return new_infiniproxy { base, is_initial: false, } if key is get_proxy\n        return target[ key ] if ( typeof key ) is 'symbol'\n        return target[ key ] if Reflect.has target, key\n        XXX_before = ( get_stack() ? [] )[ .. ]\n        if is_initial\n          # stack.length = 0\n          push_new_stack()\n        get_stack().push key\n        XXX_mark = if is_initial then ( reverse red bold ' I ' ) else ( reverse white bold ' S ' )\n        XXX_stack = ( get_stack() ? [] )[ .. ]\n        debug 'Ω__31', XXX_mark, 'key:', ( rpr key ), 'before:', ( gold rpr XXX_before.join '.' ), 'after:', ( blue rpr XXX_stack.join '.' )\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  do =>\n    echo '——————————————————————————————————————————————————————————————————————————————'\n    append = ( list, P... ) -> list.splice list.length, 0, P...\n    #.......................................................................................................\n    class Raw\n      constructor: ( text ) ->\n        @data = text\n        return undefined\n      toString: -> @data\n    #.......................................................................................................\n    escape_html_text = ( text ) ->\n      R = text\n      R = R.replace /&/g, '&amp;'\n      R = R.replace /</g, '&lt;'\n      R = R.replace />/g, '&gt;'\n      return R\n    #.......................................................................................................\n    tag_function = ( parts, expressions... ) ->\n      debug 'Ω__32', expressions\n      R = parts[ 0 ]\n      for expression, idx in expressions\n        expression_rpr  = expression.toString()\n        expression_rpr  = escape_html_text expression_rpr unless expression instanceof Raw\n        R += expression_rpr + parts[ idx + 1 ]\n      return R\n    #.......................................................................................................\n    render_html = ( P... ) ->\n      stack = get_stack()\n      pop_old_stack()\n      urge 'Ω__33', gold reverse bold { stack, }\n      is_template_call = ( Array.isArray P[ 0 ] ) and ( Object.isFrozen P[ 0 ] ) and ( P[ 0 ].raw? )\n      if is_template_call\n        text = tag_function P...\n      else\n        switch true\n          when P.length is 0 then text = ''\n          when P.length is 1 then text = tag_function P\n          else throw new Error \"Ω__34 more than one argument not allowed\"\n      # debug 'Ω__35', { is_template_call, text, }\n      #.....................................................................................................\n      R = []\n      if stack.length > 0\n        tag_name    = stack.shift()\n        if stack.length > 0\n          class_names = stack.join ' '\n          class_rpr   = \" class='#{class_names}'\"\n        else\n          class_rpr   = ''\n        #...................................................................................................\n        append R, \"<\", tag_name, class_rpr\n        #...................................................................................................\n        ### properties: ###\n        atrs_rpr = do =>\n          return '' if properties.size is 0\n          _atrs = []\n          for [ property_name, property_value, ] from properties.entries()\n            ### TAINT must escape, quote value ###\n            property_value_rpr = property_value.replace /'/g, '&apos;'\n            _atrs.push \"#{property_name}='#{property_value_rpr}'\"\n          properties.clear()\n          return ' ' + _atrs.join ' '\n        #...................................................................................................\n        append R, atrs_rpr, \">\", text, \"</\", tag_name, \">\"\n      #.....................................................................................................\n      stack.length = 0\n      urge 'Ω__36', R\n      R = R.join ''\n      R = new Raw R if stackofstacks.length isnt 0\n      # R = new Raw R\n      return R\n    #.......................................................................................................\n    render_html.on_click = ( action ) ->\n      action = action[ 0 ] if Array.isArray action\n      properties.set 'on_click', action\n      return @\n    #.......................................................................................................\n    H   = new_infiniproxy render_html\n    # info 'Ω__37', H.div.big.important\"some <arbitrary> text\"\n    # info 'Ω__38', H.div.big.important \"some <arbitrary> text\"\n    # info 'Ω__39', H.on_click'send_form()'.xxx ### TAINT wrong result ###\n    # info 'Ω__40', H.div.on_click'send_form()'.big.important\"this value is #{true}\"\n    # info 'Ω__41', H.span\"cool!\"\n    # info 'Ω__42', H.div\"this stuff is #{\"cool!\"}\"\n    info 'Ω__43', white bold reverse H.div.outer\"this stuff is #{H.span.inner\"cool!\"}\"\n    info 'Ω__44', white bold reverse button = new Raw H.button.on_click'send_form'.red\"cool!\"\n    info 'Ω__45', white bold reverse H.div.outer\"press here: #{button}\"\n    @eq ( Ω__46 = -> H.div.outer\"this stuff is #{H.span.inner\"cool!\"}\"  ), \"<div class='outer'>this stuff is <span class='inner'>cool!</span></div>\"\n    @eq ( Ω__47 = -> new Raw H.button.on_click'send_form'.red\"cool!\"    ), { data: \"<button class='red' on_click='send_form'>cool!</button>\" }\n    @eq ( Ω__48 = -> H.div.outer\"press here: #{button}\"                 ), \"<div class='outer'>press here: <button class='red' on_click='send_form'>cool!</button></div>\"\n    # info 'Ω__49', H.div.on_click'send_form()'\"this stuff is #{H.span\"cool!\"}\"\n    # info 'Ω__50', H.div.on_click'send_form()'.big.important\"this stuff is #{H.span\"cool!\"}\"\n    return null\n  return null\n\n# # # # ###\n# # # # SQL.insert.into.employees('id','name').values(id,name)\n# # # # ###\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { demo_proxy_as_html_producer, }\n"
  ]
}