{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-proxy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  gold\n  red\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nC                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\n\n\n#===========================================================================================================\ndemo_proxy = ->\n  stack = []\n  #.........................................................................................................\n  template =\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    # debug 'Ω___1', P\n    R = \"#{stack.join '.'}::#{rpr P}\"\n    stack.length = 0\n    return R\n  p = new_infiniproxy base, { is_initial: true, }\n  debug 'Ω___2', p\n  debug 'Ω___3', p.arc\n  info 'Ω___4', p.arc.bo.cy 8\n  #.........................................................................................................\n  ### These calls will be `stack`ed but then get thrown away as soon as any property of `p` is used: ###\n  p.ooops;  debug 'Ω___5', stack\n  p.wat;    debug 'Ω___6', stack\n  p.nö;     debug 'Ω___7', stack\n  info 'Ω___8', p\"some text\"\n  debug 'Ω___9', stack\n  #.........................................................................................................\n  info 'Ω__10', p.arc.bo.cy\"some text\"\n  info 'Ω__11', p.arc.bo.cy.dean.blah\"some text\"\n  ### Building the chain: ###\n  chain = p.arc.bo.cy\n  chain.dean.blah\n  chain.and.then.some\n  info 'Ω__12', p \"finally, a call\"\n  return null\n\n#===========================================================================================================\ndemo_colorful_proxy = ->\n  class TMP_error extends Error\n  stack = []\n  #.........................................................................................................\n  template =\n    bearer:       null\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( bearer, base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        unless Reflect.has bearer, key\n          throw new TMP_error \"Ω__13 unknown key #{rpr key}\"\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { bearer, base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  resolve = ( bearer, stack ) ->\n    R = bearer\n    while stack.length > 0\n      R = R[ stack.pop() ]\n    return R\n  #.........................................................................................................\n  base = ( P... ) ->\n    # method = resolve C, stack\n    # return method P[ 0 ]\n    R = P[ 0 ]\n    while stack.length > 0\n      key = stack.pop()\n      R   = C[ key ] R\n    return R\n  #.........................................................................................................\n# @blink                    = \"\\x1b[5m\"\n# @bold                     = \"\\x1b[1m\"\n# @reverse                  = \"\\x1b[7m\"\n# @underline                = \"\\x1b[4m\"\n\n# #-----------------------------------------------------------------------------------------------------------\n# # Effects Off\n# #...........................................................................................................\n# @no_blink                 = \"\\x1b[25m\"\n# @no_bold                  = \"\\x1b[22m\"\n# @no_reverse               = \"\\x1b[27m\"\n# @no_underline             = \"\\x1b[24m\"\n  #.........................................................................................................\n  # C =\n  #   blink: ( x ) ->\n  #     debug 'Ω__15', rpr x\n  #     return '---'\n  # Object.setPrototypeOf C, C\n  extension =\n    blink: ( x ) ->\n      debug 'Ω__16', rpr x\n      return '---'\n  #.........................................................................................................\n  p = new_infiniproxy C, base, { is_initial: true, }\n  info 'Ω__17', p.green.bold.inverse \" holy moly \"\n  # info 'Ω__18', p.green.bold.inverse.blink \" holy moly \"\n  #.........................................................................................................\n  info 'Ω__19', p.yellow.italic\"some text\"\n  info 'Ω__20', p.green.bold.inverse.underline\"some text\"\n  ### Building the chain: ###\n  chain = p.cyan.bold\n  chain.underline\n  info 'Ω__21', p \"finally, a call\"\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo_proxy()\n  echo '——————————————————————————————————————————————————————————————————————————————'\n  echo()\n  demo_colorful_proxy()\n  echo()\n\n"
  ]
}