{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-infinite-proxy.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-proxy'\n{ rpr\n  inspect\n  echo\n  white\n  gold\n  red\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\nwrite                     = ( p ) -> process.stdout.write p\nA                         = require 'ansis'\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\n\n\n#===========================================================================================================\ndemo_proxy = ->\n  stack = []\n  #.........................................................................................................\n  template =\n    base:         null\n    is_initial:   false\n  #.........................................................................................................\n  new_infiniproxy = nfa { template, }, ( base, is_initial, cfg ) ->\n    proxy = new Proxy base,\n      get: ( target, key ) ->\n        return target[ key ] if ( typeof key ) is 'symbol'\n        stack.length = 0 if is_initial\n        stack.push key\n        return R\n    if is_initial then  R = new_infiniproxy { base, is_initial: false, }\n    else                R = proxy\n    return proxy\n  #.........................................................................................................\n  base = ( P... ) ->\n    # debug 'Ω___3', P\n    R = \"#{stack.join '.'}::#{rpr P}\"\n    stack.length = 0\n    return R\n  p = new_infiniproxy base, { is_initial: true, }\n  debug 'Ω___4', p\n  debug 'Ω___5', p.arc\n  info 'Ω___8', p.arc.bo.cy 8\n  #.........................................................................................................\n  ### These calls will be `stack`ed but then get thrown away as soon as any property of `p` is used: ###\n  p.ooops;  debug 'Ω___9', stack\n  p.wat;    debug 'Ω__10', stack\n  p.nö;     debug 'Ω__11', stack\n  info 'Ω__13', p\"some text\"\n  debug 'Ω__14', stack\n  #.........................................................................................................\n  info 'Ω__15', p.arc.bo.cy\"some text\"\n  info 'Ω__16', p.arc.bo.cy.dean.blah\"some text\"\n  ### Building the chain: ###\n  chain = p.arc.bo.cy\n  chain.dean.blah\n  chain.and.then.some\n  info 'Ω__16', p \"finally, a call\"\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo_proxy()\n"
  ]
}