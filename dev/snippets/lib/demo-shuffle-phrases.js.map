{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-shuffle-phrases.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ rpr\n  inspect\n  echo\n  reverse }               = GUY.trm\n{ info\n  warn\n  urge\n  debug }                 = GUY.trm.get_loggers 'demo-shuffle-phrases'\ntypes                     = new ( require '../../../apps/intertype' ).Intertype()\n\n\n#-----------------------------------------------------------------------------------------------------------\nshuffle_phrases = ({ text, shuffler, }) ->\n  types.validate.nonempty.text text\n  types.validate.function shuffler ?= GUY.rnd.shuffle.bind GUY.rnd\n  text                  = text.trim()\n  phrases               = ( phrase[ 0 ] for phrase from text.matchAll /[^.;]+(?:[.;]|$)/g )\n  last_idx              = phrases.length - 1\n  phrases[ last_idx ]  += ';' unless /[.;]$/.test phrases[ last_idx ]\n  for idx in [ 0 .. last_idx ]\n    phrases[ idx ] = ( if phrases[ idx ].startsWith ' ' then '' else ' ' ) + phrases[ idx ]\n  R                     = ( ( shuffler phrases ).join '' ).trim()\n  R                     = R.replace /[\\s.;]$/, ''\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nfactorial = ( n ) -> if n <= 1 then 1 else ( factorial n - 1 ) * n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # debug 'Ω___1', factorial i for i in [ 0 ... 100 ]\n  text    = process.argv[ 2 ]\n  paragon = shuffle_phrases { text, shuffler: ( ( x ) -> x ), }\n  echo GUY.trm.grey paragon\n  known   = new Set()\n  for _ in [ 1 .. 10 ]\n    echo()\n    candidate = shuffle_phrases { text, }\n    if candidate is paragon\n      warn 'Ω___1', \"same\"\n      continue\n    if known.has candidate\n      warn 'Ω___1', \"repetition\"\n      continue\n    known.add candidate\n    echo candidate\n  return null\n\n\n"
  ]
}