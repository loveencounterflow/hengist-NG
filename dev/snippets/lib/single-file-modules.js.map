{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/single-file-modules.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\n#\n#===========================================================================================================\nmodule.exports = SFMODULES =\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_list_tools: ->\n    append    = ( list, P... ) -> list.splice list.length, 0, P...\n    is_empty  = ( list ) -> list.length is 0\n    return { append, is_empty, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_escape_html_text: ->\n    escape_html_text = ( text ) ->\n      R = text\n      R = R.replace /&/g, '&amp;'\n      R = R.replace /</g, '&lt;'\n      R = R.replace />/g, '&gt;'\n      return R\n    return { escape_html_text, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_tagfun_tools: ->\n\n    ### Given the arguments of either a tagged template function call ('tagfun call') or the single\n    argument of a conventional function call, `get_first_argument()` will return either\n\n    * the result of applying `as_text()` to the sole argument, or\n\n    * the result of concatenating the constant parts and the interpolated expressions, which each\n    expression replaced by the result of applying `as_text()` to it.\n\n    Another way to describe this behavior is to say that this function treats a conventional call with\n    a single expression the same way that it treats a funtag call with a string that contains nothing but\n    that same expression, so the invariant `( get_first_argument exp ) == ( get_first_argument\"#{ exp }\"\n    )` holds.\n\n    * intended for string producers, text processing, markup production;\n    * list some examples. ###\n\n    #---------------------------------------------------------------------------------------------------------\n    create_get_first_argument_fn = ( as_text = null ) ->\n      as_text ?= ( expression ) -> \"#{expression}\"\n      ### TAINT use proper validation ###\n      unless ( typeof as_text ) is 'function'\n        throw new Error \"Ωidsp___2 expected a function, got #{rpr as_text}\"\n      #-------------------------------------------------------------------------------------------------------\n      get_first_argument = ( P... ) ->\n        unless is_tagfun_call P...\n          unless P.length is 1\n            throw new Error \"Ωidsp___3 expected 1 argument, got #{P.length}\"\n          return as_text P[ 0 ]\n        #.....................................................................................................\n        [ parts, expressions..., ] = P\n        R = parts[ 0 ]\n        for expression, idx in expressions\n          R += ( as_text expression ) + parts[ idx + 1 ]\n        return R\n      #-------------------------------------------------------------------------------------------------------\n      get_first_argument.create = create_get_first_argument_fn\n      return get_first_argument\n\n    #---------------------------------------------------------------------------------------------------------\n    is_tagfun_call = ( P... ) ->\n      return false unless Array.isArray   P[ 0 ]\n      return false unless Object.isFrozen P[ 0 ]\n      return false unless P[ 0 ].raw?\n      return true\n\n    #---------------------------------------------------------------------------------------------------------\n    return { get_first_argument: create_get_first_argument_fn(), is_tagfun_call, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_managed_property_tools: ->\n    set_getter = ( object, name, get ) -> Object.defineProperties object, { [name]: { get, }, }\n    hide = ( object, name, value ) => Object.defineProperty object, name,\n        enumerable:   false\n        writable:     true\n        configurable: true\n        value:        value\n\n    #---------------------------------------------------------------------------------------------------------\n    return { set_getter, hide, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_nameit: ->\n    nameit = ( name, fn ) -> Object.defineProperty fn, 'name', { value: name, }; fn\n    #---------------------------------------------------------------------------------------------------------\n    return { nameit, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_stack_classes: ->\n    { set_getter,\n      hide,       } = SFMODULES.require_managed_property_tools()\n    misfit          = Symbol 'misfit'\n    class XXX_Stack_error extends Error\n\n    #===========================================================================================================\n    class Stack\n\n      #---------------------------------------------------------------------------------------------------------\n      constructor: ->\n        @data = []\n        return undefined\n\n      #---------------------------------------------------------------------------------------------------------\n      toString: -> \"[#{ ( \"#{e}\" for e in @data ).join'.' }]\"\n\n      #---------------------------------------------------------------------------------------------------------\n      set_getter @::, 'length',   -> @data.length\n      set_getter @::, 'is_empty', -> @data.length is 0\n      clear: -> @data.length = 0; null\n      [Symbol.iterator]: -> yield from @data\n\n      #---------------------------------------------------------------------------------------------------------\n      push:     ( x ) -> @data.push x;    null\n      unshift:  ( x ) -> @data.unshift x; null\n\n      #---------------------------------------------------------------------------------------------------------\n      pop: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___4 unable to pop value from empty stack\"\n        return @data.pop()\n\n      #---------------------------------------------------------------------------------------------------------\n      shift: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___5 unable to shift value from empty stack\"\n        return @data.shift()\n\n      #---------------------------------------------------------------------------------------------------------\n      peek: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___6 unable to peek value of empty stack\"\n        return @data.at -1\n\n    #===========================================================================================================\n    class Doublestack\n\n      #---------------------------------------------------------------------------------------------------------\n      constructor: ->\n        @data = []\n        return undefined\n\n      #---------------------------------------------------------------------------------------------------------\n      toString: -> if @length is 0 then \"{ DS[] }\" else \"{ DS[ #{ @length-1} ] = #{@peek_stack '[]'} }\"\n\n      #---------------------------------------------------------------------------------------------------------\n      set_getter @::, 'length',   -> @data.length\n      set_getter @::, 'is_empty', -> @data.length is 0\n      clear: -> @data.length = 0; null\n      ### TAINT might want to iterate over topmost stack in @data ###\n      [Symbol.iterator]: -> yield from @data\n\n      #---------------------------------------------------------------------------------------------------------\n      push_new_stack: -> @data.push ( new Stack() ); @peek_stack()\n      # unshift_new_stack:  -> @data.unshift []; null\n\n      #---------------------------------------------------------------------------------------------------------\n      pop_old_stack: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___7 unable to peek value of empty stack\"\n        return @data.pop()\n\n      # #---------------------------------------------------------------------------------------------------------\n      # shift_old_stack:  ( fallback = misfit ) ->\n      #   if @is_empty\n      #     return fallback unless fallback is misfit\n      #     throw new XXX_Stack_error \"Ωidsp___8 unable to peek value of empty stack\"\n      #   return @data.shift()\n\n      #---------------------------------------------------------------------------------------------------------\n      peek_stack: ( fallback = misfit ) ->\n        if @is_empty\n          return fallback unless fallback is misfit\n          throw new XXX_Stack_error \"Ωidsp___9 unable to peek value of empty stack\"\n        return @data.at -1\n\n    #-----------------------------------------------------------------------------------------------------------\n    return { Stack, Doublestack, }\n\n  #===========================================================================================================\n  ### NOTE Future Single-File Module ###\n  require_doublestack_infiniproxy: ->\n    { Stack,\n      Doublestack,  } = SFMODULES.require_stack_classes()\n    #...........................................................................................................\n    dsip_cfg_template =\n      base:                     null\n      is_initial:               true\n      # empty_stack_on_new_chain: true\n    #-----------------------------------------------------------------------------------------------------------\n    create_doublestack_infiniproxy = ( base ) ->\n      doublestack = new Doublestack()\n      get_proxy   = Symbol 'get_proxy'\n      #.........................................................................................................\n      extendended_base = ( P... ) ->\n        R = base P...\n        doublestack.pop_old_stack() unless doublestack.is_empty\n        return R\n      #---------------------------------------------------------------------------------------------------------\n      new_doublestack_infiniproxy = ( cfg ) ->\n        cfg = { dsip_cfg_template..., cfg..., }\n        # cfg.is_initial = false unless cfg.empty_stack_on_new_chain\n        #.......................................................................................................\n        proxy = new Proxy extendended_base,\n          get: ( target, key ) ->\n            return new_doublestack_infiniproxy { base, is_initial: false, } if key is get_proxy\n            return target[ key ]                                            if ( typeof key ) is 'symbol'\n            return target[ key ]                                            if Reflect.has target, key\n            doublestack.push_new_stack()                                    if cfg.is_initial\n            doublestack.peek_stack().push key\n            return R\n        if cfg.is_initial then  R = new_doublestack_infiniproxy { base, is_initial: false, }\n        else                    R = proxy\n        return proxy\n      #.........................................................................................................\n      return do ( proxy = new_doublestack_infiniproxy base ) => { proxy, doublestack, }\n\n    #-----------------------------------------------------------------------------------------------------------\n    return { create_doublestack_infiniproxy, }\n"
  ]
}