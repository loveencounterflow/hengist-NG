{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-types-as-classes.coffee"
  ],
  "names": [],
  "mappings": "AAiCG;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAGH;AAHG,MAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,iBAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAMH,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,YAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,IAJF,EAKE,GALF,CAAA,GAK4B,GAAG,CAAC,GALhC;;EAMA,CAAA,CAAE,IAAF,CAAA,GAA4B,GAAG,CAAC,KAAhC;;EACA,CAAA;IAAE,KAAA,EAAO,CACL,MADK;EAAT,CAAA,GAC4B,OAAA,CAAQ,sBAAR,CAD5B,EAvBG;;;EA4BH,iBAAA,GAAoB,QAAA,CAAA,CAAA;AACpB,QAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAE,CAAA,GAAI,OAAA,CAAQ,qCAAR,EAAN;;IAGQ,OAAN,MAAA,KAAA,CAAA;;MAGE,WAAa,CAAA,CAAA;QACX,CAAC,CAAC,qBAAF,CAAwB,IAAxB;AACA,eAAO;MAFI,CADjB;;;MAMI,MAAQ,CAAE,GAAF,CAAA,EAAA;;AACZ,YAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,EAAA,GAAA,EAAA;QAAM,MAAA,GAAS,CAAA;QACT,UAAA,GAAgB,CAAA,CAAA,CAAA,GAAA;AACtB,cAAA,KAAA,EAAA,GAAA,EAAA,OAAA,EAAA;UAAQ,IAAoB,kBAApB;AAAA,mBAAO,MAAP;;UACA,KAAA,GAAQ;AACR;UAAA,KAAA,mBAAA;;YACE,KAAA;YACA,MAAM,CAAE,YAAF,CAAN,GAAyB;UAF3B;AAGA,iBAAO,KAAA,KAAW;QANJ,CAAA,IADtB;;QASM,IAAG,eAAH;UACE,KAAA,CAAM,OAAN,EAAe,GAAA,YAAe,IAAC,CAAA,WAA/B;UACA,KAAA,CAAM,OAAN,EAAe,IAAC,CAAA,GAAD,CAAK,GAAL,CAAf;AACA,kBAAO,IAAP;AAAA,iBACO,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,GAAG,CAAC,GAA1B,CAAF,CAAA,KAAqC,mBAD5C;cAEI,GAAA,GAAM,GAAG,CAAC;AADP;AADP,iBAGO,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,GAAG,CAAC,GAAG,CAAC,GAA9B,CAAF,CAAA,KAAyC,mBAHhD;cAKI,GAAA,GAAM,GAAG,CAAC,GAAG,CAAC;AAFX;AAHP;cAMO,MAAM,IAAI,KAAJ,CAAU,OAAV;AANb,WAHF;SAAA,MAAA;;;UAaE,GAAA,GAAM,QAAA,CAAE,CAAF,CAAA;AACd,gBAAA,UAAA,EAAA,GAAA,EAAA,IAAA,EAAA;YAAU,IAAoB,SAApB;AAAA,qBAAO,MAAP;;YACA,WAAoB,CAAC,CAAC,iBAAiB,UAAnB,QAA2B,QAA/C;AAAA,qBAAO,MAAP;;YACA,IAD4D,oBACzD,UAAH;AACE;cAAA,KAAA,kBAAA;;gBACE,IAAY,OAAO,CAAC,GAAR,CAAY,CAAC,CAAE,UAAF,CAAb,CAAZ;AAAA,2BAAA;iBAAd;;gBAEc,IAAA,CAAK,OAAL,EAAc,CAAA,WAAA,CAAA,CAAc,OAAO,CAAC,IAAtB,CAAA,WAAA,CAAA,CAAwC,UAAxC,CAAA,MAAA,CAAA,CAA2D,GAAA,CAAI,CAAC,CAAE,UAAF,CAAL,CAA3D,CAAA,CAAd;AACA,uBAAO;cAJT,CADF;;AAMA,mBAAO;UATH,EAbR;SATN;;QAiCM,MAAA,sCAAsB,QAAA,CAAA,CAAA,EAAA,EAjC5B;;;;;;;;;QA0CM,KAAA;;;mBAAQ,MAAA,QAAc,IAAC,CAAA,YAAf,CAAA;;2BACN,IAAA,GAAc,GAAG,CAAC;;2BAClB,GAAA,GAAc;;2BACd,MAAA,GAAc;;2BACd,MAAA,GAAc;;2BACd,UAAA,GAAc;;;;;QAChB,MAAA,CAAS,KAAK,CAAC,uBAAN,CAA8B,GAAG,CAAC,IAAlC,CAAT,EAAmD,KAAnD;AACA,eAAO,IAAI,KAAJ,CAAA;MAlDD,CANZ;;;MA2D+B,OAA1B,uBAA0B,CAAE,YAAY,IAAd,CAAA;AAC/B,YAAA;QAAM,CAAA,uBAAM,YAAY;AAClB,eAAS,CAAC,CAAE,CAAF,CAAO,CAAC,WAAX,CAAA,CAAA,GAA2B,CAAC;MAFV,CA3D/B;;;MAgEI,QAAU,CAAE,CAAF,CAAA,EAAA;;MACV,GAAK,CAAE,CAAF,CAAA;eAAS,CAAA,YAAa,IAAC,CAAA;MAAvB;;IAnEP,EAHF;;IAyEE,IAAA,GAAQ,IAAI,IAAJ,CAAA;IACR,GAAA,GAAQ,CAAA,EA1EV;;IA6EE,GAAG,CAAC,IAAJ,GAAW,IAAI,CAAC,MAAL,CACT;MAAA,IAAA,EAAU,MAAV;MACA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CADV;MAEA,MAAA,EAAU,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;yEAAiB;MAAzB;IAFV,CADS,EA7Eb;;IAkFE,GAAG,CAAC,aAAJ,GAAoB,IAAI,CAAC,MAAL,CAClB;MAAA,IAAA,EAAU,eAAV;MACA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,GAAG,CAAC,IAAI,CAAC,GAAT,CAAa,CAAb,CAAF,CAAA,IAAuB,CAAE,CAAC,CAAC,MAAF,KAAc,CAAhB;MAAhC,CADV;MAEA,MAAA,EAAU,QAAA,CAAE,CAAF,CAAA;AAAQ,YAAA;yEAAiB;MAAzB;IAFV,CADkB,EAlFtB;;IAuFE,GAAG,CAAC,KAAJ,GAAY,IAAI,CAAC,MAAL,CACV;MAAA,IAAA,EAAU,OAAV;MACA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB;MAAT,CADV;MAEA,MAAA,EAAU,QAAA,CAAE,IAAI,CAAN,CAAA;QAAa,IAAG,sCAAH;iBAAa,UAAA,CAAW,CAAX,EAAb;SAAA,MAAA;iBAAiC,EAAjC;;MAAb;IAFV,CADU,EAvFd;;IA4FE,GAAG,CAAC,UAAJ,GAAiB,IAAI,CAAC,MAAL,CACf;MAAA,IAAA,EAAU,YAAV;MACA,GAAA,EAAU,GAAG,CAAC;IADd,CADe,EA5FnB;;IAgGE,GAAG,CAAC,UAAJ,GAAiB,IAAI,CAAC,MAAL,CACf;MAAA,IAAA,EAAU,YAAV;MACA,GAAA,EAAU,GAAG,CAAC;IADd,CADe,EAhGnB;;IAoGE,GAAG,CAAC,QAAJ,GAAe,IAAI,CAAC,MAAL,CACb;MAAA,IAAA,EAAU,UAAV;MACA,MAAA,EAAU,QAAA,CAAE,GAAF,CAAA;eAAW;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG,GAAX;UAAgB,GAAA;QAAhB;MAAX,CADV;MAEA,MAAA,EACE;QAAA,CAAA,EAAU,GAAG,CAAC,UAAd;QACA,CAAA,EAAU,GAAG,CAAC;MADd;IAHF,CADa,EApGjB;;IA2GE,GAAG,CAAC,OAAJ,GAAc,IAAI,CAAC,MAAL,CACZ;MAAA,IAAA,EAAU,SAAV;MACA,GAAA,EAAU,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,SAAP,CAAiB,CAAjB;MAAT,CADV;MAEA,MAAA,EAAU,QAAA,CAAE,IAAI,CAAN,CAAA;QAAa,IAAG,sCAAH;iBAAa,QAAA,CAAS,CAAT,EAAY,EAAZ,EAAb;SAAA,MAAA;iBAAmC,EAAnC;;MAAb;IAFV,CADY,EA3GhB;;AAiHE,WAAO,CAAE,GAAF,EAAO,IAAP;EAlHW,EA5BjB;;;EAkJH,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;AACxC,UAAA,IAAA,EAAA;MAAE,CAAA,CAAE,IAAF,EACE,GADF,CAAA,GACsB,iBAAA,CAAA,CADtB;MAEA,IAAA,CAAK,OAAL,EAAc,GAAd;MACG,CAAA,CAAA,CAAA,GAAA;QACD,IAAA,CAAA;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,OAAlB;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,OAAO,CAAC,GAAZ,CAAgB,KAAhB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,OAAO,CAAC,GAAZ,CAAgB,CAAhB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,OAAO,CAAC,MAAZ,CAAmB,GAAnB,CAAd;eACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,OAAO,CAAC,MAAZ,CAAA,CAAd;MANC,CAAA;MAOA,CAAA,CAAA,CAAA,GAAA;QACD,IAAA,CAAA;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAlB;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,GAAlB,CAAsB,KAAtB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,GAAlB,CAAsB,EAAtB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,GAAlB,CAAsB,GAAtB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,MAAlB,CAAA,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,MAAlB,CAAyB,KAAzB,CAAd;eACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,MAAlB,CAAyB,GAAzB,CAAd;MARC,CAAA;MASA,CAAA,CAAA,CAAA,GAAA;QACD,IAAA,CAAA;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAlB;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,MAAb,CAAA,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,MAAb,CAAqB;UAAE,CAAA,EAAG,GAAL;UAAU,CAAA,EAAG;QAAb,CAArB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,GAAb,CAAqB;UAAE,CAAA,EAAG,GAAL;UAAU,CAAA,EAAG;QAAb,CAArB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAtB,CAA0B,CAA1B,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAtB,CAA0B,KAA1B,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,aAAa,CAAC,MAAlB,CAA8B,GAA9B,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,UAAU,CAAC,MAAf,CAA8B,GAA9B,CAAd;eACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAtB,CAA8B,GAA9B,CAAd;MAVC,CAAA;aAWA,CAAA,CAAA,CAAA,GAAA;QACD,IAAA,CAAA;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAlB;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,WAA3B;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAvC;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,GAA3B;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,GAAb,CAAiB,CAAA,CAAjB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,GAAb,CAAiB;UAAE,CAAA,EAAG,CAAL;UAAQ,CAAA,EAAG;QAAX,CAAjB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,GAAb,CAAiB;UAAE,CAAA,EAAG,GAAL;UAAU,CAAA,EAAG;QAAb,CAAjB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,GAAb,CAAiB;UAAE,CAAA,EAAG,GAAL;UAAU,CAAA,EAAG;QAAb,CAAjB,CAAd;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,QAAQ,CAAC,IAA3B;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,OAAO,CAAC,IAA1B;QACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,UAAU,CAAC,IAA7B;eACA,IAAA,CAAK,OAAL,EAAc,GAAG,CAAC,UAAU,CAAC,IAA7B;MAbC,CAAA;IA/BmC,CAAA,IAAxC;;AAlJG",
  "sourcesContent": [
    "\n###\n\n1.  ```\n    class Type\n      ...\n    type      = new Type type_cfg\n    integer   = type.create { name: 'integer',  isa: ( -> ), ..., }\n    quantity  = type.create { name: 'quantity', isa: ( -> ), ..., q: ..., u: ..., }\n\n    # usage:\n    integer.create 3.141\n    ```\n\n2.  ```\n    class Integer extends Type\n      isa:     ( x ) -> Number.isInteger x\n      create:  ( x ) -> parseInt x, 10\n    integer = new Integer()\n\n    # usage:\n    integer.create 3.141\n    ```\n\n3.  ```\n    class integer extends Type\n      @isa:    ( x ) -> Number.isInteger x\n      @create: ( x ) -> parseInt x, 10\n\n    # usage:\n    integer.create 3.141\n    ```\n\n###\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n{ props: {\n    nameit } }            = require '../../../apps/webguy'\n\n\n#===========================================================================================================\nrequire_cleartype = ->\n  H = require '../../../apps/cleartype/lib/helpers'\n\n  #===========================================================================================================\n  class Type\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      H.bind_instance_methods @\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    create: ( dcl ) ->\n      fields = {}\n      has_fields = do =>\n        return false unless dcl.fields?\n        count = 0\n        for subtype_name, subtype of dcl.fields\n          count++\n          fields[ subtype_name ] = subtype\n        return count isnt 0\n      #.......................................................................................................\n      if dcl.isa?\n        debug 'Ω___1', dcl instanceof @constructor\n        debug 'Ω___2', @isa dcl\n        switch true\n          when ( Object::toString.call dcl.isa ) is '[object Function]'\n            isa = dcl.isa\n          when ( Object::toString.call dcl.isa.isa ) is '[object Function]'\n            ### TAINT should check with instanceof ###\n            isa = dcl.isa.isa\n          else throw new Error 'Ω___3'\n      #.......................................................................................................\n      else\n        ### TAINT check whether there are fields ###\n        isa = ( x ) ->\n          return false unless x?\n          return false unless x.constructor in [ Object, undefined, ] ### stad.pod.isa x ###\n          if has_fields\n            for field_name, subtype of dcl.fields\n              continue if subtype.isa x[ field_name ]\n              # warn 'Ω___4', \"x.#{field_name}: #{rpr x[ field_name ]} is not a #{subtype.name}\"\n              warn 'Ω___4', \"expected a #{subtype.name} for field #{field_name}, got #{rpr x[ field_name ]}\"\n              return false\n          return true\n      #.......................................................................................................\n      create = dcl.create ? ->\n      # if dcl.create?\n      #   create = ( x ) -> dcl.create x\n      # else\n      #   ### TAINT check whether there are fields ###\n      #   fields = {}\n      #   for field_name, dsc of Object.getOwnPropertyDescriptors dcl\n\n      #.......................................................................................................\n      clasz = class extends @constructor\n        name:         dcl.name\n        isa:          isa # .bind clasz\n        create:       create # .bind clasz\n        fields:       fields\n        has_fields:   has_fields\n      nameit ( clasz.classname_from_typename dcl.name ), clasz\n      return new clasz()\n\n    #---------------------------------------------------------------------------------------------------------\n    @classname_from_typename = ( classname = null ) ->\n      R = ( classname ? 'anonymous' )\n      return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n    #---------------------------------------------------------------------------------------------------------\n    validate: ( x ) ->\n    isa: ( x ) -> x instanceof @constructor\n\n  #-----------------------------------------------------------------------------------------------------------\n  type  = new Type()\n  std   = {}\n\n  #-----------------------------------------------------------------------------------------------------------\n  std.text = type.create\n    name:     'text'\n    isa:      ( x ) -> ( Object::toString.call x ) is '[object String]'\n    create:   ( x ) -> x?.toString() ? ''\n  #-----------------------------------------------------------------------------------------------------------\n  std.nonempty_text = type.create\n    name:     'nonempty_text'\n    isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  #-----------------------------------------------------------------------------------------------------------\n  std.float = type.create\n    name:     'float'\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #-----------------------------------------------------------------------------------------------------------\n  std.quantity_q = type.create\n    name:     'quantity_q'\n    isa:      std.float\n  #-----------------------------------------------------------------------------------------------------------\n  std.quantity_u = type.create\n    name:     'quantity_u'\n    isa:      std.nonempty_text\n  #-----------------------------------------------------------------------------------------------------------\n  std.quantity = type.create\n    name:     'quantity'\n    create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:        std.quantity_q\n      u:        std.quantity_u\n  #-----------------------------------------------------------------------------------------------------------\n  std.integer = type.create\n    name:     'integer'\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n\n  #=========================================================================================================\n  return { std, Type, }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  { Type\n    std             } = require_cleartype()\n  info 'Ω___5', std\n  do =>\n    echo()\n    info 'Ω___6', std.integer\n    info 'Ω___7', std.integer.isa 3.141\n    info 'Ω___8', std.integer.isa 3\n    info 'Ω___9', std.integer.create '3'\n    info 'Ω__10', std.integer.create()\n  do =>\n    echo()\n    info 'Ω__11', std.nonempty_text\n    info 'Ω__12', std.nonempty_text.isa 3.141\n    info 'Ω__13', std.nonempty_text.isa ''\n    info 'Ω__14', std.nonempty_text.isa 'd'\n    info 'Ω__15', std.nonempty_text.create()\n    info 'Ω__16', std.nonempty_text.create false\n    info 'Ω__17', std.nonempty_text.create 'd'\n  do =>\n    echo()\n    info 'Ω__18', std.quantity\n    info 'Ω__19', std.quantity.create()\n    info 'Ω__20', std.quantity.create  { q: 4.3, u: 's', }\n    info 'Ω__21', std.quantity.isa     { q: 4.3, u: 's', }\n    info 'Ω__22', std.quantity.fields.q.isa 7\n    info 'Ω__23', std.quantity.fields.q.isa Infinity\n    info 'Ω__24', std.nonempty_text.create      'g'\n    info 'Ω__25', std.quantity_u.create         'g'\n    info 'Ω__26', std.quantity.fields.u.create  'g'\n  do =>\n    echo()\n    help 'Ω__27', std.quantity\n    help 'Ω__28', std.quantity.constructor\n    help 'Ω__29', std.quantity.constructor.name\n    help 'Ω__30', std.quantity.isa\n    help 'Ω__31', std.quantity.isa {}\n    help 'Ω__32', std.quantity.isa { u: 7, q: 3, }\n    help 'Ω__33', std.quantity.isa { u: '7', q: 3, }\n    help 'Ω__34', std.quantity.isa { u: '7', q: Infinity, }\n    help 'Ω__35', std.quantity.name\n    help 'Ω__36', std.integer.name\n    help 'Ω__37', std.quantity_q.name\n    help 'Ω__38', std.quantity_u.name\n\n"
  ]
}