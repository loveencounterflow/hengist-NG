{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-types-as-classes.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n1.  ```\n    class Type\n      ...\n    type      = new Type type_cfg\n    integer   = type.$create { $name: 'integer',  $isa: ( -> ), ..., }\n    quantity  = type.$create { $name: 'quantity', $isa: ( -> ), ..., q: ..., u: ..., }\n\n    # usage:\n    integer.$create 3.141\n    ```\n\n2.  ```\n    class Integer extends Type\n      $isa:     ( x ) -> Number.isInteger x\n      $create:  ( x ) -> parseInt x, 10\n    integer = new Integer()\n\n    # usage:\n    integer.$create 3.141\n    ```\n\n3.  ```\n    class integer extends Type\n      @$isa:    ( x ) -> Number.isInteger x\n      @$create: ( x ) -> parseInt x, 10\n\n    # usage:\n    integer.$create 3.141\n    ```\n\n###\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n{ props: {\n    nameit } }            = require '../../../apps/webguy'\n\n\n#===========================================================================================================\nrequire_cleartype = ->\n\n  #===========================================================================================================\n  class Type\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    $create: ( dcl ) ->\n      if dcl.$isa?\n        $isa = ( x ) -> dcl.$isa x\n      else\n        ### TAINT check whether there are fields ###\n        fields = {}\n        for field_name, dsc of Object.getOwnPropertyDescriptors dcl\n          continue if field_name.startsWith '$'\n          fields[ field_name ] = dsc.value\n        # field_names = Object.keys fields\n        $isa = ( x ) ->\n          return false unless x?\n          return false unless x.constructor in [ Object, undefined, ] ### stad.pod.$isa x ###\n          for field_name, subtype of fields\n            continue if subtype.$isa x[ field_name ]\n            warn 'Î©___1', \"x.#{field_name} is not a #{subtype.$name}\"\n            return false\n          return true\n      #.......................................................................................................\n      $create = dcl.$create ? ->\n      # if dcl.$create?\n      #   $create = ( x ) -> dcl.$create x\n      # else\n      #   ### TAINT check whether there are fields ###\n      #   fields = {}\n      #   for field_name, dsc of Object.getOwnPropertyDescriptors dcl\n\n      #.......................................................................................................\n      R = {}\n      R.$isa    = $isa.bind R\n      R.$create = $create.bind R\n      return R\n\n    #---------------------------------------------------------------------------------------------------------\n    $validate: ( x ) ->\n    $isa: ( x ) ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  type = new Type()\n\n  #-----------------------------------------------------------------------------------------------------------\n  text = type.$create\n    $name:     'text'\n    $isa:     ( x ) -> ( Object::toString.call x ) is '[object String]'\n    $create:  ( x ) -> x?.toString() ? ''\n  #-----------------------------------------------------------------------------------------------------------\n  nonempty_text = type.$create\n    $name:     'nonempty_text'\n    $isa:     ( x ) -> ( text.$isa x ) and ( x.length isnt 0 )\n    $create:  ( x ) -> x?.toString() ? ''\n  #-----------------------------------------------------------------------------------------------------------\n  float = type.$create\n    $name:     'float'\n    $isa:     ( x ) -> Number.isFinite x\n    $create:  ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #-----------------------------------------------------------------------------------------------------------\n  quantity = do =>\n    $create = ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    q       = type.$create\n      $name: 'q'\n      $isa: ( x ) -> float.$isa x\n    u       = type.$create\n      $name: 'u'\n      $isa: ( x ) -> nonempty_text.$isa x\n    type.$create { $name: 'quantity', $create, q, u, }\n  #-----------------------------------------------------------------------------------------------------------\n  integer = do =>\n    $isa    = ( x ) -> Number.isInteger x\n    $create = ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n    type.$create { $name: 'integer', $isa, $create, }\n\n  #===========================================================================================================\n  std = { text, nonempty_text, float, integer, quantity, }\n\n  #=========================================================================================================\n  return { std, Type, }\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  { Type\n    std             } = require_cleartype()\n  info 'Î©___2', std\n  do =>\n    echo()\n    info 'Î©___3', std.integer\n    info 'Î©___4', std.integer.$isa 3.141\n    info 'Î©___5', std.integer.$isa 3\n    info 'Î©___6', std.integer.$create '3'\n    info 'Î©___7', std.integer.$create()\n  do =>\n    echo()\n    info 'Î©___8', std.nonempty_text\n    info 'Î©___9', std.nonempty_text.$isa 3.141\n    info 'Î©__10', std.nonempty_text.$isa ''\n    info 'Î©__11', std.nonempty_text.$isa 'd'\n    info 'Î©__12', std.nonempty_text.$create()\n    info 'Î©__13', std.nonempty_text.$create false\n    info 'Î©__14', std.nonempty_text.$create 'd'\n  do =>\n    echo()\n    info 'Î©__15', std.quantity\n    info 'Î©__16', std.quantity.$create()\n    info 'Î©__17', std.quantity.$create  { q: 4.3, u: 's', }\n    info 'Î©__18', std.quantity.$isa     { q: 4.3, u: 's', }\n    info 'Î©__19', std.quantity.q.$isa 7\n    info 'Î©__20', std.quantity.q.$isa Infinity\n    info 'Î©__21', std.quantity.u.$create 'g'\n\n"
  ]
}