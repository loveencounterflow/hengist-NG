{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-types-as-classes.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n1.  ```\n    class Type\n      ...\n    type      = new Type type_cfg\n    integer   = type.create { name: 'integer',  isa: ( -> ), ..., }\n    quantity  = type.create { name: 'quantity', isa: ( -> ), ..., q: ..., u: ..., }\n\n    # usage:\n    integer.create 3.141\n    ```\n\n2.  ```\n    class Integer extends Type\n      isa:     ( x ) -> Number.isInteger x\n      create:  ( x ) -> parseInt x, 10\n    integer = new Integer()\n\n    # usage:\n    integer.create 3.141\n    ```\n\n3.  ```\n    class integer extends Type\n      @isa:    ( x ) -> Number.isInteger x\n      @create: ( x ) -> parseInt x, 10\n\n    # usage:\n    integer.create 3.141\n    ```\n\n###\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n{ hide }                  = GUY.props\n{ props: {\n    nameit } }            = require '../../../apps/webguy'\n{ f }                     = require '../../../apps/effstring'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n\n#===========================================================================================================\nrequire_cleartype = ->\n  H = require '../../../apps/cleartype/lib/helpers'\n\n  #===========================================================================================================\n  class Type\n\n    #---------------------------------------------------------------------------------------------------------\n    constructor: ->\n      # H.bind_instance_methods @\n      return undefined\n\n    #---------------------------------------------------------------------------------------------------------\n    create: ( dcl ) ->\n      fields = {}\n      #.......................................................................................................\n      if dcl.refines?\n        unless ( dcl.refines instanceof @constructor )\n          throw new Error \"Ω___1 dcl.refines must be instanceof #{rpr @constructor}\"\n        is_extension  = true\n        extension     = dcl.refines.constructor\n      else\n        is_extension  = false\n        extension     = @constructor\n      #.......................................................................................................\n      has_fields = do =>\n        return false unless dcl.fields?\n        count = 0\n        for subtype_name, subtype of dcl.fields\n          count++\n          fields[ subtype_name ] = subtype\n        return count isnt 0\n      #.......................................................................................................\n      if dcl.isa?\n        # debug 'Ω___2', dcl instanceof @constructor\n        # debug 'Ω___3', @isa dcl\n        switch true\n          when ( Object::toString.call dcl.isa ) is '[object Function]'\n            per_se_isa = dcl.isa\n          when ( Object::toString.call dcl.isa.isa ) is '[object Function]'\n            ### TAINT should check with instanceof ###\n            per_se_isa = dcl.isa.isa\n          else throw new Error 'Ω___4'\n      #.......................................................................................................\n      else\n        ### TAINT check whether there are fields ###\n        per_se_isa = ( x ) ->\n          return false unless x?\n          return false unless x.constructor in [ Object, undefined, ] ### stad.pod.isa x ###\n          if has_fields\n            for field_name, subtype of dcl.fields\n              continue if subtype.isa x[ field_name ]\n              # warn 'Ω___5', \"x.#{field_name}: #{rpr x[ field_name ]} is not a #{subtype.name}\"\n              warn 'Ω___6', \"expected a #{subtype.name} for field #{field_name}, got #{rpr x[ field_name ]}\"\n              return false\n          return true\n      #.......................................................................................................\n      if is_extension\n        ### TAINT review use of dcl.refines here ###\n        isa = ( x ) -> ( dcl.refines.isa x ) and ( per_se_isa x )\n      else\n        isa = per_se_isa\n      #.......................................................................................................\n      create = dcl.create ? ->\n      # if dcl.create?\n      #   create = ( x ) -> dcl.create x\n      # else\n      #   ### TAINT check whether there are fields ###\n      #   fields = {}\n      #   for field_name, dsc of Object.getOwnPropertyDescriptors dcl\n      #.......................................................................................................\n      clasz = class extends extension\n        name:         dcl.name\n        isa:          nameit ( @isaname_from_typename dcl.name ), isa\n        create:       create\n        fields:       fields\n        has_fields:   has_fields\n      nameit ( clasz.classname_from_typename dcl.name ), clasz\n      return new clasz()\n\n    #---------------------------------------------------------------------------------------------------------\n    @classname_from_typename = ( typename = null ) ->\n      R = ( typename ? 'anonymous' )\n      return ( R[ 0 ] ).toUpperCase() + R[ 1 .. ]\n\n    #---------------------------------------------------------------------------------------------------------\n    @isaname_from_typename = ( typename = null ) ->\n      R = ( typename ? 'anonymous' )\n      return \"isa_#{typename}\"\n\n    #---------------------------------------------------------------------------------------------------------\n    validate: ( x ) ->\n      return x if @isa x\n      throw new Error \"Ω___7 Cleartype_validation_error\"\n\n    #---------------------------------------------------------------------------------------------------------\n    isa: ( x ) -> x instanceof @constructor\n\n  #-----------------------------------------------------------------------------------------------------------\n  type  = new Type()\n  std   = {}\n\n  #-----------------------------------------------------------------------------------------------------------\n  std.text = type.create\n    name:     'text'\n    isa:      ( x ) -> ( Object::toString.call x ) is '[object String]'\n    create:   ( x ) -> x?.toString() ? ''\n  #-----------------------------------------------------------------------------------------------------------\n  std.nonempty_text = type.create\n    name:     'nonempty_text'\n    refines:  std.text # .constructor\n    # isa:      ( x ) -> ( std.text.isa x ) and ( x.length isnt 0 )\n    isa:      ( x ) -> ( x.length isnt 0 )\n    create:   ( x ) -> x?.toString() ? ''\n  #-----------------------------------------------------------------------------------------------------------\n  std.float = type.create\n    name:     'float'\n    isa:      ( x ) -> Number.isFinite x\n    create:   ( n = 0 ) -> if x? then ( parseFloat x ) else 0\n  #-----------------------------------------------------------------------------------------------------------\n  std.quantity_q = type.create\n    name:     'quantity_q'\n    isa:      std.float\n  #-----------------------------------------------------------------------------------------------------------\n  std.quantity_u = type.create\n    name:     'quantity_u'\n    isa:      std.nonempty_text\n  #-----------------------------------------------------------------------------------------------------------\n  std.quantity = type.create\n    name:     'quantity'\n    create:   ( cfg ) -> { q: 0, u: 'u', cfg..., }\n    fields:\n      q:        std.quantity_q\n      u:        std.quantity_u\n  #-----------------------------------------------------------------------------------------------------------\n  std.integer = type.create\n    name:     'integer'\n    isa:      ( x ) -> Number.isInteger x\n    create:   ( n = 0 ) -> if x? then ( parseInt n, 10 ) else 0\n\n  #=========================================================================================================\n  return { std, Type, }\n\n#===========================================================================================================\n@cleartype_tasks =\n  basics: ->\n    { Type\n      std             } = require_cleartype()\n    info 'Ω___8', std\n    do =>\n      echo()\n      info 'Ω___9', std.integer\n      info 'Ω__10', std.integer.isa 3.141\n      info 'Ω__11', std.integer.isa 3\n      info 'Ω__12', std.integer.create '3'\n      info 'Ω__13', std.integer.create()\n    do =>\n      echo()\n      info 'Ω__14', std.nonempty_text\n      @eq ( Ωcltt__15 = -> std.nonempty_text.isa 3.141                  ), false\n      @eq ( Ωcltt__16 = -> std.nonempty_text.isa ''                     ), false\n      @eq ( Ωcltt__17 = -> std.nonempty_text.isa 'd'                    ), true\n      @eq ( Ωcltt__18 = -> std.nonempty_text.create()                   ), ''\n      @eq ( Ωcltt__19 = -> std.nonempty_text.create false               ), 'false'\n      @eq ( Ωcltt__20 = -> std.nonempty_text.create 'd'                 ), 'd'\n    do =>\n      echo()\n      info 'Ω__21', std.quantity\n      @eq ( Ωcltt__22 = -> std.quantity.create()                        ), { q: 0, u: 'u', }\n      @eq ( Ωcltt__23 = -> std.quantity.create    { q: 4.3, u: 's', }   ), { q: 4.3, u: 's', }\n      @eq ( Ωcltt__24 = -> std.quantity.isa       { q: 4.3, u: 's', }   ), true\n      @eq ( Ωcltt__25 = -> std.quantity.validate  { q: 4.3, u: 's', }   ), { q: 4.3, u: 's', }\n      @eq ( Ωcltt__26 = -> std.quantity.fields.q.isa 7                  ), true\n      @eq ( Ωcltt__27 = -> std.quantity.fields.q.isa Infinity           ), false\n      info 'Ω__28', std.nonempty_text.create      'g'\n      info 'Ω__29', std.quantity_u.create         'g'\n      info 'Ω__30', std.quantity.fields.u.create  'g'\n    do =>\n      echo()\n      help 'Ω__31', std.quantity\n      help 'Ω__32', std.quantity.constructor\n      help 'Ω__33', std.quantity.constructor.name\n      help 'Ω__34', std.quantity.isa\n      help 'Ω__35', std.quantity.isa {}\n      help 'Ω__36', std.quantity.isa { u: 7, q: 3, }\n      help 'Ω__37', std.quantity.isa { u: '7', q: 3, }\n      help 'Ω__38', std.quantity.isa { u: '7', q: Infinity, }\n      @eq ( Ωcltt__39 = -> std.quantity.name                    ), 'quantity'\n      @eq ( Ωcltt__40 = -> std.integer.name                     ), 'integer'\n      @eq ( Ωcltt__41 = -> std.quantity_q.name                  ), 'quantity_q'\n      @eq ( Ωcltt__42 = -> std.quantity_u.name                  ), 'quantity_u'\n      echo()\n      help 'Ω__43', std.text.isa\n      help 'Ω__44', std.text.isa 'abc'\n      help 'Ω__45', std.text.isa Array.from 'abc'\n      echo()\n      help 'Ω__46', std.nonempty_text\n      help 'Ω__47', std.nonempty_text.isa\n      @eq ( Ωcltt__48 = -> std.nonempty_text.isa 'abc'            ), true\n      @eq ( Ωcltt__49 = -> std.nonempty_text.isa Array.from 'abc' ), false\n      return null\n    do =>\n      echo()\n      for typename, type of std\n        debug 'Ω__50', ( rpr typename ), ( rpr type.isa.name ), ( rpr \"isa_#{typename}\" )\n        @eq ( Ωcltt__51 = -> type.isa.name ), \"isa_#{typename}\"\n      return null\n    #.......................................................................................................\n    for typename, type of std\n      urge 'Ω__52', f\"#{typename}:<20c; #{type.constructor.name}:<20c; #{type.isa.name}:<20c;\"\n    return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true, show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test @cleartype_tasks\n\n"
  ]
}