{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-single-file-modules.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'test-single-file-modules'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require './single-file-modules'\n\n\n\n\n\n#===========================================================================================================\ntests =\n\n  #---------------------------------------------------------------------------------------------------------\n  test_is_tagfun_call: ->\n    { is_tagfun_call,                  } = SFMODULES.require_tagfun_tools()\n    fn = ( P... ) -> is_tagfun_call P...\n    @eq ( Ωidsp___1 = -> fn()             ), false\n    @eq ( Ωidsp___2 = -> fn [ 1, 2, 3, ]  ), false\n    @eq ( Ωidsp___3 = -> fn\"[ 1, 2, 3, ]\" ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_escape_html_text: ->\n    { escape_html_text, } = SFMODULES.require_escape_html_text()\n    @eq ( Ωidsp___4 = -> escape_html_text ''                    ), ''\n    @eq ( Ωidsp___5 = -> escape_html_text 'abc'                 ), 'abc'\n    @eq ( Ωidsp___6 = -> escape_html_text 'abc<tag>d&e&f</tag>' ), 'abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack: ->\n    { Stack\n      Doublestack, }  = SFMODULES.require_stack_classes()\n    ds                = new Doublestack()\n    my_stack_1        = null\n    my_stack_2        = null\n    @eq ( Ωidsp___7 = -> ds.data                                                  ), []\n    @eq ( Ωidsp___8 = -> ds.length                                                ), 0\n    @eq ( Ωidsp___9 = -> ds.peek_stack null                                       ), null\n    @eq ( Ωidsp__10 = -> ( my_stack_1 = ds.push_new_stack()   ) instanceof Stack  ), true\n    @eq ( Ωidsp__11 = -> ds.length                                                ), 1\n    @eq ( Ωidsp__12 = -> ( my_stack_2 = ds.peek_stack()       ) instanceof Stack  ), true\n    @eq ( Ωidsp__13 = -> my_stack_1 is my_stack_2                                 ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_doublestack_infiniproxy: ->\n    { is_tagfun_call,\n      walk_parts,                     } = SFMODULES.require_tagfun_tools()\n    { create_doublestack_infiniproxy, } = SFMODULES.require_doublestack_infiniproxy()\n    #.......................................................................................................\n    create_echoing_proxy = ->\n      base = ( P... ) ->\n        debug 'Ωidsp__14', P\n        text = ''\n        for part from walk_parts P...\n          if part.isa is 'chunk'\n            text += part.chunk\n          else\n            debug 'Ωidsp__15', part\n            text += \"#{part.value}\"\n        chain = @stack.data.join '.'\n        return \"[#{chain}:#{text}]\"\n      R = create_doublestack_infiniproxy base\n      return R\n    #.......................................................................................................\n    do =>\n      PRX = create_echoing_proxy()\n      info 'Ωidsp__16', rpr PRX.proxy.gold.bold.underlined\"text 1\"\n      info 'Ωidsp__17', rpr PRX.proxy.red.reverse.italic\"text 2\"\n      info 'Ωidsp__18', rpr PRX.proxy.red.reverse.italic\"text 2 #{PRX.proxy.gold.bold.underlined\"(embedded text)\"}!!\"\n      #.......................................................................................................\n      @eq ( Ωidsp__19 = -> PRX.proxy.gold.bold.underlined\"text 1\"                                                     ), \"\"\"[gold.bold.underlined:text 1]\"\"\"\n      @eq ( Ωidsp__20 = -> PRX.proxy.red.reverse.italic\"text 2\"                                                       ), \"\"\"[red.reverse.italic:text 2]\"\"\"\n      @eq ( Ωidsp__21 = -> PRX.proxy.red.reverse.italic\"text 2 #{PRX.proxy.gold.bold.underlined\"(embedded text)\"}!!\"  ), \"\"\"[red.reverse.italic:text 2 [gold.bold.underlined:(embedded text)]!!]\"\"\"\n      ### NOTE 'unused' property chains shouldn't leave traces on stack, but they do: ###\n      @eq ( Ωidsp__22 = ->                                                                  PRX.doublestack.length ), 0\n      @eq ( Ωidsp__23 = ->                              PRX.proxy.using_chain_2\"some text\"; PRX.doublestack.length ), 0\n      @eq ( Ωidsp__24 = -> PRX.proxy.building.chain_1;  PRX.proxy.using_chain_2\"some text\"; PRX.doublestack.length ), 1 ### NOTE: should be 0 ###\n      return null\n    #.......................................................................................................\n    do =>\n      echo '——————————————————————————————————————————————————————————————————————————————'\n      PRX = create_echoing_proxy()\n      PRX.proxy.a.b.c\n      PRX.proxy.d.e.f\n      @eq ( Ωidsp__25 = -> PRX.doublestack.length   ), 2\n      @eq ( Ωidsp__26 = -> PRX.proxy.g.h.i 127      ), \"[g.h.i:127]\"\n      @eq ( Ωidsp__27 = -> PRX.doublestack.length   ), 2\n      @eq ( Ωidsp__28 = -> PRX.doublestack.clear()  ), null\n      @eq ( Ωidsp__29 = -> PRX.doublestack.length   ), 0\n    #.......................................................................................................\n    do =>\n      echo '——————————————————————————————————————————————————————————————————————————————'\n      PRX = create_echoing_proxy()\n      @eq ( Ωidsp__30 = -> PRX.proxy.a.b.c 90                  ), \"\"\"[a.b.c:90]\"\"\"\n      @eq ( Ωidsp__31 = -> PRX.proxy.a.b.c PRX.proxy.d.e.f 90  ), \"\"\"[a.b.c:[d.e.f:90]]\"\"\"\n      @eq ( Ωidsp__32 = -> PRX.doublestack.length              ), 0\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  test_walk_tagfun_call_parts: ->\n    # { Html,                     } = require_html_class()\n    # { escape_html_text,         } = require_escape_html_text()\n    # { stackable_tagfun,         } = require_stackable_tagfun()\n    { walk_parts,\n      walk_nonempty_parts,\n      walk_raw_parts,\n      walk_raw_nonempty_parts,  } = SFMODULES.require_tagfun_tools()\n    #-------------------------------------------------------------------------------------------------------\n    @eq ( Ωt__33 = -> [ ( walk_parts\"\"                  )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__34 = -> [ ( walk_parts \"\"                 )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__35 = -> [ ( walk_nonempty_parts\"\"         )..., ] ), []\n    @eq ( Ωt__36 = -> [ ( walk_nonempty_parts ''        )..., ] ), []\n    @eq ( Ωt__37 = -> [ ( walk_parts\"a\"                 )..., ] ), [ { chunk: 'a', isa: 'chunk', }, ]\n    @eq ( Ωt__38 = -> [ ( walk_parts\"\\na\"               )..., ] ), [ { chunk: '\\na', isa: 'chunk', }, ]\n    @eq ( Ωt__39 = -> [ ( walk_raw_parts\"\\na\"           )..., ] ), [ { chunk: '\\\\na', isa: 'chunk', }, ]\n    @eq ( Ωt__40 = -> [ ( walk_parts\"#{1}\"              )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__41 = -> [ ( walk_nonempty_parts\"#{1}\"     )..., ] ), [ { value: 1, isa: 'value', }, ]\n    @eq ( Ωt__42 = -> [ ( walk_parts\"a#{1}\"             )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__43 = -> [ ( walk_parts\"#{1}#{2}\"          )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', } ]\n    @eq ( Ωt__44 = -> [ ( walk_nonempty_parts\"#{1}#{2}\" )..., ] ), [ { value: 1, isa: 'value', }, { value: 2, isa: 'value', }, ]\n    @eq ( Ωt__45 = -> [ ( walk_parts\"a#{1}z\"            )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, ]\n    @eq ( Ωt__46 = -> [ ( walk_parts\"a#{1}z#{2}\"        )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__47 = -> [ ( walk_parts \"a#{1}z#{2}\"       )..., ] ), [ { chunk: 'a1z2', isa: 'chunk', }, ]\n    @eq ( Ωt__48 = -> [ ( walk_parts 12                 )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 12, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωt__49 = -> [ ( walk_nonempty_parts 12        )..., ] ), [ { value: 12, isa: 'value', }, ]\n    #.........................................................................................................\n    return null\n\n\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { tests, }\n\n  # f = ( ctx ) -> debug 'Ωidsp__50', ctx.arguments\n  # g = ( P... ) -> debug 'Ωidsp__51', f { arguments, }\n  # g 5, 'd'\n"
  ]
}