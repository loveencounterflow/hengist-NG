{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-coffeescript-lexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  white\n  red\n  gold\n  blue\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  ILX                 = require '../../../apps/interlex'\n  { Grammar\n    Level\n    Token\n    Lexeme\n    rx\n    internals       } = ILX\n  SLR                 = internals.slevithan_regex\n  jsid_re             = SLR.regex\"\"\" [ $ _ \\p{ID_Start} ] [ $ _ \\u200C \\u200D \\p{ID_Continue} ]* \"\"\"\n  tilde_jsid_re       = SLR.regex\"\"\" ~ #{jsid_re} \"\"\"\n  #.........................................................................................................\n  cs          = new Grammar { emit_signals: true, supply_eol: true, }\n  gnd         = cs.new_level { name: 'gnd', }\n  quote11_lit = cs.new_level { name: 'quote11_lit', }\n  rol_comment = cs.new_level { name: 'rol_comment', }\n  error       = cs.new_level { name: 'error', }\n  #.........................................................................................................\n  indentation_re    = /// (?<= \\n ) \\x20+ ///\n  indentation_cast  = ({ hit, start, source, data, new_lexeme, lexeme, }) ->\n    if ( hit.length %% 2 ) is 0\n      data.length = hit.length\n      data.depth  = hit.length / 2\n      yield lexeme\n    else\n      yield new_lexeme 'error.odd_indentation', start, source, { length: hit.length, }\n      # yield lexeme\n    return null\n  #.........................................................................................................\n  other_re    = /./\n  other_cast  = ({ hit, start, source, new_lexeme, lexeme, }) ->\n    yield new_lexeme 'error.illegal', start, source #, { length: hit.length, }\n      # yield lexeme\n    return null\n  #.........................................................................................................\n  gnd.new_token 'if',                 'if'\n  gnd.new_token 'then',               'then'\n  gnd.new_token 'else',               'else'\n  gnd.new_token 'x_tildeidentifier',  tilde_jsid_re\n  gnd.new_token 'identifier',         jsid_re\n  gnd.new_token 'slimarrow',          '->'\n  gnd.new_token 'fatarrow',           '=>'\n  gnd.new_token 'x_slimarrow',        '<->'\n  gnd.new_token 'x_fatarrow',         '<=>'\n  gnd.new_token 'at',                 '@'\n  gnd.new_token 'nl',                 '\\n'\n  gnd.new_token 'equals',             '='\n  gnd.new_token 'minus',              '-'\n  gnd.new_token 'plus',               '+'\n  gnd.new_token 'power',              '**'\n  gnd.new_token 'times',              '*'\n  gnd.new_token 'comma',              ','\n  gnd.new_token 'semicolon',          ';'\n  gnd.new_token 'hash',               '#', { jump: 'rol_comment!', }\n  gnd.new_token 'openparen',          '('\n  gnd.new_token 'closeparen',         ')'\n  gnd.new_token 'openbracket',        '['\n  gnd.new_token 'closebracket',       ']'\n  gnd.new_token 'opencurly',          '{'\n  gnd.new_token 'closecurly',         '}'\n  gnd.new_token 'x_return',           '<-'\n  gnd.new_token 'indentation',        indentation_re, { cast: indentation_cast, }\n  gnd.new_token 'quote13',            \"'''\"\n  gnd.new_token 'quote11',            \"'\", { jump: 'quote11_lit!', }\n  gnd.new_token 'quote23',            '\"\"\"'\n  gnd.new_token 'quote21',            '\"'\n  gnd.new_token 'digits',             /// [ 0-9 ] ///, { merge: true, }\n  gnd.new_token 'dot',                '.'\n  gnd.new_token 'ws',                 /// (?<! \\n ) \\s+ ///\n  gnd.new_token 'other',              other_re, { cast: other_cast, merge: true, }\n  # gnd.new_token 'other',              /// [^ \\x00-\\/ :-\\@ ] ///, { merge: true, }\n  # gnd.new_token 'other',              /// . ///, { error: true, merge: true, }\n  #.........................................................................................................\n  quote11_lit.new_token 'quote11',  \"'\", { jump: '..', }\n  quote11_lit.new_token 'literal',  /// [^ ' ]+ ///\n  #.........................................................................................................\n  rol_comment.new_token 'literal',  /// [^ \\n ]+ ///\n  rol_comment.new_token 'nl',       '\\n', { jump: '..!', }\n  #.........................................................................................................\n  error.new_token       'illegal',          other_re, { merge: true, }\n  error.new_token       'odd_indentation',  indentation_re\n  #.........................................................................................................\n  source = \"f = ( arc, bo ) -> '(' + arc + ', ' + bo + ')'; g = => # comment\"\n  source = \"f = ->\\n  @some_method humm # comment\\n  @other_method()\"\n  source = \"f = ->\\n  @some_method humm, '\\n' # comment\\n   @other_method()\"\n  source = \"d.f = ( arc, bo ) ->\\n  <- arc * bo\\ncube = ( x ) <=> x ** 3.00\"\n  source = \"x = 45 ~mul 31; ??? z = 0 if x ~equals y; id = 'x-96'\"\n  #.........................................................................................................\n  for token from cs.scan source\n    continue if token.fqname is 'gnd.ws'\n    data  = if data? and ( Object.keys token.data ).length > 0 then rpr { token.data..., } else ''\n    hit   = if token.hit is '' then '' else reverse bold ( rpr token.hit ).replace /^['\"](.*)['\"]$/gsv, '$1'\n    if token.is_error\n      warn 'Ω___1', f\"#{white token.fqname}:<40c; | #{red reverse bold hit}:<70c; | #{blue data}\"\n    else\n      help 'Ω___2', f\"#{white token.fqname}:<40c; | #{gold hit}:<70c; | #{blue data}\"\n  return null\n\n\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  demo_1()\n  # re      = /// (?<= a ) b ///y\n  # source  = '01b3ab6'\n  # for idx in [ 0 .. 7 ]\n  #   re.lastIndex = idx; debug 'Ω___3', idx, ( rpr source[ idx ... ] ), source.match re\n"
  ]
}