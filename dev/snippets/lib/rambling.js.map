{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/rambling.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'rambling'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require '../../../apps/bricabrac-single-file-modules'\n\nramble = =>\n  # echo \"\\x1b[6nxyz\"\n  # echo \"abc\\x1b[6nxyz\"\n  # echo \"abcdef\\x1b[6nxyz\"\n  # echo \"abcdef𓂋\\x1b[6nxyz\"\n  # echo \"abcdef两\\x1b[6nxyz\"\n  # echo \"abcdef𬺱\\x1b[6nxyz\"\n  # echo \"abcdef𒁾\\x1b[6nxyz\"\n  # f = ( ctx ) -> debug 'Ωbbsfm___1', ctx.arguments\n  # g = ( P... ) -> debug 'Ωbbsfm___2', f { arguments, }\n  # g 5, 'd'\n  # CP = require 'node:child_process'\n  # cfg =\n  #   encoding: 'utf-8'\n  #   stdin:    'inherit'\n  #   stdout:   'inherit'\n  #   stderr:   'inherit'\n  # # debug 'Ωbbsfm___3', CP.execSync \"ls\", cfg\n  # # debug 'Ωbbsfm___4', CP.exec \"\"\"echo -en \"xxxxxxxxx\\x1b[6n\" ; read\\n\"\"\", cfg\n  # # { stdin, stdout, stderr, } =\n  # echo '—————————————————————————————————————————————'\n  # cp = CP.exec \"\"\"echo -en 'xxxxxxxxx\\x1b[6n'\"\"\", cfg\n  # # cp = CP.exec \"\"\"echo -en 'xxxxxxxxx\\x1b[6n' ; read\"\"\", cfg\n  # # cp = CP.exec '''echo '' ; echo -en 'x两\\\\x1b[6n' ; tmux display-message -p '两: #{cursor_x}' >> /tmp/output''', cfg\n  # cp.stdin.resume()\n  # cp.stdin.setEncoding  'utf-8' # 0\n  # cp.stdout.setEncoding 'utf-8' # 1\n  # cp.stderr.setEncoding 'utf-8' # 2\n  # # debug 'Ωbbsfm___5', rpr cp.stdin.read()\n  # # debug 'Ωbbsfm___6', rpr cp.stdout.read()\n  # # debug 'Ωbbsfm___7', rpr cp.stderr.read()\n  # # debug 'Ωbbsfm___8', rpr cp.read()\n  # cp.stdin.on  'data', ( data ) -> help 'Ωbbsfm___9', rpr data # 0\n  # cp.stdout.on 'data', ( data ) -> urge 'Ωbbsfm__10', rpr data # 1\n  # cp.stderr.on 'data', ( data ) -> warn 'Ωbbsfm__11', rpr data # 2\n  # echo '—————————————————————————————————————————————'\n  # cp = CP.spawn 'echo', [ '-en', 'xxxxxxxxx\\x1b[6n', ], cfg\n  # # cp = CP.spawn 'ls', [ '-AlF', ], cfg\n  # cp.stdin.setEncoding  'utf-8'\n  # cp.stdout.setEncoding 'utf-8'\n  # cp.stderr.setEncoding 'utf-8'\n  # # debug 'Ωbbsfm__12', rpr cp.stdin.read()\n  # # debug 'Ωbbsfm__13', rpr cp.stdout.read()\n  # # debug 'Ωbbsfm__14', rpr cp.stderr.read()\n  # # debug 'Ωbbsfm__15', rpr cp.read()\n  # cp.stdin.on  'data', ( data ) -> help 'Ωbbsfm__16', rpr data # 0\n  # cp.stdout.on 'data', ( data ) -> urge 'Ωbbsfm__17', rpr data # 1\n  # cp.stderr.on 'data', ( data ) -> warn 'Ωbbsfm__18', rpr data # 2\n\n  # illegal_codepoints: [ # see https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Special_code_points\n  #   [   0x0000,   0x0000, ] # zero\n  #   [   0x0001,   0x001f, ] # lower controls\n  #   [   0x007f,   0x009f, ] # higher controls\n  #   [   0xd800,   0xdfff, ] # surrogates\n  #   [   0xfdd0,   0xfdef, ]\n  #   [   0xfffe,   0xffff, ]\n  #   [  0x1fffe,  0x1ffff, ]\n  #   [  0x2fffe,  0x2ffff, ]\n  #   [  0x3fffe,  0x3ffff, ]\n  #   [  0x4fffe,  0x4ffff, ]\n  #   [  0x5fffe,  0x5ffff, ]\n  #   [  0x6fffe,  0x6ffff, ]\n  #   [  0x7fffe,  0x7ffff, ]\n  #   [  0x8fffe,  0x8ffff, ]\n  #   [  0x9fffe,  0x9ffff, ]\n  #   [  0xafffe,  0xaffff, ]\n  #   [  0xbfffe,  0xbffff, ]\n  #   [  0xcfffe,  0xcffff, ]\n  #   [  0xdfffe,  0xdffff, ]\n  #   [  0xefffe,  0xeffff, ]\n  #   [  0xffffe,  0xfffff, ]\n  #   [ 0x10fffe, 0x10ffff, ] ]\n\n  illegal_codepoint_patterns =\n    unassigned: ///^\\p{Cn}$///v # Control\n    control:    ///^\\p{C}$///v # Control\n    # surrogate:  ///^\\p{C}$///v # Surrogate\n    letter:     ///^\\p{L}$///v\n    space:      ///^\\p{Zs}$///v\n    separator:  ///^\\p{Z}$///v\n    mark:       ///^\\p{M}$///v\n\n  ucc_patterns =\n    Cc: { code: 'Cc', pattern: ///^\\p{Cc}$///v, name: \"Other, Control\",               }\n    Cf: { code: 'Cf', pattern: ///^\\p{Cf}$///v, name: \"Other, Format\",                }\n    Cn: { code: 'Cn', pattern: ///^\\p{Cn}$///v, name: \"Other, Not Assigned\",          }\n    Co: { code: 'Co', pattern: ///^\\p{Co}$///v, name: \"Other, Private Use\",           }\n    Cs: { code: 'Cs', pattern: ///^\\p{Cs}$///v, name: \"Other, Surrogate\",             }\n    LC: { code: 'LC', pattern: ///^\\p{LC}$///v, name: \"Letter, Cased\",                }\n    Ll: { code: 'Ll', pattern: ///^\\p{Ll}$///v, name: \"Letter, Lowercase\",            }\n    Lm: { code: 'Lm', pattern: ///^\\p{Lm}$///v, name: \"Letter, Modifier\",             }\n    Lo: { code: 'Lo', pattern: ///^\\p{Lo}$///v, name: \"Letter, Other\",                }\n    Lt: { code: 'Lt', pattern: ///^\\p{Lt}$///v, name: \"Letter, Titlecase\",            }\n    Lu: { code: 'Lu', pattern: ///^\\p{Lu}$///v, name: \"Letter, Uppercase\",            }\n    Mc: { code: 'Mc', pattern: ///^\\p{Mc}$///v, name: \"Mark, Spacing Combining\",      }\n    Me: { code: 'Me', pattern: ///^\\p{Me}$///v, name: \"Mark, Enclosing\",              }\n    Mn: { code: 'Mn', pattern: ///^\\p{Mn}$///v, name: \"Mark, Nonspacing\",             }\n    Nd: { code: 'Nd', pattern: ///^\\p{Nd}$///v, name: \"Number, Decimal Digit\",        }\n    Nl: { code: 'Nl', pattern: ///^\\p{Nl}$///v, name: \"Number, Letter\",               }\n    No: { code: 'No', pattern: ///^\\p{No}$///v, name: \"Number, Other\",                }\n    Pc: { code: 'Pc', pattern: ///^\\p{Pc}$///v, name: \"Punctuation, Connector\",       }\n    Pd: { code: 'Pd', pattern: ///^\\p{Pd}$///v, name: \"Punctuation, Dash\",            }\n    Pe: { code: 'Pe', pattern: ///^\\p{Pe}$///v, name: \"Punctuation, Close\",           }\n    Pf: { code: 'Pf', pattern: ///^\\p{Pf}$///v, name: \"Punctuation, Final quote\",     }\n    Pi: { code: 'Pi', pattern: ///^\\p{Pi}$///v, name: \"Punctuation, Initial quote\",   }\n    Po: { code: 'Po', pattern: ///^\\p{Po}$///v, name: \"Punctuation, Other\",           }\n    Ps: { code: 'Ps', pattern: ///^\\p{Ps}$///v, name: \"Punctuation, Open\",            }\n    Sc: { code: 'Sc', pattern: ///^\\p{Sc}$///v, name: \"Symbol, Currency\",             }\n    Sk: { code: 'Sk', pattern: ///^\\p{Sk}$///v, name: \"Symbol, Modifier\",             }\n    Sm: { code: 'Sm', pattern: ///^\\p{Sm}$///v, name: \"Symbol, Math\",                 }\n    So: { code: 'So', pattern: ///^\\p{So}$///v, name: \"Symbol, Other\",                }\n    Zl: { code: 'Zl', pattern: ///^\\p{Zl}$///v, name: \"Separator, Line\",              }\n    Zp: { code: 'Zp', pattern: ///^\\p{Zp}$///v, name: \"Separator, Paragraph\",         }\n    Zs: { code: 'Zs', pattern: ///^\\p{Zs}$///v, name: \"Separator, Space\",             }\n\n  ucc_descriptor_from_chr = ( chr ) ->\n    for _, dsc of ucc_patterns\n      return dsc if dsc.pattern.test chr\n    throw new Error \"Ωbbsfm__19 unable to determine Unicode category code\"\n\n  get_rough_unicode_category = ( chr ) ->\n    for name, pattern of illegal_codepoint_patterns\n      return name if pattern.test chr\n    return 'other'\n\n  # echo \"\"\"#!/usr/bin/env bash\"\"\"\n  # echo \"\"\"set -euo pipefail\"\"\"\n  # echo \"\"\"echo -ne '' > /tmp/output\"\"\"\n\n  f = ->\n  #   for range in ranges\n  #     for cid in range\n  #       cid_hex = \"U+#{( cid.toString 16 ).padStart 4, '0'}\"\n  #       chr     = String.fromCodePoint cid\n  #       ucc     = get_rough_unicode_category chr\n  #       debug 'Ωbbsfm__20', cid_hex, ( rpr chr ), ucc\n  #       switch ucc\n  #         when 'control', 'separator'\n  #           echo \"\"\"echo \"#{cid_hex}: 0\" >> /tmp/output\"\"\"\n  #         when 'space', 'mark'\n  #           # echo \"\"\"echo ; echo -ne \"x#{chr}\\\\x1b[6n\" ; IFS=';' read -sdR -p $'\\\\E[6n' ROW COL ; echo \"#{cid_hex}: $COL\" >> /tmp/output\"\"\"\n  #           echo \"\"\"echo '' ; echo -en 'xx#{chr}\\\\x1b[6n' ; tmux display-message -p '#{cid_hex}: \\#{cursor_x}' >> /tmp/output\"\"\"\n  #         else\n  #           # echo \"\"\"echo ; echo -ne \"x#{chr}\\\\x1b[6n\" ; IFS=';' read -sdR -p $'\\\\E[6n' ROW COL ; echo \"#{chr}: $COL\" >> /tmp/output\"\"\"\n  #           echo \"\"\"echo '' ; echo -en 'xx#{chr}\\\\x1b[6n' ; tmux display-message -p '#{chr}: \\#{cursor_x}' >> /tmp/output\"\"\"\n  #   return null\n  # debug 'Ωbbsfm__21', ( glyph = '🙋🏽' ), Array.from glyph\n  # debug 'Ωbbsfm__22', ( glyph = 'x쒇' ), Array.from glyph\n  # debug 'Ωbbsfm__23', ( glyph = 'x별' ), Array.from glyph\n  # debug 'Ωbbsfm__24', ( glyph = 'xㅂ ㅕ ㄹ' ), Array.from glyph\n  # debug 'Ωbbsfm__25', ( glyph = 'xㅂㅕㄹ' ), Array.from glyph\n  # debug 'Ωbbsfm__26', ( glyph = 'x벼ᄅ' ), Array.from glyph\n  # debug 'Ωbbsfm__27', ( glyph = 'xᄇ\\u{200D}ᅧ\\u{200D}ᆯ' ), Array.from glyph\n  # debug 'Ωbbsfm__28', ( glyph = 'xﾲￊﾩ' ), Array.from glyph\n\n  # echo \"\"\"echo 'xx' | wc --max-line-length\"\"\"                   # 2\n  # echo \"\"\"echo 'x🙋🏽' | wc --max-line-length\"\"\"                  # 5\n  # echo \"\"\"echo 'x쒇' | wc --max-line-length\"\"\"                   # 3\n  # echo \"\"\"echo 'x별' | wc --max-line-length\"\"\"                   # 3\n  # echo \"\"\"echo 'xㅂ ㅕ ㄹ' | wc --max-line-length\"\"\"               # 9\n  # echo \"\"\"echo 'xㅂㅕㄹ' | wc --max-line-length\"\"\"                 # 7\n  # echo \"\"\"echo 'x벼ᄅ' | wc --max-line-length\"\"\"                 # 5\n  # echo \"\"\"echo 'xᄇ\\u{200D}ᅧ\\u{200D}ᆯ' | wc --max-line-length\"\"\" # 3\n  # echo \"\"\"echo 'xﾲￊﾩ' | wc --max-line-length\"\"\"                 # 4\n  # echo \"\"\"echo 'xa︠b︡' | wc --max-line-length\"\"\"                # 3\n  # echo \"\"\"echo 'xâ' | wc --max-line-length\"\"\"                  # 2\n\n  CP = require 'node:child_process'\n  texts = [\n    'xxx'  # 2\n    'x🙋🏽x'  # 5\n    'x쒇x'  # 3\n    'x별x'  # 3\n    'xㅂ ㅕ ㄹx'   # 9\n    'xㅂㅕㄹx'  # 7\n    'xﾲￊﾩx'  # 4\n    'x별Lx'  # 4\n    'xa︠b︡x'  # 3\n    'xa︠b︡x'  # 3\n    'xâx'  # 2\n    'x𓃵x'\n    'x﷽x'\n    ]\n  get_wc_max_line_length = ( text ) ->\n    ### thx to https://unix.stackexchange.com/a/258551/280204 ###\n    width1_txt  = CP.execSync \"\"\"echo #{rpr text} | wc --max-line-length\"\"\", { encoding: 'utf-8', }\n    return parseInt width1_txt, 10\n  # for text in texts\n  #   echo 'Ωbbsfm__29', ( rpr text ), ( get_wc_max_line_length text ) - 2\n\n  ranges = [\n    # [ 0x00_0000 .. 0x10_ffff ]\n    [ 0x00_0000 .. 0x00_ffff ]\n    # [ 0x00_0000 .. 0x00_00ff ]\n    # [ 0x000000 .. 0x000200 ]\n    # [ 0x00ff00 .. 0x0100ff ]\n    # [ 0x013000 .. 0x0130ff ]\n    ]\n\n  demo_wc_max_line_length = ->\n    for range in ranges\n      for cid in range\n        cid_hex = \"U+#{( cid.toString 16 ).padStart 4, '0'}\"\n        chr     = String.fromCodePoint cid\n        ucc     = get_rough_unicode_category chr\n        # debug 'Ωbbsfm__30', cid_hex, ( rpr chr ), ucc\n        echo cid_hex, ( get_wc_max_line_length \"x#{chr}x\" ) - 2\n        # switch ucc\n        #   when 'control', 'separator'\n        #     echo \"\"\"echo \"#{cid_hex}: 0\" >> /tmp/output\"\"\"\n        #   when 'space', 'mark'\n        #     # echo \"\"\"echo ; echo -ne \"x#{chr}\\\\x1b[6n\" ; IFS=';' read -sdR -p $'\\\\E[6n' ROW COL ; echo \"#{cid_hex}: $COL\" >> /tmp/output\"\"\"\n        #     echo \"\"\"echo '' ; echo -en 'xx#{chr}\\\\x1b[6n' ; tmux display-message -p '#{cid_hex}: \\#{cursor_x}' >> /tmp/output\"\"\"\n        #   else\n        #     # echo \"\"\"echo ; echo -ne \"x#{chr}\\\\x1b[6n\" ; IFS=';' read -sdR -p $'\\\\E[6n' ROW COL ; echo \"#{chr}: $COL\" >> /tmp/output\"\"\"\n        #     echo \"\"\"echo '' ; echo -en 'xx#{chr}\\\\x1b[6n' ; tmux display-message -p '#{chr}: \\#{cursor_x}' >> /tmp/output\"\"\"\n    return null\n  CP = require 'node:child_process'\n  use_open_process_to_execute_shell_commands = ->\n    cp = CP.spawn \"bash\", [], { encoding: 'utf-8', }\n    cp.stdin.setEncoding  'utf-8'\n    cp.stdout.setEncoding 'utf-8'\n    cp.stderr.setEncoding 'utf-8'\n    cp.stdin.on  'data', ( data ) -> help 'Ωbbsfm__31', rpr data # 0\n    # cp.stdout.on 'data', ( data ) -> urge 'Ωbbsfm__32', rpr data # 1\n    cp.stdout.on 'data', ( data ) -> echo data # 1\n    cp.stderr.on 'data', ( data ) -> warn 'Ωbbsfm__33',     data # 2\n    # cp.stdin.write \"\"\"echo -ne 'text' | tee >(wc --max-line-length) >(echo -ne)\\n\"\"\"\n    # cp.stdin.write \"\"\"echo -ne 'ᄑ<1171><11b6>' | tee >(wc --max-line-length) >(echo -ne)\\n\"\"\"\n    text = '쒇'; cp.stdin.write \"\"\"length=\"$(echo #{rpr text} | wc --max-line-length)\" ; echo \"#{text} $length\"\\n\"\"\"\n    for range in ranges\n      for cid in range\n        cid_hex = \"U+#{( cid.toString 16 ).padStart 6, '0'}\"\n        chr     = String.fromCodePoint cid\n        ucc     = get_rough_unicode_category chr\n        text    = \"#{cid_hex}x#{chr}x\"\n        switch ucc\n          when 'control', 'separator'\n            null\n            # echo \"\"\"echo \"#{cid_hex}: 0\" >> /tmp/output\"\"\"\n          when 'letter', 'space', 'mark', 'other'\n            echo text\n    return null\n    # cp.stdin.write \"\"\"\\n\"\"\"\n    # cp.end()\n  # use_open_process_to_execute_shell_commands()\n  # demo_wc_max_line_length()\n  write_unicode_chrs = ->\n    for range in ranges\n      for cid in range\n        cid_hex = \"U#{( cid.toString 16 ).padStart 6, '0'}\"\n        chr     = String.fromCodePoint cid\n        ucc     = get_rough_unicode_category chr\n        text    = \"#{cid_hex}|x#{chr}x\"\n        switch ucc\n          when 'control', 'separator'\n            null\n          when 'letter', 'space', 'mark', 'other'\n            echo text\n    return null\n  # write_unicode_chrs()\n  for cid in [ 0x00 .. 0x30 ]\n    cid_hex = \"0x#{( cid.toString 16 ).padStart 4, '0'}\"\n    debug 'Ωbbsfm__34', ( \"#{cid}\".padStart 6, ' ' ), ( cid_hex ), ( cid & 0b1111_0000 ) >> 4, ( ( cid & 0b000_1111 ) << 1 )\n  bitfield = new Uint32Array [ 1, 0xffff_ffff, 3, 4, 5, ]\n  debug 'Ωbbsfm__35', ( bitfield[ 0 ].toString 2 ).padStart 32, '.'\n  debug 'Ωbbsfm__36', ( bitfield[ 1 ].toString 2 ).padStart 32, '.'\n  bitfield[ 1 ] += 0x1\n  debug 'Ωbbsfm__37', ( bitfield[ 1 ].toString 2 ).padStart 32, '.'\n  debug 'Ωbbsfm__38', ( bitfield[ 2 ].toString 2 ).padStart 32, '.'\n  debug 'Ωbbsfm__39', ( bitfield[ 3 ].toString 2 ).padStart 32, '.'\n  debug 'Ωbbsfm__40', ( bitfield[ 4 ].toString 2 ).padStart 32, '.'\n  findCacheDirectory = ( require 'find-cache-directory' ).default\n  debug 'Ωbbsfm__41', findCacheDirectory { name: 'effstring', create: true, }\n  envPaths = ( require 'env-paths' ).default\n  debug 'Ωbbsfm__42', k, v for k, v of envPaths 'effstring'\n\n# findCacheDirectory({name: 'unicorns'});\n# //=> '/user/path/node-modules/.cache/unicorns'\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await ramble()\n  return null\n"
  ]
}