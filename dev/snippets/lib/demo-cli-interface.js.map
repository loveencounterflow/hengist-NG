{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cli-interface.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,YAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,qBAAA,EAAA,GAAA,EAAA,kBAAA,EAAA,eAAA,EAAA,aAAA,EAAA,eAAA,EAAA,IAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,oBAAA,EAAA,qBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,aAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,YAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,IAJF,EAKE,GALF,CAAA,GAK4B,GAAG,CAAC,GALhC,EAbA;;;EAoBA,GAAA,GAA4B,OAAA,CAAQ,gBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,IAAA,GAA4B,QAAA,CAAE,GAAF,CAAA;WAAW,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,EAAA,CAAA,CAAI,GAAJ,EAAA,CAAL,CAAR,CAAL;EAAX,EAtB5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8DM,eAAN,MAAA,aAAA,QAAwC,MAAxC,CAAA;;EACM,gBAAN,MAAA,cAAA,QAAwC,aAAxC,CAAA;;EACM,qBAAN,MAAA,mBAAA,QAAwC,aAAxC,CAAA,EAhEA;;;;EAoEM,iBAAN,MAAA,eAAA;IACE,WAAa,SAAA,CAAA;MAAE,IAAC,CAAA;MAAa;IAAhB;;EADf;;EAGM,kBAAN,MAAA,gBAAA,QAAoC,eAApC,CAAA;;EACM,mBAAN,MAAA,iBAAA,QAAoC,eAApC,CAAA;;EACM,kBAAN,MAAA,gBAAA,QAAoC,eAApC,CAAA;;EACM,wBAAN,MAAA,sBAAA,QAAoC,eAApC,CAAA,EA1EA;;;EA8EM,qBAAN,MAAA,mBAAA,CAAA;;IAGE,KAAO,CAAE,KAAF,CAAA,EAAA;;MAEL,IAAG,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAH;QACE,GAAG,CAAC,MAAJ,CAAW,sBAAX;QACA,IAAC,CAAA,YAAD,CAAc,CAAd,EAFF;;AAGA,aAAO;IALF,CADT;;;IASgB,MAAd,KAAc,CAAE,GAAF,CAAA;aAAW,IAAC,CAAA,KAAD,CAAO,CAAA,MAAM,GAAG,CAAC,KAAJ,CAAgB,GAAhB,CAAN,CAAP;IAAX;;IACA,MAAd,KAAc,CAAE,GAAF,CAAA;aAAW,IAAC,CAAA,KAAD,CAAO,CAAA,MAAM,GAAG,CAAC,KAAJ,CAAgB,GAAhB,CAAN,CAAP;IAAX;;IACA,MAAd,OAAc,CAAE,GAAF,CAAA;aAAW,IAAC,CAAA,KAAD,CAAO,CAAA,MAAM,GAAG,CAAC,OAAJ,CAAgB,GAAhB,CAAN,CAAP;IAAX;;IACA,MAAd,IAAc,CAAE,GAAF,CAAA;aAAW,IAAC,CAAA,KAAD,CAAO,CAAA,MAAM,GAAG,CAAC,IAAJ,CAAgB,GAAhB,CAAN,CAAP;IAAX;;IACA,MAAd,MAAc,CAAE,GAAF,CAAA;aAAW,IAAC,CAAA,KAAD,CAAO,CAAA,MAAM,GAAG,CAAC,MAAJ,CAAgB,GAAhB,CAAN,CAAP;IAAX;;IACA,MAAd,WAAc,CAAE,GAAF,CAAA;aAAW,IAAC,CAAA,KAAD,CAAO,CAAA,MAAM,GAAG,CAAC,WAAJ,CAAgB,GAAhB,CAAN,CAAP;IAAX;;IACd,WAAc,CAAE,GAAF,CAAA;aAAW,GAAG,CAAC,OAAJ,CAAA;IAAX;;IACd,MAAsB,CAAA,CAAA;aAAG;IAAH,CAhBxB;;;IAmBE,YAAc,CAAE,OAAO,CAAT,CAAA;aAAgB,OAAO,CAAC,IAAR,CAAa,IAAb;IAAhB;;EArBhB,EA9EA;;;EAuGM,sBAAN,MAAA,oBAAA,CAAA;;IAGE,WAAa,CAAE,KAAF,CAAA;MACX,IAAC,CAAA,GAAD,GAAc,GAAG,CAAC,GAAG,CAAC,MAAR,CAAe;QAAE,WAAA,EAAa;MAAf,CAAf;MACd,IAAC,CADmD,6BACnD,UAAD,GAAc;MACd,IAAC,CAAA,SAAD,GAAc,MAAM,CAAC,IAAP,CAAY,IAAC,CAAA,UAAb;MACd,IAAC,CAAA,GAAD,GAAc,CAAC;MACf,IAAC,CAAA,UAAD,GAAc,CAAA;MACd,IAAC,CAAA,OAAD,GAAc,CAAA,EALlB;;MAOI,GAAG,CAAC,KAAK,CAAC,GAAV,CAAc,IAAd,EAAiB,WAAjB,EACE;QAAA,UAAA,EAAc,KAAd;QACA,YAAA,EAAc,KADd;QAEA,GAAA,EAAc,QAAA,CAAA,CAAA;AAAE,cAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AAAG;AAAA;UAAA,KAAA,sCAAA;;gBAA4B,CAAA,YAAa;2BAAzC;;UAAA,CAAA;;QAAL;MAFd,CADF,EAPJ;;AAYI,aAAO;IAbI,CADf;;;IAiBE,KAAO,CAAE,GAAF,CAAA;AACT,UAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA;MAAI,IAAC,CAAA,GAAD;MACA,IAAG,CAAM,uEAAN,CAAA,IAAgD,CAAM,iEAAN,CAAnD;QACE,OAAA,GAAU,CAAA,sCAAA,CAAA,CAAyC,IAAC,CAAA,gBAAD,CAAA,CAAzC,CAAA,KAAA,CAAA,CAAoE,IAAC,CAAA,SAAS,CAAC,MAA/E,CAAA;QACV,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,IAAI,eAAJ,CAAoB,OAApB,CAAZ;QACA,MAAM,IAAI,aAAJ,CAAkB,OAAlB,EAHR;;AAIA,aAAO;IANF,CAjBT;;;IA0BE,KAAO,CAAE,GAAF,EAAO,OAAP,CAAA;MACL,IAAC,CAAA,UAAU,CAAE,GAAF,CAAX,GAAqB;MACrB,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,OAAhB;AACA,aAAO;IAHF,CA1BT;;;IAgCS,MAAP,KAAO,CAAE,OAAF,EAAW,GAAX,CAAA;AACT,UAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAI,GAAA,4DAAiB,CAAA,EAAA,CAAA,CAAK,IAAC,CAAA,GAAD,GAAO,CAAZ,CAAA,EAArB;;MAEI,IAAG,IAAC,CAAA,GAAG,CAAC,WAAL,IAAqB,OAAO,CAAC,GAAR,CAAY,IAAC,CAAA,OAAb,EAAsB,GAAtB,CAAxB;QACE,OAAA,GAAU,CAAA,eAAA,CAAA,CAAkB,GAAlB,CAAA;QACV,IAAC,CAAA,KAAD,CAAO,GAAP,EAAY,IAAI,qBAAJ,CAA0B,OAA1B,CAAZ;QACA,MAAM,IAAI,kBAAJ,CAAuB,OAAvB,EAHR;OAFJ;;MAOI,CAAE,OAAF,EAAW,KAAX,CAAA,GAAsB,IAAC,CAAA,KAAD,CAAO,GAAP;MACtB,IAAC,CAAA,OAAO,CAAE,GAAF,CAAR,GAAsB,MAR1B;;MAUI,IAAG,OAAA,KAAW,OAAd;QACE,IAAC,CAAA,UAAU,CAAE,GAAF,CAAX,GAAqB,QADvB;OAAA,MAAA;QAGE,IAAC,CAAA,UAAU,CAAE,GAAF,CAAX,GAAqB,IAAI,eAAJ,CAAoB,CAAA,KAAA,CAAA,CAAQ,IAAC,CAAA,GAAT,CAAA,MAAA,CAAA,CAAqB,GAAA,CAAI,OAAJ,CAArB,CAAA,MAAA,CAAA,CAAyC,GAAA,CAAI,OAAJ,CAAzC,CAAA,CAApB,EAHvB;;AAIA,aAAO,CAAA,MAAM,GAAG,CAAC,KAAK,CAAC,KAAV,CAAgB,QAAA,CAAA,CAAA;eAAG;MAAH,CAAhB,CAAN;IAfF,CAhCT;;;IAkDE,gBAAkB,CAAA,CAAA;aAAG,IAAC,CAAA,GAAD,GAAO;IAAV;;IAClB,YAAkB,CAAA,CAAA;aAAG,IAAC,CAAA,gBAAD,CAAA,CAAA,KAAuB,IAAC,CAAA,SAAS,CAAC;IAArC,CAnDpB;;;IAqDE,WAAkB,CAAA,CAAA;aAAG,IAAC,CAAA,gBAAD,CAAA,CAAA,GAAuB,IAAC,CAAA,SAAS,CAAC;IAArC,CArDpB;;;IAwDE,MAAQ,CAAA,GAAE,CAAF,CAAA;MAEN,IAAe,IAAC,CAAA,YAAD,CAAA,CAAA,IAAmB,IAAC,CAAA,WAAD,CAAA,CAAlC;;AAAA,eAAO,KAAP;;MACA,IAAC,CAAA,KAAD,CAAO,SAAP,EAAkB,IAAI,gBAAJ,CAAqB,CAAA,wBAAA,CAAA,CAA2B,IAAC,CAAA,gBAAD,CAAA,CAA3B,CAAA,KAAA,CAAA,CAAsD,IAAC,CAAA,SAAS,CAAC,MAAjE,CAAA,CAArB,CAAlB;AACA,aAAO;IAJD,CAxDV;;;IA+DE,KAAc,CAAE,GAAF,CAAA;aAAW;IAAX;;IACd,KAAc,CAAE,GAAF,CAAA;aAAW;IAAX;;IACA,MAAd,OAAc,CAAE,GAAF,CAAA;aAAW,CAAA,MAAM,IAAC,CAAA,KAAD,CAAO,SAAP,EAAuB,GAAvB,CAAN;IAAX;;IACA,MAAd,IAAc,CAAE,GAAF,CAAA;aAAW,CAAA,MAAM,IAAC,CAAA,KAAD,CAAO,MAAP,EAAuB,GAAvB,CAAN;IAAX;;IACA,MAAd,MAAc,CAAE,GAAF,CAAA;aAAW,CAAA,MAAM,IAAC,CAAA,KAAD,CAAO,QAAP,EAAuB,GAAvB,CAAN;IAAX;;IACA,MAAd,WAAc,CAAE,GAAF,CAAA;aAAW,CAAA,MAAM,IAAC,CAAA,KAAD,CAAO,aAAP,EAAuB,GAAvB,CAAN;IAAX;;IACd,WAAsB,CAAA,CAAA;aAAG;QAAE,KAAA,EAAO,CAAE,QAAA,CAAA,CAAA,EAAA,CAAF,CAAT;QAAiB,IAAA,EAAM,CAAE,QAAA,CAAA,CAAA,EAAA,CAAF;MAAvB;IAAH,CArExB;;;IAwEE,YAAc,CAAE,IAAF,CAAA,EAAA;;AAEZ,aAAO;IAFK;;EA1EhB,EAvGA;;;EAuLA,aAAA,GAAgB,MAAA,QAAA,CAAE,MAAM,IAAR,CAAA;AAChB,QAAA;;MAAE,MAAQ,IAAI,kBAAJ,CAAA;KAAV;;IAEE,GAAG,CAAC,KAAJ,CAAU,eAAV;AAEA,WAAA,IAAA,GAAA;;MACE,IAAG,KAAA,GAAQ,CAAA,MAAM,GAAG,CAAC,OAAJ,CAAY;QAAE,GAAA,EAAK,IAAP;QAAa,OAAA,EAAS;MAAtB,CAAZ,CAAN,CAAX;QACE,KAAA,CAAM,OAAN,EAAe,GAAA,CAAI,KAAJ,CAAf;AACA,iBAFF;;AAGA;IAJF;IAKA,MAAM,GAAG,CAAC,IAAJ,CAAS;MAAE,GAAA,EAAK,IAAP;MAAa,OAAA,EAAS;IAAtB,CAAT;IAEN,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;AACX,UAAA,GAAA,EAAA;MAAI,GAAA,GACE;QAAA,GAAA,EAAY,IAAZ;QACA,OAAA,EAAY,sBADZ;QAEA,OAAA,EAAS;UACP;YAAE,KAAA,EAAO,IAAT;YAAoB,KAAA,EAAO;UAA3B,CADO;UAEP;YAAE,KAAA,EAAO,IAAT;YAAoB,KAAA,EAAO;UAA3B,CAFO;UAGP;YAAE,KAAA,EAAO,QAAT;YAAoB,KAAA,EAAO,cAA3B;YAA2C,IAAA,EAAM;UAAjD,CAHO;;MAFT;MAMF,YAAA,GAAe,CAAA,MAAM,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAN;AACf,aAAO;IATA,CAAA;IAWT,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;AACX,UAAA,GAAA,EAAA,OAAA,EAAA;MAAI,OAAA,GAAU,GAAG,CAAC,WAAJ,CAAA;MACV,OAAO,CAAC,KAAR,CAAc,kBAAd;MACA,GAAA,GACE;QAAA,GAAA,EAAY,IAAZ;QACA,OAAA,EAAY,0BADZ;QAEA,OAAA,EAAS;UACP;YAAE,KAAA,EAAO,QAAT;YAAmB,KAAA,EAAO,QAA1B;YAAoC,IAAA,EAAM;UAA1C,CADO;UAEP;YAAE,KAAA,EAAO,UAAT;YAAqB,KAAA,EAAO;UAA5B,CAFO;UAGP;YAAE,KAAA,EAAO,WAAT;YAAsB,KAAA,EAAO;UAA7B,CAHO;SAFT;QAMA,QAAA,EAAU;MANV;MAOF,KAAA,GAAQ,CAAA,MAAM,GAAG,CAAC,WAAJ,CAAgB,GAAhB,CAAN;MACR,OAAO,CAAC,IAAR,CAAa,SAAb;AACA,aAAO;IAbA,CAAA,IAtBX;;IAqCE,GAAG,CAAC,KAAJ,CAAU,iBAAV,EArCF;;AAuCE,WAAO,GAAG,CAAC;EAxCG,EAvLhB;;;EAkOA,oBAAA,GAAuB,MAAA,QAAA,CAAA,CAAA;IACrB,MAAM,aAAA,CAAA,EAAR;AACE,WAAO;EAFc,EAlOvB;;;EAuOA,qBAAA,GAAwB,MAAA,QAAA,CAAA,CAAA;AACxB,QAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA;;;;;;IAQE,KAAA,GACE;MAAA,EAAA,EAAY,CAAE,SAAF,EAAkB,KAAlB,CAAZ;MACA,EAAA,EAAY,CAAE,MAAF,EAAkB,MAAlB,CADZ;MAEA,EAAA,EAAY,CAAE,QAAF,EAAkB,QAAlB,CAFZ;MAGA,GAAA,EAAY,CAAE,aAAF,EAAkB,CAAE,UAAF,CAAlB,CAHZ;MAIA,QAAA,EAAY,CAAE,QAAF,EAAkB,IAAlB;IAJZ;IAKF,GAAA,GAAM,IAAI,mBAAJ,CAAwB,KAAxB;AACN;MACE,MAAM,aAAA,CAAc,GAAd,EADR;KAEA,cAAA;MAAM;MACJ,MAAmB,KAAA,YAAiB,aAApC;QAAA,MAAM,MAAN;;MACA,IAAA,CAAK,OAAL,EAAc,OAAA,CAAQ,IAAA,CAAK,KAAK,CAAC,OAAX,CAAR,CAAd,EAFF;;IAGA,GAAG,CAAC,MAAJ,CAAA;AACA;IAAA,KAAA,WAAA;;MACE,IAAG,IAAA,YAAgB,cAAnB;QAAwC,IAAA,CAAK,GAAL,EAAU,IAAV,EAAxC;OAAA,MAAA;QACwC,IAAA,CAAK,GAAL,EAAU,IAAV,EADxC;;IADF;IAGA,IAAA,CAAK,GAAG,CAAC,OAAT;AACA,WAAO;EA1Be,EAvOxB;;;EAqQA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;MAEtC,MAAM,qBAAA,CAAA;AACN,aAAO;IAH+B,CAAA,IAAxC;;AArQA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n#...........................................................................................................\nCLK                       = require '@clack/prompts'\nPATH                      = require 'node:path'\nmark                      = ( ref ) -> urge reverse bold \" #{ref} \"\n\n\n# #===========================================================================================================\n# class Clack\n\n#   #---------------------------------------------------------------------------------------------------------\n#   intro_outro: ->\n#     CLK.intro \"create-my-app\"\n#     value = await CLK.text { message: \"press CTRL+C to continue\", }\n#     if CLK.isCancel value\n#       CLK.cancel \"Operation cancelled.\"\n#       # process.exit 0\n#     CLK.outro \"You're all set!\"\n#     return null\n\n#   #---------------------------------------------------------------------------------------------------------\n#   text: ->\n#     cfg =\n#       message:      \"What is your name?\"\n#       placeholder:  \"Not sure\"\n#       initialValue: \"Jim\"\n#       validate:     ( value ) ->\n#         # debug 'Ω___1', rpr value\n#         return \"Value is required!\" if value.length is 0\n#         return null\n#     name = await CLK.text cfg\n#     info \"Ω___2 your name is #{rpr name}\"\n#     return null\n\n\n###\n\nErrors entail failures\n\n\n###\n\n#===========================================================================================================\n### TAINT Later to be extended so we pass in parameters, not messages ###\nclass Dialog_error              extends Error\nclass Overrun_error             extends Dialog_error\nclass Dulicate_ref_error        extends Dialog_error\n\n#===========================================================================================================\n### TAINT Later to be extended so we pass in parameters, not messages ###\nclass Dialog_failure\n  constructor: ( @message ) -> undefined\n\nclass Misstep_failure       extends Dialog_failure\nclass Underrun_failure      extends Dialog_failure\nclass Overrun_failure       extends Dialog_failure\nclass Duplicate_ref_failure extends Dialog_failure\n\n\n#===========================================================================================================\nclass Interactive_dialog\n\n  #---------------------------------------------------------------------------------------------------------\n  ctrlc: ( value ) ->\n    # debug 'Ω___3', rpr value\n    if CLK.isCancel value\n      CLK.cancel \"Operation cancelled.\"\n      @process_exit 0\n    return value\n\n  #---------------------------------------------------------------------------------------------------------\n  intro:        ( cfg ) -> @ctrlc await CLK.intro       cfg\n  outro:        ( cfg ) -> @ctrlc await CLK.outro       cfg\n  confirm:      ( cfg ) -> @ctrlc await CLK.confirm     cfg\n  text:         ( cfg ) -> @ctrlc await CLK.text        cfg\n  select:       ( cfg ) -> @ctrlc await CLK.select      cfg\n  multiselect:  ( cfg ) -> @ctrlc await CLK.multiselect cfg\n  get_spinner:  ( cfg ) -> CLK.spinner()\n  finish:               -> null\n\n  #---------------------------------------------------------------------------------------------------------\n  process_exit: ( code = 0 ) -> process.exit code\n\n\n#===========================================================================================================\nclass Programmatic_dialog\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( steps ) ->\n    @cfg        = GUY.lft.freeze { unique_refs: true, } ### TAINT make configurable ###\n    @_exp_steps = steps\n    @_exp_keys  = Object.keys @_exp_steps\n    @_pc        = -1\n    @_act_steps = {}\n    @results    = {}\n    #.......................................................................................................\n    GUY.props.def @, '_failures',\n      enumerable:   false\n      configurable: false\n      get:          -> ( d for d in @_act_steps when d instanceof Dialog_failure )\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _next: ( ref ) ->\n    @_pc++\n    if ( not ( key = @_exp_keys[ @_pc ] ? null )? ) or ( not ( R = @_exp_steps[ key ] ? null )? )\n      message = \"emergency halt, running too long: act #{@_count_act_steps()} exp #{@_exp_keys.length}\"\n      @_fail ref, new Overrun_failure message\n      throw new Overrun_error message\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _fail: ( ref, failure ) ->\n    @_act_steps[ ref ] = failure\n    @_failures.push failure\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _step: ( act_key, cfg ) ->\n    ref = cfg?.ref ? \"$q#{@_pc + 2}\"\n    #.......................................................................................................\n    if @cfg.unique_refs and Reflect.has @results, ref\n      message = \"duplicate ref: #{ref}\"\n      @_fail ref, new Duplicate_ref_failure message\n      throw new Dulicate_ref_error message\n    #.......................................................................................................\n    [ exp_key, value, ] = @_next ref\n    @results[ ref ]     = value\n    #.......................................................................................................\n    if act_key is exp_key\n      @_act_steps[ ref ] = act_key\n    else\n      @_act_steps[ ref ] = new Misstep_failure \"step##{@_pc}: act #{rpr act_key}, exp #{rpr exp_key}\"\n    return await GUY.async.defer -> value\n\n  #---------------------------------------------------------------------------------------------------------\n  _count_act_steps: -> @_pc + 1\n  _is_finished:     -> @_count_act_steps() is @_exp_keys.length\n  # _is_underrun:     -> @_count_act_steps() <  @_exp_keys.length\n  _is_overrun:      -> @_count_act_steps() >  @_exp_keys.length\n\n  #---------------------------------------------------------------------------------------------------------\n  finish: ( P... ) ->\n    #### `dlg.finish()` should be called after the simulated dialog has ben run to issue an  ####\n    return true if @_is_finished() or @_is_overrun()\n    @_fail '$finish', new Underrun_failure \"finished too early: act #{@_count_act_steps()} exp #{@_exp_keys.length}\"\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  intro:        ( cfg ) -> null\n  outro:        ( cfg ) -> null\n  confirm:      ( cfg ) -> await @_step 'confirm',      cfg\n  text:         ( cfg ) -> await @_step 'text',         cfg\n  select:       ( cfg ) -> await @_step 'select',       cfg\n  multiselect:  ( cfg ) -> await @_step 'multiselect',  cfg\n  get_spinner:          -> { start: ( -> ), stop: ( -> ), }\n\n  #---------------------------------------------------------------------------------------------------------\n  process_exit: ( code ) ->\n    # not really exiting the process\n    return code\n\n\n#===========================================================================================================\nsample_dialog = ( dlg = null ) ->\n  dlg  ?= new Interactive_dialog()\n  #.........................................................................................................\n  dlg.intro \"create-my-app\"\n  #.........................................................................................................\n  loop\n    if value = await dlg.confirm { ref: 'q1', message: \"do you want to loop?\", }\n      debug 'Ω___5', rpr value\n      continue\n    break\n  await dlg.text { ref: 'q2', message: \"please enter text\", }\n  #.........................................................................................................\n  await do =>\n    cfg =\n      ref:        'q3'\n      message:    \"Pick a project type.\"\n      options: [\n        { value: 'ts',      label: 'TypeScript' },\n        { value: 'js',      label: 'JavaScript' },\n        { value: 'coffee',  label: 'CoffeeScript', hint: 'yes!' }, ]\n    project_type = await dlg.select cfg\n    return null\n  #.........................................................................................................\n  await do =>\n    spinner = dlg.get_spinner()\n    spinner.start \"asking questions\"\n    cfg =\n      ref:        null # intentionally left out\n      message:    \"Select additional tools.\"\n      options: [\n        { value: 'eslint', label: 'ESLint', hint: 'recommended' },\n        { value: 'prettier', label: 'Prettier' },\n        { value: 'gh-action', label: 'GitHub Action' }, ]\n      required: false\n    tools = await dlg.multiselect cfg\n    spinner.stop \"thanks!\"\n    return null\n  #.........................................................................................................\n  dlg.outro \"You're all set!\"\n  #.........................................................................................................\n  return dlg.results\n\n#===========================================================================================================\ndemo_run_interactive = ->\n  await sample_dialog() # or `sample_dialog new Interactive_dialog()`\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_run_programmatic = ->\n  # steps = [\n  #   # [ 'confirm',  true, ]\n  #\n  #\n  #\n  #\n  #   # [ 'outro', ]\n  #   ]\n  steps =\n    q1:         [ 'confirm',      false,            ]\n    q2:         [ 'text',         \"helo\",           ]\n    q3:         [ 'select',       'coffee',         ]\n    $q4:        [ 'multiselect',  [ 'prettier', ],  ]\n    whatever:   [ 'select',       'js',         ]\n  dlg = new Programmatic_dialog steps\n  try\n    await sample_dialog dlg\n  catch error\n    throw error unless error instanceof Dialog_error\n    warn 'Ω___8', reverse bold error.message\n  dlg.finish()\n  for ref, step of dlg._act_steps\n    if step instanceof Dialog_failure then  warn ref, step\n    else                                    help ref, step\n  info dlg.results\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_run_interactive()\n  await demo_run_programmatic()\n  return null\n\n"
  ]
}