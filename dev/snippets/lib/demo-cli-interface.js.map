{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cli-interface.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'demo-execa'\n{ rpr\n  inspect\n  echo\n  reverse\n  bold\n  log     }               = GUY.trm\n#...........................................................................................................\nCLK                       = require '@clack/prompts'\nPATH                      = require 'node:path'\nmark                      = ( ref ) -> urge reverse bold \" #{ref} \"\n\n\n# #===========================================================================================================\n# class Clack\n\n#   #---------------------------------------------------------------------------------------------------------\n#   intro_outro: ->\n#     CLK.intro \"create-my-app\"\n#     value = await CLK.text { message: \"press CTRL+C to continue\", }\n#     if CLK.isCancel value\n#       CLK.cancel \"Operation cancelled.\"\n#       # process.exit 0\n#     CLK.outro \"You're all set!\"\n#     return null\n\n#   #---------------------------------------------------------------------------------------------------------\n#   text: ->\n#     cfg =\n#       message:      \"What is your name?\"\n#       placeholder:  \"Not sure\"\n#       initialValue: \"Jim\"\n#       validate:     ( value ) ->\n#         # debug 'Ω___1', rpr value\n#         return \"Value is required!\" if value.length is 0\n#         return null\n#     name = await CLK.text cfg\n#     info \"Ω___2 your name is #{rpr name}\"\n#     return null\n\n#   #---------------------------------------------------------------------------------------------------------\n#   select: ->\n#     await do =>\n#       cfg =\n#         message:    \"Pick a project type.\"\n#         options: [\n#           { value: 'ts',      label: 'TypeScript' },\n#           { value: 'js',      label: 'JavaScript' },\n#           { value: 'coffee',  label: 'CoffeeScript', hint: 'yes!' }, ]\n#       project_type = await CLK.select cfg\n#       info \"Ω___3 project type: #{rpr project_type}\"\n#       return null\n#     await do =>\n#       spinner = CLK.spinner()\n#       spinner.start \"asking questions\"\n#       cfg =\n#         message:    \"Select additional tools.\"\n#         options: [\n#           { value: 'eslint', label: 'ESLint', hint: 'recommended' },\n#           { value: 'prettier', label: 'Prettier' },\n#           { value: 'gh-action', label: 'GitHub Action' }, ]\n#         required: false\n#       tools = await CLK.multiselect cfg\n#       info \"Ω___4 tools: #{rpr tools}\"\n#       spinner.stop \"thanks!\"\n#       return null\n#     return null\n# # clack = new Clack()\n\n###\n\nErrors entail failures\n\n\n###\n\n#===========================================================================================================\n### TAINT Later to be extended so we pass in parameters, not messages ###\nclass Dialog_error              extends Error\nclass Interactive_dialog_error  extends Dialog_error\nclass Programmatic_dialog_error extends Dialog_error\nclass Internal_error            extends Programmatic_dialog_error\nclass Overrun_error             extends Programmatic_dialog_error\n\n\n#===========================================================================================================\n### TAINT Later to be extended so we pass in parameters, not messages ###\nclass Dialog_failure\n  constructor: ( @message ) -> undefined\n\nclass Misstep_failure   extends Dialog_failure\nclass Underrun_failure  extends Dialog_failure\nclass Overrun_failure   extends Dialog_failure\nclass Internal_failure  extends Dialog_failure\n\n\n#===========================================================================================================\nclass Interactive_dialog\n\n  #---------------------------------------------------------------------------------------------------------\n  ctrlc: ( value ) ->\n    # debug 'Ω___5', rpr value\n    if CLK.isCancel value\n      CLK.cancel \"Operation cancelled.\"\n      @process_exit 0\n    return value\n\n  #---------------------------------------------------------------------------------------------------------\n  intro:    ( cfg ) -> @ctrlc await CLK.intro cfg\n  outro:    ( cfg ) -> @ctrlc await CLK.outro cfg\n  confirm:  ( cfg ) -> @ctrlc await CLK.confirm cfg\n  finish:           -> null\n\n  #---------------------------------------------------------------------------------------------------------\n  process_exit: ( code = 0 ) -> process.exit code\n\n\n#===========================================================================================================\nclass Programmatic_dialog\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( steps ) ->\n    @_exp_steps = steps\n    @_pc        = -1\n    @_act_steps = []\n    #.......................................................................................................\n    GUY.props.def @, '_failures',\n      enumerable:   false\n      configurable: false\n      get:          -> ( d for d in @_act_steps when d instanceof Dialog_failure )\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _next: ->\n    @_pc++\n    unless ( R = @_exp_steps[ @_pc ] ? null )?\n      message = \"emergency halt, running too long: act #{@_act_steps.length + 1} exp #{@_exp_steps.length}\"\n      @_fail new Overrun_failure message\n      throw new Overrun_error message\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _fail: ( failure ) ->\n    @_act_steps.push  failure\n    @_failures.push   failure\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _step: ( act_key ) ->\n    [ exp_key, value, ] = @_next()\n    if act_key is exp_key\n      @_act_steps.push act_key\n    else\n      @_act_steps.push new Misstep_failure \"step##{@_pc}: act #{rpr act_key}, exp #{rpr exp_key}\"\n    return value\n\n  #---------------------------------------------------------------------------------------------------------\n  _is_finished: -> @_act_steps.length is @_exp_steps.length\n  _is_underrun: -> @_act_steps.length < @_exp_steps.length\n  _is_overrun:  -> @_act_steps.length > @_exp_steps.length\n\n  #---------------------------------------------------------------------------------------------------------\n  finish: ( P... ) ->\n    #### `dlg.finish()` should be called after the simulated dialog has ben run to issue an  ####\n    return true if @_is_finished() or @_is_overrun()\n    # unless @_is_underrun()\n    #   message = \"should have recognized overrun\"\n    #   @_fail new Internal_failure message\n    #   throw new Internal_error message\n    @_fail new Underrun_failure \"finished too early: act #{@_act_steps.length} exp #{@_exp_steps.length}\"\n    return false\n\n  #---------------------------------------------------------------------------------------------------------\n  intro:    ( P... ) -> @_step 'intro'\n  outro:    ( P... ) -> @_step 'outro'\n  confirm:  ( P... ) -> @_step 'confirm'\n\n  #---------------------------------------------------------------------------------------------------------\n  process_exit: ( code ) ->\n    # not really exiting the process\n    return code\n\n\n#===========================================================================================================\nsample_dialog = ( dlg = null ) ->\n  dlg  ?= new Interactive_dialog()\n  R     = {}\n  #.........................................................................................................\n  dlg.intro \"create-my-app\"\n  loop\n    if await dlg.confirm { message: \"do you want to loop?\", }\n      continue\n    break\n  dlg.outro \"You're all set!\"\n  #.........................................................................................................\n  return R\n\n#===========================================================================================================\ndemo_run_interactive = ->\n  await sample_dialog() # or `sample_dialog new Interactive_dialog()`\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_run_programmatic = ->\n  steps = [\n    [ 'intro', ]\n    [ 'confirm',  false, ]\n    # [ 'confirm',  true, ]\n    [ 'outro', ]\n    [ 'outro', ]\n    ]\n  dlg = new Programmatic_dialog steps\n  try\n    await sample_dialog dlg\n  catch error\n    throw error unless error instanceof Programmatic_dialog_error\n    warn 'Ω___7', reverse bold error.message\n  dlg.finish()\n  warn 'Ω___9', dlg._failures\n  help 'Ω__10', dlg._act_steps\n  return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # await demo_run_interactive()\n  await demo_run_programmatic()\n  return null\n\n"
  ]
}