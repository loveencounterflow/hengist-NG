{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-implementation-variants.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ red\n  gold\n  bold\n  white\n  reverse               } = GUY.trm\n\n\n#===========================================================================================================\ndemo_isa_with_reason = ->\n  NFA = require '../../../apps/normalize-function-arguments'\n  { nfa\n    internals } = NFA\n  { gnd       } = internals\n  em = ( P... ) -> GUY.trm.reverse GUY.trm.gold GUY.trm.bold '', P..., ''\n  att = ( P... ) -> GUY.trm.reverse GUY.trm.red GUY.trm.bold '', P..., ''\n  #.........................................................................................................\n  float           = isa: ( x, nope = -> false ) ->\n    return nope \"Number.isFinite x\"         unless Number.isFinite x\n    return true\n  text            = isa: ( x, nope = -> false ) ->\n    return nope \"( typeof x ) is 'string'\"  unless ( typeof x ) is 'string'\n    return true\n  nonempty_text   = isa: ( x, nope = -> false ) ->\n    return nope \"text.isa x\"                unless text.isa x, nope\n    return nope \"x.length > 0\"              unless x.length > 0\n    return true\n  #.........................................................................................................\n  quantity = isa: ( x, nope = -> false ) ->\n    return nope \"gnd.pod.isa       x  \" unless gnd.pod.isa       x,    nope\n    return nope \"float.isa         x.q\" unless float.isa         x.q,  nope\n    return nope \"nonempty_text.isa x.u\" unless nonempty_text.isa x.u,  nope\n    return true\n  #.........................................................................................................\n  nonempty_text_2 = isa:\n    text_isa_x:           ( x ) -> text.isa x, nope\n    x_length_gt_0:        ( x ) -> x.length > 0\n  #.........................................................................................................\n  quantity_2 = isa:\n    gnd_pod_isa_x:            ( x ) -> gnd.pod.isa         x\n    float_isa_x_q:            ( x ) -> float.isa           x.q\n    nonempty_text_2_isa_x_u:  ( x ) -> nonempty_text_2.isa x.u\n  #.........................................................................................................\n  info 'Ωnfat__94', quantity_2.isa.gnd_pod_isa_x.toString()\n  info 'Ωnfat__95', quantity_2.isa.float_isa_x_q.toString()\n  info 'Ωnfat__96', quantity_2.isa.nonempty_text_2_isa_x_u.toString()\n  quantity_2.isa = do ( isas = quantity_2.isa ) =>\n    return ( x ) ->\n      for key, isa of isas\n        return nope key unless isa x\n      return true\n  #.........................................................................................................\n  nonempty_text_2.isa = do ( isas = nonempty_text_2.isa ) =>\n    return ( x ) ->\n      for key, isa of isas\n        return nope key unless isa x\n      return true\n  #.........................................................................................................\n  messages = []\n  nope = ( message ) -> false                         # discarding messages\n  nope = ( message ) -> messages.push message; false  # collecting messages\n  get_messages = -> R = ( ( \"#{att 'not'}#{em m}\" for m in messages ).join reverse ' ▶ ' ).replace /\\s+/g, ' '; messages = []; R\n  info 'Ωnfat__97', ( quantity.isa {},                nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat__98', ( text.isa     null,              nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat__99', ( quantity.isa { q: 8.1, },       nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat_100', ( quantity.isa { q: 8.1, u: '' }, nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat_101', ( quantity.isa { q: 8.1, u: 0  }, nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat_102', ( quantity_2.isa { q: 8.1, u: 0  }  ), ( att \"failed\" ), em get_messages()\n  return null\n\n#===========================================================================================================\ndemo_types_as_functions = ->\n  ###\n\n  * a 'type' is a / is implemented as a function that accepts one argument `x` and returns `undefined`,\n    `null` or `true` if `x` is considered to be an element of the type / a value conforming to the type;\n    otherwise, it must return a string that identifies the test that `x` did not pass; so for example,\n    a type `empty` described as the set of all values that have a property `x.length` whose value is `0`:\n\n    empty = ( x ) -> return \"x.length is 0\" unless x? and ( x.length is 0 )\n\n  ###\n  isa = ( expectation = undefined ) -> return ( not expectation? ) or ( expectation is true )\n  ts =\n    # text: ( x ) -> if ( typeof x ) is 'string' then true else \"( typeof x ) is 'string'\"\n    text: ( x ) -> return \"( typeof x ) is 'string'\" unless ( typeof x ) is 'string'\n  debug 'Ωnfat_103', ( rpr ts.text '' ), ( isa ts.text '' )\n  debug 'Ωnfat_104', ( rpr ts.text 34 ), ( isa ts.text 34 )\n  return null\n\n#===========================================================================================================\ndemo_parse_return_value = ->\n  NFA = require '../../../apps/normalize-function-arguments'\n  { nfa\n    internals } = NFA\n  { gnd\n    nameit    } = internals\n  #.........................................................................................................\n  em = ( P... ) -> reverse red bold '', P..., ''\n  class Unparsable_function_body extends Error\n  #.........................................................................................................\n  get_return_value_source = ( fn ) ->\n    ### TAINT use JS tokenizer ###\n    ### NOTE restrictions:\n    * catches only last `return` statement, even if unreachable\n    * may misinterpret string literals, comments as source code\n    ###\n    source = fn.toString().replace /// \\s+ ///gsv, '\\x20'\n    unless ( match = source.match ///^ .* \\b return \\s (?<revalex> [^ ; ]+ ) .* $///sv )?\n      throw new Unparsable_function_body \"Ωnfat_105 unable to parse function #{rpr source}\"\n    R = match.groups.revalex\n    return R\n  #.........................................................................................................\n  normalize_revalex = ( fn ) ->\n    ### NOTE `revalex` short for '**RE**turn **VA**Lue **EX**pression' ###\n    ### TAINT use JS tokenizer ###\n    R = get_return_value_source fn\n    R = R.replace ///  !==     ///gsv, 'isnt'\n    R = R.replace ///  &&      ///gsv, 'and'\n    R = R.replace ///  \\|\\|    ///gsv, 'or'\n    R = R.replace ///  !       ///gsv, 'not'\n    return R\n  #.........................................................................................................\n  name_from_fn_revalex = ( fn ) -> name_from_revalex normalize_revalex fn\n  name_from_revalex = ( revalex ) ->\n    R = revalex.replace /// [^ a-z A-Z 0-9 _ ]+         ///gsv, '_'\n    R = R.replace       ///^ _* (?<center> .*? ) _* $   ///gsv, '$<center>'\n    return R\n  #.........................................................................................................\n  probes = [\n    ( x ) -> ( gnd.text.isa x ) and ( x.length isnt 0 )\n    ( x ) => ( gnd.text.isa x ) and ( x.length isnt 0 )\n    ( x ) -> true\n    ( x ) => true\n    ( x ) =>\n      return false unless gnd.isa.float x\n      return false unless 0 < x < 1\n      return true\n    ( x ) ->\n      return gnd.isa.float x\n      # return false unless 0 < x < 1\n      return gnd.isa.text x\n    ( x ) ->\n      return gnd.isa.float x\n      ### return false unless 0 < x < 1 ###\n    ]\n  #.........................................................................................................\n  for fn in probes\n    whisper 'Ωnfat_106', reverse bold white rpr fn.toString().replace /\\s+/gsv, '\\x20'\n    try urge 'Ωnfat_107', rpr get_return_value_source   fn catch e then warn 'Ωnfat_108', em e.message\n    try info 'Ωnfat_109', rpr normalize_revalex         fn catch e then warn 'Ωnfat_110', em e.message\n    try help 'Ωnfat_111', rpr name_from_fn_revalex      fn catch e then warn 'Ωnfat_112', em e.message\n  #.........................................................................................................\n  RVX = Symbol 'RVX'\n  # rvx = ( fn ) -> fn[RVX] = normalize_revalex fn; ( nameit ( name_from_fn_revalex fn ), fn ); fn\n  rvx = ( fn ) -> fn[RVX] = normalize_revalex fn; fn\n  ts =\n    id:\n      isa: rvx ( x ) -> ( text.isa x ) and ( /^[a-b]+$/.test x )\n  for typename, dcl of ts\n    nameit \"isa_#{typename}\", dcl.isa\n  urge 'Ωnfat_113', rpr ts\n  urge 'Ωnfat_114', rpr ts.id\n  urge 'Ωnfat_115', rpr ts.id.isa[RVX]\n  urge 'Ωnfat_116', rpr ts.id.isa.name\n  #.........................................................................................................\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: true,   show_passes: true,  report_checks: false, }\n  # guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test @nfa_tasks\n  # ( new Test guytest_cfg ).test { push_pop_set_at: @nfa_tasks.internals.push_pop_set_at }\n  demo_isa_with_reason()\n  demo_types_as_functions()\n  demo_parse_return_value()\n  return null"
  ]
}