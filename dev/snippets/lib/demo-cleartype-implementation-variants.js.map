{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-cleartype-implementation-variants.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n{ red\n  gold\n  bold\n  white\n  reverse               } = GUY.trm\n\n\n#===========================================================================================================\ndemo_isa_with_reason = ->\n  whisper '—'.repeat 108\n  NFA = require '../../../apps/normalize-function-arguments'\n  { nfa\n    internals } = NFA\n  { gnd       } = internals\n  em = ( P... ) -> GUY.trm.reverse GUY.trm.gold GUY.trm.bold '', P..., ''\n  att = ( P... ) -> GUY.trm.reverse GUY.trm.red GUY.trm.bold '', P..., ''\n  #.........................................................................................................\n  float           = isa: ( x, nope = -> false ) ->\n    return nope \"Number.isFinite x\"         unless Number.isFinite x\n    return true\n  text            = isa: ( x, nope = -> false ) ->\n    return nope \"( typeof x ) is 'string'\"  unless ( typeof x ) is 'string'\n    return true\n  nonempty_text   = isa: ( x, nope = -> false ) ->\n    return nope \"text.isa x\"                unless text.isa x, nope\n    return nope \"x.length > 0\"              unless x.length > 0\n    return true\n  #.........................................................................................................\n  quantity = isa: ( x, nope = -> false ) ->\n    return nope \"gnd.pod.isa       x  \" unless gnd.pod.isa       x,    nope\n    return nope \"float.isa         x.q\" unless float.isa         x.q,  nope\n    return nope \"nonempty_text.isa x.u\" unless nonempty_text.isa x.u,  nope\n    return true\n  #.........................................................................................................\n  nonempty_text_2 = isa:\n    text_isa_x:           ( x ) -> text.isa x, nope\n    x_length_gt_0:        ( x ) -> x.length > 0\n  #.........................................................................................................\n  quantity_2 = isa:\n    gnd_pod_isa_x:            ( x ) -> gnd.pod.isa         x\n    float_isa_x_q:            ( x ) -> float.isa           x.q\n    nonempty_text_2_isa_x_u:  ( x ) -> nonempty_text_2.isa x.u\n  #.........................................................................................................\n  info 'Ωnfat___1', quantity_2.isa.gnd_pod_isa_x.toString()\n  info 'Ωnfat___2', quantity_2.isa.float_isa_x_q.toString()\n  info 'Ωnfat___3', quantity_2.isa.nonempty_text_2_isa_x_u.toString()\n  quantity_2.isa = do ( isas = quantity_2.isa ) =>\n    return ( x ) ->\n      for key, isa of isas\n        return nope key unless isa x\n      return true\n  #.........................................................................................................\n  nonempty_text_2.isa = do ( isas = nonempty_text_2.isa ) =>\n    return ( x ) ->\n      for key, isa of isas\n        return nope key unless isa x\n      return true\n  #.........................................................................................................\n  messages = []\n  nope = ( message ) -> false                         # discarding messages\n  nope = ( message ) -> messages.push message; false  # collecting messages\n  get_messages = -> R = ( ( \"#{att 'not'}#{em m}\" for m in messages ).join reverse ' ▶ ' ).replace /\\s+/g, ' '; messages = []; R\n  info 'Ωnfat___4', ( quantity.isa {},                nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat___5', ( text.isa     null,              nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat___6', ( quantity.isa { q: 8.1, },       nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat___7', ( quantity.isa { q: 8.1, u: '' }, nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat___8', ( quantity.isa { q: 8.1, u: 0  }, nope  ), ( att \"failed\" ), em get_messages()\n  info 'Ωnfat___9', ( quantity_2.isa { q: 8.1, u: 0  }  ), ( att \"failed\" ), em get_messages()\n  return null\n\n#===========================================================================================================\ndemo_types_as_functions = ->\n  whisper '—'.repeat 108\n  ###\n\n  * a 'type' is a / is implemented as a function that accepts one argument `x` and returns `undefined`,\n    `null` or `true` if `x` is considered to be an element of the type / a value conforming to the type;\n    otherwise, it must return a string that identifies the test that `x` did not pass; so for example,\n    a type `empty` described as the set of all values that have a property `x.length` whose value is `0`:\n\n    empty = ( x ) -> return \"x.length is 0\" unless x? and ( x.length is 0 )\n\n  ###\n  isa = ( expectation = undefined ) -> return ( not expectation? ) or ( expectation is true )\n  ts =\n    # text: ( x ) -> if ( typeof x ) is 'string' then true else \"( typeof x ) is 'string'\"\n    text: ( x ) -> return \"( typeof x ) is 'string'\" unless ( typeof x ) is 'string'\n  debug 'Ωnfat__10', ( rpr ts.text '' ), ( isa ts.text '' )\n  debug 'Ωnfat__11', ( rpr ts.text 34 ), ( isa ts.text 34 )\n  return null\n\n#===========================================================================================================\ndemo_parse_return_value = ->\n  whisper '—'.repeat 108\n  NFA = require '../../../apps/normalize-function-arguments'\n  { nfa\n    internals } = NFA\n  { gnd\n    nameit    } = internals\n  #.........................................................................................................\n  em = ( P... ) -> reverse red bold '', P..., ''\n  class Unparsable_function_body extends Error\n  #.........................................................................................................\n  get_return_value_source = ( fn ) ->\n    ### TAINT use JS tokenizer ###\n    ### NOTE restrictions:\n    * catches only last `return` statement, even if unreachable\n    * may misinterpret string literals, comments as source code\n    ###\n    source = fn.toString().replace /// \\s+ ///gsv, '\\x20'\n    unless ( match = source.match ///^ .* \\b return \\s (?<revalex> [^ ; ]+ ) .* $///sv )?\n      throw new Unparsable_function_body \"Ωnfat__12 unable to parse function #{rpr source}\"\n    R = match.groups.revalex\n    return R\n  #.........................................................................................................\n  normalize_revalex = ( fn ) ->\n    ### NOTE `revalex` short for '**RE**turn **VA**Lue **EX**pression' ###\n    ### TAINT use JS tokenizer ###\n    R = get_return_value_source fn\n    R = R.replace ///  !==     ///gsv, 'isnt'\n    R = R.replace ///  &&      ///gsv, 'and'\n    R = R.replace ///  \\|\\|    ///gsv, 'or'\n    R = R.replace ///  !       ///gsv, 'not'\n    return R\n  #.........................................................................................................\n  name_from_fn_revalex = ( fn ) -> name_from_revalex normalize_revalex fn\n  name_from_revalex = ( revalex ) ->\n    R = revalex.replace /// [^ a-z A-Z 0-9 _ ]+         ///gsv, '_'\n    R = R.replace       ///^ _* (?<center> .*? ) _* $   ///gsv, '$<center>'\n    return R\n  #.........................................................................................................\n  if false then do ->\n    probes = [\n      ( x ) -> ( gnd.text.isa x ) and ( x.length isnt 0 )\n      ( x ) => ( gnd.text.isa x ) and ( x.length isnt 0 )\n      ( x ) -> true\n      ( x ) => true\n      ( x ) =>\n        return false unless gnd.isa.float x\n        return false unless 0 < x < 1\n        return true\n      ( x ) ->\n        return gnd.isa.float x\n        # return false unless 0 < x < 1\n        return gnd.isa.text x\n      ( x ) ->\n        return gnd.isa.float x\n        ### return false unless 0 < x < 1 ###\n      ]\n    #.........................................................................................................\n    for fn in probes\n      whisper 'Ωnfat__13', reverse bold white rpr fn.toString().replace /\\s+/gsv, '\\x20'\n      try urge 'Ωnfat__14', rpr get_return_value_source   fn catch e then warn 'Ωnfat__15', em e.message\n      try info 'Ωnfat__16', rpr normalize_revalex         fn catch e then warn 'Ωnfat__17', em e.message\n      try help 'Ωnfat__18', rpr name_from_fn_revalex      fn catch e then warn 'Ωnfat__19', em e.message\n  #.........................................................................................................\n  if false then do ->\n    RVX = Symbol 'RVX'\n    # rvx = ( fn ) -> fn[RVX] = normalize_revalex fn; ( nameit ( name_from_fn_revalex fn ), fn ); fn\n    rvx = ( fn ) -> fn[RVX] = normalize_revalex fn; fn\n    ts =\n      id:\n        isa: rvx ( x ) -> ( text.isa x ) and ( /^[a-b]+$/.test x )\n    for typename, dcl of ts\n      nameit \"isa_#{typename}\", dcl.isa\n    urge 'Ωnfat__20', rpr ts\n    urge 'Ωnfat__21', rpr ts.id\n    urge 'Ωnfat__22', rpr ts.id.isa[RVX]\n    urge 'Ωnfat__23', rpr ts.id.isa.name\n    return null\n  #.........................................................................................................\n  do ->\n    debug 'Ωnfat__24', \"turning lists of functions into objects with sensible names\"\n    RVX = Symbol.for 'RVX'\n    rvx = ( fn ) -> normalize_revalex fn\n    gnd.text      ?= isa: ( x ) -> ( typeof x ) is 'string'\n    gnd.function  ?= isa: ( x ) -> ( typeof x ) is 'function'\n    #.......................................................................................................\n    ts =\n      text: ( x ) -> ( typeof x ) is 'string'\n      id:\n        isa: [\n          'text'\n          ( x ) -> ( /^[a-z][a-z0-9]*$/.test x )\n          ]\n    #.......................................................................................................\n    compile_typespace = ( ts ) ->\n      for typename, dcl of ts\n        ### Convert 'isa-only' declarations into objects with explicit `isa`: ###\n        dcl         = ( do ( isa = dcl ) -> { isa, } ) unless gnd.pod.isa dcl\n        dcl_isa     = dcl.isa\n        ### Convert singular `isa` declarations into list of clauses: ###\n        dcl_isa     = ( do ( isa = dcl_isa ) -> [ isa, ] ) unless Array.isArray dcl_isa\n        isa_clauses = {}\n        #...................................................................................................\n        debug 'Ωnfat__25', 'dcl_isa', rpr dcl_isa\n        for dcl_isa_clause in dcl_isa\n          #.................................................................................................\n          ### De-reference referenced type: ###\n          if ( gnd.text.isa dcl_isa_clause )\n            dcl_isa_clause = do ( ref_typename = dcl_isa_clause ) ->\n              unless Reflect.has ts, ref_typename\n                throw new Error \"Ωnfat__26 unable to resolve #{rpr ref_typename} referenced by #{rpr typename}\"\n              return ts[ ref_typename ].isa\n          #.................................................................................................\n          unless gnd.function.isa dcl_isa_clause\n            throw new Error \"Ωnfat__27 expected a function, got #{rpr dcl_isa_clause}\"\n          #.................................................................................................\n          revalex             = normalize_revalex dcl_isa_clause\n          # dcl_isa_clause[RVX] = revalex\n          test_name           = \"#{typename}[#{rpr revalex}]\"\n          nameit test_name, dcl_isa_clause if dcl_isa_clause.name is ''\n          isa_clauses[ test_name ] = dcl_isa_clause\n        #...................................................................................................\n        ts[ typename ].isa = do ( typename, isa_clauses ) -> ( x, record = null ) ->\n          for name, isa_clause of isa_clauses\n            unless isa_clause.call null, x, record\n              record name if record?\n              return false\n          return true\n    #.......................................................................................................\n    compile_typespace ts\n    for typename, dcl of ts\n      info 'Ωnfat__29', typename, dcl.isa\n      # for name, dcl_isa_clause of isa_clauses\n      #   help 'Ωnfat__30', f\"#{rpr name}:<30c; | #{dcl_isa_clause}\"\n    #.......................................................................................................\n    info 'Ωnfat__31', ts.id.isa 'abc'\n    info 'Ωnfat__32', ts.id.isa '123'\n    info 'Ωnfat__33', ts.id.isa 'abc123'\n    failed_tests = []\n    record = ( name ) -> failed_tests.push name\n    info 'Ωnfat__34', ts.id.isa 'abc',    record; urge 'Ωnfat__35', failed_tests; failed_tests.length = 0\n    info 'Ωnfat__36', ts.id.isa '123',    record; urge 'Ωnfat__37', failed_tests; failed_tests.length = 0\n    info 'Ωnfat__38', ts.id.isa 123,      record; urge 'Ωnfat__39', failed_tests; failed_tests.length = 0\n    info 'Ωnfat__40', ts.id.isa 'abc123', record; urge 'Ωnfat__41', failed_tests; failed_tests.length = 0\n    return null\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\ndemo_set_prototype_to_obtain_callable_class_instances = ->\n  whisper '—'.repeat 108\n  do ->\n    class E\n      constructor: ->\n        @eps = 'E::eps'\n      blah: -> 'E::blah'\n\n    class F extends E\n      constructor: ->\n        super()\n        @foo = 'F::foo'\n      blah: -> 'F::blah'\n\n    f = new F()\n    debug 'Ωnfat__42', f\n    debug 'Ωnfat__43', f.constructor is F\n    # debug 'Ωnfat__44', f::\n    debug 'Ωnfat__45', f.__proto__ instanceof E\n    debug 'Ωnfat__46', ( Object.getPrototypeOf f ) instanceof E\n    debug 'Ωnfat__47'\n    my_callable = -> 'D'\n    # my_callable.__proto__ = new F()\n    Object.setPrototypeOf my_callable, new F()\n    debug 'Ωnfat__48', 'rpr my_callable                         ', rpr my_callable\n    debug 'Ωnfat__49', 'rpr my_callable.prototype               ', rpr my_callable.prototype\n    debug 'Ωnfat__50', 'rpr my_callable::                       ', rpr my_callable::\n    debug 'Ωnfat__51', 'rpr Object.getPrototypeOf my_callable   ', rpr Object.getPrototypeOf my_callable\n    debug 'Ωnfat__52', 'rpr my_callable instanceof F            ', rpr my_callable instanceof F\n    debug 'Ωnfat__53', 'rpr my_callable instanceof E            ', rpr my_callable instanceof E\n    debug 'Ωnfat__54', 'rpr my_callable.foo                     ', rpr my_callable.foo\n    debug 'Ωnfat__55', 'rpr my_callable()                       ', rpr my_callable()\n    debug 'Ωnfat__56', 'rpr my_callable.constructor             ', rpr my_callable.constructor\n    debug 'Ωnfat__57', 'rpr my_callable.constructor.name        ', rpr my_callable.constructor.name\n    return null\n  #.........................................................................................................\n  whisper '—'.repeat 108\n  do ->\n    #.......................................................................................................\n    class E\n      constructor: ( callable ) ->\n        Object.setPrototypeOf callable, @\n        @eps = 'E::eps'\n        return callable\n      blah: -> 'E::blah'\n    #.......................................................................................................\n    class F extends E\n      constructor: ( callable ) ->\n        super callable\n        @foo = 'F::foo'\n        return callable\n      blah: -> 'F::blah'\n    #.......................................................................................................\n    my_callable = new F ( Desire = -> \"an function named Desire\" )\n    debug 'Ωnfat__58', 'rpr my_callable                         ', rpr my_callable\n    debug 'Ωnfat__59', 'rpr my_callable.prototype               ', rpr my_callable.prototype\n    debug 'Ωnfat__60', 'rpr my_callable::                       ', rpr my_callable::\n    debug 'Ωnfat__61', 'rpr Object.getPrototypeOf my_callable   ', rpr Object.getPrototypeOf my_callable\n    debug 'Ωnfat__62', 'rpr my_callable instanceof F            ', rpr my_callable instanceof F\n    debug 'Ωnfat__63', 'rpr my_callable instanceof E            ', rpr my_callable instanceof E\n    debug 'Ωnfat__64', 'rpr my_callable.foo                     ', rpr my_callable.foo\n    debug 'Ωnfat__65', 'rpr my_callable.eps                     ', rpr my_callable.eps\n    debug 'Ωnfat__66', 'rpr my_callable()                       ', rpr my_callable()\n    debug 'Ωnfat__67', 'rpr my_callable.blah()                  ', rpr my_callable.blah()\n    debug 'Ωnfat__68', 'rpr my_callable.constructor             ', rpr my_callable.constructor\n    debug 'Ωnfat__69', 'rpr my_callable.constructor.name        ', rpr my_callable.constructor.name\n    return null\n  return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # guytest_cfg = { throw_on_error: true,   show_passes: true,  report_checks: false, }\n  # # guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  # ( new Test guytest_cfg ).test @nfa_tasks\n  # # ( new Test guytest_cfg ).test { push_pop_set_at: @nfa_tasks.internals.push_pop_set_at }\n  demo_isa_with_reason()\n  demo_types_as_functions()\n  demo_parse_return_value()\n  # demo_set_prototype_to_obtain_callable_class_instances()\n"
  ]
}