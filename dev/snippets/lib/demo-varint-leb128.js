(async function() {
  'use strict';
  var GUY, SFMODULES, alert, blue, bold, debug, demo_big_leb128, demo_big_varint, demo_varint, echo, f, gold, green, grey, help, hex_from_typed_array, hide, info, inspect, lime, log, plain, praise, red, reverse, rpr, set_getter, timeit, urge, warn, whisper, white;

  //===========================================================================================================
  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('demo-build-unicode-ranges'));

  ({rpr, inspect, echo, white, green, lime, blue, gold, grey, red, bold, reverse, log} = GUY.trm);

  ({f} = require('../../../apps/effstring'));

  // write                     = ( p ) -> process.stdout.write p
  // { nfa }                   = require '../../../apps/normalize-function-arguments'
  // GTNG                      = require '../../../apps/guy-test-NG'
  // { Test                  } = GTNG
  // mkdirp                    = require 'mkdirp'
  // env_paths                 = ( require 'env-paths' ).default 'demo-node-sqlite'
  // SQLITE                    = require 'node:sqlite'
  // PATH                      = require 'node:path'
  // { SQL }                   = require '../../../apps/dbay'
  // { default: \
  //   on_process_exit,      } = require 'exit-hook'
  // FS                        = require 'node:fs'
  SFMODULES = require('../../../apps/bricabrac-single-file-modules');

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({timeit} = SFMODULES.unstable.require_benchmarking());

  //===========================================================================================================
  hex_from_typed_array = function(array, joiner = '', zero = '_') {
    var R;
    R = (Array.from(array, (byte) => {
      return (byte.toString(16)).padStart(2, '0');
    })).join(joiner);
    return R.replace(/0/gv, zero);
  };

  //===========================================================================================================
  demo_varint = function() {
    var bytes, i, len, n, offset, ref, varint, vdx;
    varint = require('varint');
    debug('Ωvi___1', bytes = varint.encode(300)); // === [0xAC, 0x02]
    debug('Ωvi___2', varint.decode(bytes)); // 300
    debug('Ωvi___3', varint.decode.bytes); // 2 (the last decode() call required 2 bytes)
    debug('Ωvi___4', varint.decode([...(varint.encode(5)), ...(varint.encode(6))]));
    debug('Ωvi___5', varint.encodingLength(1e10));
    debug('Ωvi___6', varint.encodingLength(Number.MAX_SAFE_INTEGER));
    // for n in [ 0 ... 200 ]
    //   info 'Ωvi___7', n, bytes = varint.encode n
    debug('Ωvi___8', Buffer.from(varint.encode(123456)));
    vdx = new Uint8Array(16);
    offset = 0;
    ref = [1, 3, 5, 7, 9];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      n *= 1000;
      vdx.set((bytes = varint.encode(n)), offset);
      whisper('Ωvi___9', bytes, varint.encode.bytes);
      offset += varint.encode.bytes;
    }
    help('Ωvi__10', hex_from_typed_array(vdx, '.'));
    return null;
  };

  //===========================================================================================================
  demo_big_varint = function() {
    var decode, encode, i, j, len, len1, n, number, numbers, varint, varints;
    ({encode, decode} = (require('big-varint')).signed);
    debug('Ωvi__11', hex_from_typed_array(encode(123n)));
    debug('Ωvi__12', hex_from_typed_array(encode(123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123n)));
    numbers = [-3, -2, -1, 0, 1, 2, 3];
    varints = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = numbers.length; i < len; i++) {
        n = numbers[i];
        results.push(encode(BigInt(n)));
      }
      return results;
    })();
    help('Ωvi__13', varints);
    varints.sort(function(a, b) {
      if (a[0] > b[0]) {
        return +1;
      }
      if (a[0] < b[0]) {
        return -1;
      }
      return 0;
    });
    for (i = 0, len = varints.length; i < len; i++) {
      varint = varints[i];
      help('Ωvi__14', decode(varint));
    }
    numbers.sort(function(a, b) {
      if (a > b) {
        return +1;
      }
      if (a < b) {
        return -1;
      }
      return 0;
    });
    for (j = 0, len1 = numbers.length; j < len1; j++) {
      number = numbers[j];
      urge('Ωvi__15', number);
    }
    return null;
  };

  
// thx to https://en.wikipedia.org/wiki/LEB128
const encodeSignedLeb128FromBigInt = (value) => {
  value = BigInt(value);
  const result = [];
  while (true) {
    const byte_ = Number(value & 0x7fn);
    value >>= 7n;
    if (
      (value === 0n && (byte_ & 0x40) === 0) ||
      (value === -1n && (byte_ & 0x40) !== 0)
    ) {
      result.push(byte_);
      return result;
    }
    result.push(byte_ | 0x80);
  }
};
const decodeSignedBigInt = (input) => {
  let result = 0n;
  let shift = 0;
  while (true) {
    const byte = input.shift();
    result |= BigInt((byte & 0x7f) << shift);
    shift += 7;
    if ((byte & 0x80) === 0) {
      // "sign-extending" does not apply to bigint because it has no fixed size
      // instead, we work by handling it as a two's complement of "shift" bits long,
      // which is provided by BigInt.asIntN
      return BigInt.asIntN(shift, result);
    }
  }
};

;

  //===========================================================================================================
  demo_big_leb128 = function() {
    var decode, encode, i, j, len, len1, n, number, numbers, varint, varints;
    encode = encodeSignedLeb128FromBigInt;
    decode = decodeSignedBigInt;
    info('Ωvi__16', '-123n', encode(-123n));
    info('Ωvi__17', '-1n  ', encode(-1n));
    info('Ωvi__18', '1n   ', encode(1n));
    info('Ωvi__19', '123n ', encode(123n));
    debug('Ωvi__20', hex_from_typed_array(encode(123n)));
    debug('Ωvi__21', hex_from_typed_array(encode(123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123_123n)));
    numbers = [...[-3, -2, -1, 0, 1, 2, 3], -127n, 127n];
    varints = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = numbers.length; i < len; i++) {
        n = numbers[i];
        results.push(encode(BigInt(n)));
      }
      return results;
    })();
    help('Ωvi__22', varints);
    varints.sort(function(a, b) {
      if (a[0] > b[0]) {
        return +1;
      }
      if (a[0] < b[0]) {
        return -1;
      }
      return 0;
    });
    for (i = 0, len = varints.length; i < len; i++) {
      varint = varints[i];
      help('Ωvi__23', decode(varint));
    }
    numbers.sort(function(a, b) {
      if (a > b) {
        return +1;
      }
      if (a < b) {
        return -1;
      }
      return 0;
    });
    for (j = 0, len1 = numbers.length; j < len1; j++) {
      number = numbers[j];
      urge('Ωvi__24', number);
    }
    debug('Ωvi__21', numbers);
    return null;
  };

  //===========================================================================================================
  if (module === require.main) {
    await (() => {
      demo_varint();
      demo_big_varint();
      return demo_big_leb128();
    })();
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
