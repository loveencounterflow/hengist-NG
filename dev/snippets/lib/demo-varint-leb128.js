(function() {
  'use strict';
  var GUY, SFMODULES, alert, blue, bold, bytes, debug, echo, f, gold, green, grey, help, hex_from_typed_array, hide, i, info, inspect, len, lime, log, n, offset, plain, praise, red, ref, reverse, rpr, set_getter, timeit, urge, varint, vdx, warn, whisper, white;

  //===========================================================================================================
  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('demo-build-unicode-ranges'));

  ({rpr, inspect, echo, white, green, lime, blue, gold, grey, red, bold, reverse, log} = GUY.trm);

  ({f} = require('../../../apps/effstring'));

  // write                     = ( p ) -> process.stdout.write p
  // { nfa }                   = require '../../../apps/normalize-function-arguments'
  // GTNG                      = require '../../../apps/guy-test-NG'
  // { Test                  } = GTNG
  // mkdirp                    = require 'mkdirp'
  // env_paths                 = ( require 'env-paths' ).default 'demo-node-sqlite'
  // SQLITE                    = require 'node:sqlite'
  // PATH                      = require 'node:path'
  // { SQL }                   = require '../../../apps/dbay'
  // { default: \
  //   on_process_exit,      } = require 'exit-hook'
  // FS                        = require 'node:fs'
  SFMODULES = require('../../../apps/bricabrac-single-file-modules');

  ({hide, set_getter} = SFMODULES.require_managed_property_tools());

  ({timeit} = SFMODULES.unstable.require_benchmarking());

  varint = require('varint');

  hex_from_typed_array = function(array, joiner = '', zero = '_') {
    var R;
    R = (Array.from(array, (byte) => {
      return (byte.toString(16)).padStart(2, '0');
    })).join(joiner);
    return R.replace(/0/gv, zero);
  };

  debug('Ωvi___1', bytes = varint.encode(300)); // === [0xAC, 0x02]

  debug('Ωvi___2', varint.decode(bytes)); // 300

  debug('Ωvi___3', varint.decode.bytes); // 2 (the last decode() call required 2 bytes)

  debug('Ωvi___4', varint.decode([...(varint.encode(5)), ...(varint.encode(6))]));

  debug('Ωvi___5', varint.encodingLength(1e10));

  debug('Ωvi___6', varint.encodingLength(Number.MAX_SAFE_INTEGER));

  // for n in [ 0 ... 200 ]
  //   info 'Ωvi___7', n, bytes = varint.encode n
  debug('Ωvi___8', Buffer.from(varint.encode(123456)));

  vdx = new Uint8Array(16);

  offset = 0;

  ref = [1, 3, 5, 7, 9];
  for (i = 0, len = ref.length; i < len; i++) {
    n = ref[i];
    n *= 1000;
    vdx.set((bytes = varint.encode(n)), offset);
    whisper('Ωvi___9', bytes, varint.encode.bytes);
    offset += varint.encode.bytes;
  }

  help('Ωvi__10', hex_from_typed_array(vdx, '.'));

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlbW8tdmFyaW50LWxlYjEyOC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7RUFBQTtBQUFBLE1BQUEsR0FBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLG9CQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsVUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUE7OztFQUdBLEdBQUEsR0FBNEIsT0FBQSxDQUFRLEtBQVI7O0VBQzVCLENBQUEsQ0FBRSxLQUFGLEVBQ0UsS0FERixFQUVFLElBRkYsRUFHRSxJQUhGLEVBSUUsS0FKRixFQUtFLE1BTEYsRUFNRSxJQU5GLEVBT0UsSUFQRixFQVFFLE9BUkYsQ0FBQSxHQVE0QixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVIsQ0FBb0IsMkJBQXBCLENBUjVCOztFQVNBLENBQUEsQ0FBRSxHQUFGLEVBQ0UsT0FERixFQUVFLElBRkYsRUFHRSxLQUhGLEVBSUUsS0FKRixFQUtFLElBTEYsRUFNRSxJQU5GLEVBT0UsSUFQRixFQVFFLElBUkYsRUFTRSxHQVRGLEVBVUUsSUFWRixFQVdFLE9BWEYsRUFZRSxHQVpGLENBQUEsR0FZNEIsR0FBRyxDQUFDLEdBWmhDOztFQWFBLENBQUEsQ0FBRSxDQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLHlCQUFSLENBQTVCLEVBMUJBOzs7Ozs7Ozs7Ozs7OztFQXVDQSxTQUFBLEdBQTRCLE9BQUEsQ0FBUSw2Q0FBUjs7RUFDNUIsQ0FBQSxDQUFFLElBQUYsRUFDRSxVQURGLENBQUEsR0FDNEIsU0FBUyxDQUFDLDhCQUFWLENBQUEsQ0FENUI7O0VBRUEsQ0FBQSxDQUFFLE1BQUYsQ0FBQSxHQUE0QixTQUFTLENBQUMsUUFBUSxDQUFDLG9CQUFuQixDQUFBLENBQTVCOztFQUNBLE1BQUEsR0FBNEIsT0FBQSxDQUFRLFFBQVI7O0VBRTVCLG9CQUFBLEdBQXVCLFFBQUEsQ0FBRSxLQUFGLEVBQVMsU0FBUyxFQUFsQixFQUFzQixPQUFPLEdBQTdCLENBQUE7QUFDdkIsUUFBQTtJQUFFLENBQUEsR0FBSSxDQUFFLEtBQUssQ0FBQyxJQUFOLENBQVcsS0FBWCxFQUFrQixDQUFFLElBQUYsQ0FBQSxHQUFBO2FBQVksQ0FBRSxJQUFJLENBQUMsUUFBTCxDQUFjLEVBQWQsQ0FBRixDQUFvQixDQUFDLFFBQXJCLENBQThCLENBQTlCLEVBQWlDLEdBQWpDO0lBQVosQ0FBbEIsQ0FBRixDQUFzRSxDQUFDLElBQXZFLENBQTRFLE1BQTVFO0FBQ0osV0FBTyxDQUFDLENBQUMsT0FBRixDQUFVLEtBQVYsRUFBaUIsSUFBakI7RUFGYzs7RUFJdkIsS0FBQSxDQUFNLFNBQU4sRUFBaUIsS0FBQSxHQUFRLE1BQU0sQ0FBQyxNQUFQLENBQWMsR0FBZCxDQUF6QixFQWpEQTs7RUFrREEsS0FBQSxDQUFNLFNBQU4sRUFBaUIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxLQUFkLENBQWpCLEVBbERBOztFQW1EQSxLQUFBLENBQU0sU0FBTixFQUFpQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQS9CLEVBbkRBOztFQW9EQSxLQUFBLENBQU0sU0FBTixFQUFpQixNQUFNLENBQUMsTUFBUCxDQUFjLENBQUUsR0FBQSxDQUFFLE1BQU0sQ0FBQyxNQUFQLENBQWMsQ0FBZCxDQUFGLENBQUYsRUFBMEIsR0FBQSxDQUFFLE1BQU0sQ0FBQyxNQUFQLENBQWMsQ0FBZCxDQUFGLENBQTFCLENBQWQsQ0FBakI7O0VBQ0EsS0FBQSxDQUFNLFNBQU4sRUFBaUIsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBdEIsQ0FBakI7O0VBQ0EsS0FBQSxDQUFNLFNBQU4sRUFBaUIsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsTUFBTSxDQUFDLGdCQUE3QixDQUFqQixFQXREQTs7OztFQTJEQSxLQUFBLENBQU0sU0FBTixFQUFpQixNQUFNLENBQUMsSUFBUCxDQUFZLE1BQU0sQ0FBQyxNQUFQLENBQWMsTUFBZCxDQUFaLENBQWpCOztFQUVBLEdBQUEsR0FBTSxJQUFJLFVBQUosQ0FBZSxFQUFmOztFQUNOLE1BQUEsR0FBUzs7QUFDVDtFQUFBLEtBQUEscUNBQUE7O0lBQ0UsQ0FBQSxJQUFLO0lBQ0wsR0FBRyxDQUFDLEdBQUosQ0FBUSxDQUFFLEtBQUEsR0FBUSxNQUFNLENBQUMsTUFBUCxDQUFjLENBQWQsQ0FBVixDQUFSLEVBQXFDLE1BQXJDO0lBQ0EsT0FBQSxDQUFRLFNBQVIsRUFBbUIsS0FBbkIsRUFBMEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUF4QztJQUNBLE1BQUEsSUFBVSxNQUFNLENBQUMsTUFBTSxDQUFDO0VBSjFCOztFQUtBLElBQUEsQ0FBSyxTQUFMLEVBQWdCLG9CQUFBLENBQXFCLEdBQXJCLEVBQTBCLEdBQTFCLENBQWhCO0FBcEVBIiwic291cmNlc0NvbnRlbnQiOlsiXG5cblxuJ3VzZSBzdHJpY3QnXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuR1VZICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2d1eSdcbnsgYWxlcnRcbiAgZGVidWdcbiAgaGVscFxuICBpbmZvXG4gIHBsYWluXG4gIHByYWlzZVxuICB1cmdlXG4gIHdhcm5cbiAgd2hpc3BlciB9ICAgICAgICAgICAgICAgPSBHVVkudHJtLmdldF9sb2dnZXJzICdkZW1vLWJ1aWxkLXVuaWNvZGUtcmFuZ2VzJ1xueyBycHJcbiAgaW5zcGVjdFxuICBlY2hvXG4gIHdoaXRlXG4gIGdyZWVuXG4gIGxpbWVcbiAgYmx1ZVxuICBnb2xkXG4gIGdyZXlcbiAgcmVkXG4gIGJvbGRcbiAgcmV2ZXJzZVxuICBsb2cgICAgIH0gICAgICAgICAgICAgICA9IEdVWS50cm1cbnsgZiB9ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2VmZnN0cmluZydcbiMgd3JpdGUgICAgICAgICAgICAgICAgICAgICA9ICggcCApIC0+IHByb2Nlc3Muc3Rkb3V0LndyaXRlIHBcbiMgeyBuZmEgfSAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJy4uLy4uLy4uL2FwcHMvbm9ybWFsaXplLWZ1bmN0aW9uLWFyZ3VtZW50cydcbiMgR1RORyAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJy4uLy4uLy4uL2FwcHMvZ3V5LXRlc3QtTkcnXG4jIHsgVGVzdCAgICAgICAgICAgICAgICAgIH0gPSBHVE5HXG4jIG1rZGlycCAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdta2RpcnAnXG4jIGVudl9wYXRocyAgICAgICAgICAgICAgICAgPSAoIHJlcXVpcmUgJ2Vudi1wYXRocycgKS5kZWZhdWx0ICdkZW1vLW5vZGUtc3FsaXRlJ1xuIyBTUUxJVEUgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnbm9kZTpzcWxpdGUnXG4jIFBBVEggICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdub2RlOnBhdGgnXG4jIHsgU1FMIH0gICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2RiYXknXG4jIHsgZGVmYXVsdDogXFxcbiMgICBvbl9wcm9jZXNzX2V4aXQsICAgICAgfSA9IHJlcXVpcmUgJ2V4aXQtaG9vaydcbiMgRlMgICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ25vZGU6ZnMnXG5TRk1PRFVMRVMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9icmljYWJyYWMtc2luZ2xlLWZpbGUtbW9kdWxlcydcbnsgaGlkZSxcbiAgc2V0X2dldHRlciwgICAgICAgICAgIH0gPSBTRk1PRFVMRVMucmVxdWlyZV9tYW5hZ2VkX3Byb3BlcnR5X3Rvb2xzKClcbnsgdGltZWl0LCAgICAgICAgICAgICAgIH0gPSBTRk1PRFVMRVMudW5zdGFibGUucmVxdWlyZV9iZW5jaG1hcmtpbmcoKVxudmFyaW50ICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ3ZhcmludCdcblxuaGV4X2Zyb21fdHlwZWRfYXJyYXkgPSAoIGFycmF5LCBqb2luZXIgPSAnJywgemVybyA9ICdfJyApIC0+XG4gIFIgPSAoIEFycmF5LmZyb20gYXJyYXksICggYnl0ZSApID0+ICggYnl0ZS50b1N0cmluZyAxNiApLnBhZFN0YXJ0IDIsICcwJyApLmpvaW4gam9pbmVyXG4gIHJldHVybiBSLnJlcGxhY2UgLzAvZ3YsIHplcm9cblxuZGVidWcgJ86pdmlfX18xJywgYnl0ZXMgPSB2YXJpbnQuZW5jb2RlIDMwMCAgIyA9PT0gWzB4QUMsIDB4MDJdXG5kZWJ1ZyAnzql2aV9fXzInLCB2YXJpbnQuZGVjb2RlIGJ5dGVzICAgICAgICAjIDMwMFxuZGVidWcgJ86pdmlfX18zJywgdmFyaW50LmRlY29kZS5ieXRlcyAgICAgICAgIyAyICh0aGUgbGFzdCBkZWNvZGUoKSBjYWxsIHJlcXVpcmVkIDIgYnl0ZXMpXG5kZWJ1ZyAnzql2aV9fXzQnLCB2YXJpbnQuZGVjb2RlIFsgKCB2YXJpbnQuZW5jb2RlIDUgKS4uLiwgKCB2YXJpbnQuZW5jb2RlIDYgKS4uLiwgXVxuZGVidWcgJ86pdmlfX181JywgdmFyaW50LmVuY29kaW5nTGVuZ3RoIDFlMTBcbmRlYnVnICfOqXZpX19fNicsIHZhcmludC5lbmNvZGluZ0xlbmd0aCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG4jIGZvciBuIGluIFsgMCAuLi4gMjAwIF1cbiMgICBpbmZvICfOqXZpX19fNycsIG4sIGJ5dGVzID0gdmFyaW50LmVuY29kZSBuXG5cbmRlYnVnICfOqXZpX19fOCcsIEJ1ZmZlci5mcm9tIHZhcmludC5lbmNvZGUgMTIzNDU2XG5cbnZkeCA9IG5ldyBVaW50OEFycmF5IDE2XG5vZmZzZXQgPSAwXG5mb3IgbiBpbiBbIDEsIDMsIDUsIDcsIDksIF1cbiAgbiAqPSAxMDAwXG4gIHZkeC5zZXQgKCBieXRlcyA9IHZhcmludC5lbmNvZGUgbiApLCBvZmZzZXRcbiAgd2hpc3BlciAnzql2aV9fXzknLCBieXRlcywgdmFyaW50LmVuY29kZS5ieXRlc1xuICBvZmZzZXQgKz0gdmFyaW50LmVuY29kZS5ieXRlc1xuaGVscCAnzql2aV9fMTAnLCBoZXhfZnJvbV90eXBlZF9hcnJheSB2ZHgsICcuJ1xuXG5cblxuIl19
