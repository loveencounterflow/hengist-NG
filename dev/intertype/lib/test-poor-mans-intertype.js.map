{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-poor-mans-intertype.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\nTMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nclass Intertype_error extends Error\nclass Intertype_validation_error extends Intertype_error\n\n\n#===========================================================================================================\nclass Types\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  isa:          ( type, x ) -> type.$isa x\n  isa_optional: ( type, x ) -> ( not x? ) or ( @isa type, x )\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( type, x ) ->\n    return x if @isa type, x\n    throw new Intertype_validation_error \"Ωpmi___1 #{rpr type} #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate_optional: ( type, x ) ->\n    return x if @isa_optional type, x\n    throw new Intertype_validation_error \"Ωpmi___2 #{rpr type} #{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( type, P... ) -> @validate type, type.$create P...\n\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( declaration ) ->\n    @$isa     = declaration.$isa\n    @$create  = declaration.$create\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  $isa: ->\n  $create: ->\n\n\n#===========================================================================================================\ndeclarations =\n  anything:\n    $isa: ( x ) -> true\n    # $create: ( cfg ) ->\n  boolean:\n    $isa: ( x ) -> ( x is true ) or ( x is false )\n    # $create: ( cfg ) ->\n  function:\n    $isa: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    $create: -> -> null\n  asyncfunction:\n    $isa: ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n    $create: -> -> await null\n  symbol:\n    $isa: ( x ) -> ( typeof x ) is 'symbol'\n    # $create: ( cfg ) ->\n  object:\n    $isa: ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n    $create: ( cfg ) -> { cfg..., }\n  float:\n    $isa: ( x ) -> Number.isFinite x\n    $create: -> 0\n  text:\n    $isa: ( x ) -> ( typeof x ) is 'string'\n    $create: -> ''\n  nullary:\n    $isa: ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n    # $create: ( cfg ) ->\n  unary:\n    $isa: ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n    # $create: ( cfg ) ->\n  binary:\n    $isa: ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n    # $create: ( cfg ) ->\n  trinary:\n    $isa: ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n    # $create: ( cfg ) ->\n  set:\n    $isa: ( x ) -> x instanceof Set\n    $create: ( cfg ) -> new Set cfg ? []\n  map:\n    $isa: ( x ) -> x instanceof Map\n    $create: ( cfg ) -> new Map cfg ? []\n  list:\n    $isa: ( x ) -> Array.isArray x\n    $create: ( cfg ) -> ( x for x from cfg ? [] )\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@intertype_tasks =\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    isa: ->\n      ###\n      declare.lt_constructor_cfg\n        fields:\n          loners:     'boolean'\n        default:\n          loners:     true\n      ###\n      types =\n        lt_constructor_cfg:\n          $isa: ( x ) ->\n            return false unless types.isa.object x\n            return false unless @loners.$isa x.loners\n            return true\n          loners:\n            $isa:       ( x ) -> types.isa.boolean x\n          $template:\n            loners:     true\n          $create: ( x ) ->\n            return x unless types.isa_optional.object x\n            return { @$template..., x..., }\n      #.....................................................................................................\n      # @eq ( Ωit___3 = -> create_typespace()             instanceof Typespace  ), true\n      # @throws ( Ωit___4 = -> create_typespace() ), /declaration for type 'wholenumber' contains forward reference to type 'integer'/\n      #.....................................................................................................\n      return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @intertype_tasks\n  # ( new Test { throw_on_error: true, } ).test { mvp_isa: @intertype_tasks.MVP.isa, }\n"
  ]
}