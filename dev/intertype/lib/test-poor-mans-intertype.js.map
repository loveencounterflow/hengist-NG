{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-poor-mans-intertype.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,eAAA,EAAA,0BAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA;;EAEA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC;;EAKA,IAAA,GAA4B,OAAA,CAAQ,sBAAR;;EAC5B,SAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,mBAAR,CAAF,CAA+B,CAAC,SAApC,CAAA;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,IAA5B,EApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyEM,kBAAN,MAAA,gBAAA,QAA8B,MAA9B,CAAA;;EACM,6BAAN,MAAA,2BAAA,QAAyC,gBAAzC,CAAA,EA1EA;;;EA8EM,YAAN,MAAA,UAAA,CAAA;;IAGE,WAAa,CAAA,CAAA;MACX,IAAC,CAAA,SAAD,GAAgB,KAAH,GAAc,IAAI,OAAJ,CAAA,CAAd,GAAiC,IAAI,GAAI,wDAAR,CAAA;AAC9C,aAAO;IAFI,CADf;;;IAME,QAAU,CAAE,IAAF,CAAA;AACZ,UAAA;MAAI,IAAsC,sCAAtC;AAAA,eAAO,CAAE,CAAA,GAAI,IAAC,CAAA,SAAS,CAAC,GAAX,CAAe,IAAf,CAAN,EAAP;;MACA,IAAC,CAAA,SAAS,CAAC,GAAX,CAAe,IAAf,EAAqB,CAAA,GAAI,MAAM,CAAC,MAAP,CAAc;QAAE,EAAA,EAAI,IAAN;QAAY,KAAA,EAAO;MAAnB,CAAd,CAAzB;AACA,aAAO;IAHC,CANZ;;;IAYE,GAAK,CAAE,IAAF,EAAQ,CAAR,CAAA;AACH,aAAO,IAAI,CAAC,IAAI,CAAC,IAAV,CAAiB,IAAC,CAAA,QAAD,CAAU,IAAV,CAAjB,EAAmC,CAAnC;IADJ,CAZP;;;IAgBE,YAAc,CAAE,IAAF,EAAQ,CAAR,CAAA;aAAe,CAAM,SAAN,CAAA,IAAc,CAAE,IAAC,CAAA,GAAD,CAAK,IAAL,EAAW,CAAX,CAAF;IAA7B,CAhBhB;;;IAmBE,QAAU,CAAE,IAAF,EAAQ,CAAR,CAAA;MACR,IAAY,IAAC,CAAA,GAAD,CAAK,IAAL,EAAW,CAAX,CAAZ;AAAA,eAAO,EAAP;;MACA,MAAM,IAAI,0BAAJ,CAA+B,CAAA,2BAAA,CAAA,CAA8B,GAAA,CAAI,IAAJ,CAA9B,CAAA,EAAA,CAAA,CAA2C,GAAA,CAAI,CAAJ,CAA3C,CAAA,CAA/B;IAFE,CAnBZ;;;IAwBE,iBAAmB,CAAE,IAAF,EAAQ,CAAR,CAAA;MACjB,IAAY,IAAC,CAAA,YAAD,CAAc,IAAd,EAAoB,CAApB,CAAZ;AAAA,eAAO,EAAP;;MACA,MAAM,IAAI,0BAAJ,CAA+B,CAAA,2BAAA,CAAA,CAA8B,GAAA,CAAI,IAAJ,CAA9B,CAAA,EAAA,CAAA,CAA2C,GAAA,CAAI,CAAJ,CAA3C,CAAA,CAA/B;IAFW,CAxBrB;;;IA6BE,MAAQ,CAAE,IAAF,EAAA,GAAQ,CAAR,CAAA;AACN,aAAO,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,IAAI,CAAC,OAAO,CAAC,IAAb,CAAoB,IAAC,CAAA,QAAD,CAAU,IAAV,CAApB,EAAsC,GAAA,CAAtC,CAAhB;IADD;;EA/BV,EA9EA;;;EAiHA,KAAA,GAAQ,IAAI,SAAJ,CAAA,EAjHR;;;EAqHM,OAAN,MAAA,KAAA,CAAA;;IAGE,WAAa,CAAE,WAAF,CAAA;MACX,IAAC,CAAA,IAAD,GAAY,WAAW,CAAC;MACxB,IAAC,CAAA,OAAD,GAAY,WAAW,CAAC;AACxB,aAAO;IAHI;;EAHf,EArHA;;;;;;;EAmIA,CAAA,GACE;IAAA,QAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS;MAAT;IAAN,CADF;;IAGA,OAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,CAAA,KAAK,IAAP,CAAA,IAAiB,CAAE,CAAA,KAAK,KAAP;MAA1B;IAAN,CAJF;;IAMA,QAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CAAN;MACA,OAAA,EAAS,QAAA,CAAA,CAAA;eAAK,QAAA,CAAA,CAAA;iBAAG;QAAH;MAAL;IADT,CAPF;IASA,aAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B;MAAxC,CAAN;MACA,OAAA,EAAS,QAAA,CAAA,CAAA;eAAK,MAAA,QAAA,CAAA,CAAA;iBAAG,CAAA,MAAM,IAAN;QAAH;MAAL;IADT,CAVF;IAYA,MAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB;IAAN,CAbF;;IAeA,MAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,OAAO,CAAP,KAAY,QAAd,CAAP,IAAoC,CAAE,CAAE,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,CAAtB,CAAF,CAAA,KAA+B,iBAAjC;MAA7C,CAAN;MACA,OAAA,EAAS,QAAA,CAAE,GAAF,CAAA;eAAW,CAAE,GAAA,GAAF;MAAX;IADT,CAhBF;IAkBA,KAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,MAAM,CAAC,QAAP,CAAgB,CAAhB;MAAT,CAAN;MACA,OAAA,EAAS,QAAA,CAAA,CAAA;eAAG;MAAH;IADT,CAnBF;IAqBA,IAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAE,OAAO,CAAT,CAAA,KAAgB;MAAzB,CAAN;MACA,OAAA,EAAS,QAAA,CAAA,CAAA;eAAG;MAAH;IADT,CAtBF;IAwBA,OAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAN,CAzBF;;IA2BA,KAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAN,CA5BF;;IA8BA,MAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAN,CA/BF;;IAiCA,OAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,WAAA,IAAO,CAAE,CAAE,CAAC,CAAC,MAAF,KAAY,CAAd,CAAA,IAAqB,CAAE,CAAC,CAAC,IAAF,KAAU,CAAZ,CAAvB;MAAhB;IAAN,CAlCF;;IAoCA,GAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,YAAa;MAAtB,CAAN;MACA,OAAA,EAAS,QAAA,CAAE,GAAF,CAAA;eAAW,IAAI,GAAJ,eAAQ,MAAM,EAAd;MAAX;IADT,CArCF;IAuCA,GAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,YAAa;MAAtB,CAAN;MACA,OAAA,EAAS,QAAA,CAAE,GAAF,CAAA;eAAW,IAAI,GAAJ,eAAQ,MAAM,EAAd;MAAX;IADT,CAxCF;IA0CA,IAAA,EACE;MAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;eAAS,KAAK,CAAC,OAAN,CAAc,CAAd;MAAT,CAAN;MACA,OAAA,EAAS,QAAA,CAAE,GAAF,CAAA;AAAU,YAAA,GAAA,EAAA,OAAA,EAAA;AAAG;AAAA;QAAA,KAAA,QAAA;uBAAA;QAAA,CAAA;;MAAb;IADT;EA3CF,EApIF;;;;;EAsLA,IAAC,CAAA,eAAD,GAGE,CAAA;;IAAA,IAAA,EAGE,CAAA;;MAAA,GAAA,EAAK,QAAA,CAAA,CAAA,EAAA;;;;;;;;AACT,YAAA,EAAA,EAAA,EAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA;QAAM,EAAA,GAAK,IAAI,SAAJ,CAAA;QAQL,EAAA,GACE;UAAA,kBAAA,EACE;YAAA,IAAA,EAAM,QAAA,CAAE,CAAF,CAAA;cACJ,KAAoB,IAAC,CAAA,KAAK,CAAC,GAAP,CAAW,CAAC,CAAC,MAAb,EAAqB,CAArB,CAApB;AAAA,uBAAO,MAAP;;cACA,KAAoB,IAAC,CAAA,KAAK,CAAC,GAAP,CAAW,IAAC,CAAA,EAAE,CAAC,MAAf,EAAuB,CAAC,CAAC,MAAzB,CAApB;AAAA,uBAAO,MAAP;;AACA,qBAAO;YAHH,CAAN;YAIA,MAAA,EACE;cAAA,IAAA,EAAY,QAAA,CAAE,CAAF,CAAA;uBAAS,IAAC,CAAA,KAAK,CAAC,GAAP,CAAW,CAAC,CAAC,OAAb,EAAsB,CAAtB;cAAT;YAAZ,CALF;YAMA,SAAA,EACE;cAAA,MAAA,EAAY;YAAZ,CAPF;YAQA,OAAA,EAAS,QAAA,CAAE,CAAF,CAAA;cACP,KAAgB,IAAC,CAAA,KAAK,CAAC,YAAP,CAAoB,CAAC,CAAC,MAAtB,EAA8B,CAA9B,CAAhB;AAAA,uBAAO,EAAP;;AACA,qBAAO,CAAE,GAAA,IAAC,CAAA,EAAE,CAAC,SAAN,EAAoB,GAAA,CAApB;YAFA;UART;QADF,EATR;;QAsBM,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,CAAC,CAAC,KAAT,EAAgB,IAAhB;QAAH,CAAb,CAAJ,EAA8E,KAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,CAAC,CAAC,KAAT,EAAgB,GAAhB;QAAH,CAAb,CAAJ,EAA8E,KAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,CAAC,CAAC,KAAT,EAAgB,MAAhB;QAAH,CAAb,CAAJ,EAA8E,IAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,kBAAV,EAA8B,MAA9B;QAAH,CAAb,CAAJ,EAA8E,KAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,kBAAV,EAA8B,CAAA,CAA9B;QAAH,CAAb,CAAJ,EAA8E,KAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,kBAAV,EAA8B;YAAE,MAAA,EAAQ;UAAV,CAA9B;QAAH,CAAb,CAAJ,EAA8E,KAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,GAAH,CAAO,EAAE,CAAC,kBAAV,EAA8B;YAAE,MAAA,EAAQ;UAAV,CAA9B;QAAH,CAAb,CAAJ,EAA8E,IAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,QAAH,CAAY,EAAE,CAAC,kBAAf,EAAmC;YAAE,MAAA,EAAQ;UAAV,CAAnC;QAAH,CAAb,CAAJ,EAA8E;UAAE,MAAA,EAAQ;QAAV,CAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,kBAAb;QAAH,CAAb,CAAJ,EAA8E;UAAE,MAAA,EAAQ;QAAV,CAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,kBAAb,EAAiC,IAAjC;QAAH,CAAb,CAAJ,EAA8E;UAAE,MAAA,EAAQ;QAAV,CAA9E;QACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,MAAH,CAAU,EAAE,CAAC,kBAAb,EAAiC,MAAjC;QAAH,CAAb,CAAJ,EAA8E;UAAE,MAAA,EAAQ;QAAV,CAA9E;QACA,IAAC,CAAA,MAAD,CAAQ,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,MAAH,CAAa,EAAE,CAAC,kBAAhB,EAAoC;YAAE,MAAA,EAAQ;UAAV,CAApC;QAAH,CAAb,CAAR,EAA8E,kBAA9E;QACA,IAAC,CAAA,MAAD,CAAQ,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;iBAAG,EAAE,CAAC,QAAH,CAAa,EAAE,CAAC,kBAAhB,EAAoC;YAAE,MAAA,EAAQ;UAAV,CAApC;QAAH,CAAb,CAAR,EAA8E,kBAA9E;QACG,CAAA,CAAA,CAAA,GAAA;AACT,cAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA;UAAQ,QAAA,GAAW,IAAI,GAAJ,CAAQ,EAAE,CAAC,SAAS,CAAC,IAAb,CAAA,CAAR;UACX,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;mBAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAC,KAAf;UAAH,CAAb,CAAJ,EAAqE,IAArE;UACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;mBAAG,QAAQ,CAAC,GAAT,CAAa,EAAE,CAAC,kBAAhB;UAAH,CAAb,CAAJ,EAAqE,IAArE;UACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;mBAAG,QAAQ,CAAC,GAAT,CAAa,EAAE,CAAC,kBAAkB,CAAC,MAAnC;UAAH,CAAb,CAAJ,EAAqE,IAArE;iBACA,IAAC,CAAA,EAAD,CAAI,CAAE,QAAA,GAAW,QAAA,CAAA,CAAA;mBAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAC,IAAf;UAAH,CAAb,CAAJ,EAAqE,KAArE;QALC,CAAA,IAnCT;;AA0CM,eAAO;MA3CJ;IAAL;EAHF,EAzLF;;;EA4OA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;MACtC,CAAE,IAAI,IAAJ,CAAS;QAAE,cAAA,EAAgB;MAAlB,CAAT,CAAF,CAAsC,CAAC,IAAvC,CAA4C,IAAC,CAAA,eAA7C;aAGA,QAAA,CAAA,CAAA,EAAA;AACF,YAAA;QAAI,CAAA,GACE;UAAA,CAAA,EAAG,QAAA,CAAA,CAAA;mBACD;cAAA,GAAA,EAAK,CAAL;cACA,GAAA,EAAK;YADL;UADC;QAAH;QAGF,KAAA,CAAM,UAAN,EAAkB,CAAlB;QACA,KAAA,CAAM,UAAN,EAAkB,CAAC,CAAC,CAApB;QACA,KAAA,CAAM,UAAN,EAAkB,CAAC,CAAC,CAAC,CAAC,IAAtB;eACA,KAAA,CAAM,UAAN,EAAkB,CAAC,CAAC,CAAF,CAAA,CAAlB;MARF;IAJsC,CAAA,IAAxC;;AA5OA",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\nTMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n\n\n###\n\n# from `ltsort` which uses an outdated version of `intertype`:\n\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.lt_nodelist 'list.of.nonempty.text'\n  #.........................................................................................................\n  declare.lt_constructor_cfg\n    fields:\n      loners:     'boolean'\n    default:\n      loners:     true\n  #.........................................................................................................\n  declare.lt_add_cfg\n    fields:\n      name:       'nonempty.text'\n      precedes:   'lt_nodelist'\n      needs:      'lt_nodelist'\n    default:\n      name:       null\n      precedes:     null\n      needs:      null\n    create: ( x ) ->\n      R           = x ? {}\n      return R unless @isa.object R\n      R.needs      ?= []\n      R.precedes   ?= []\n      R.needs       = [ R.needs,    ] unless @isa.list R.needs\n      R.precedes    = [ R.precedes, ] unless @isa.list R.precedes\n      return R\n  #.........................................................................................................\n  declare.lt_linearize_cfg\n    fields:\n      groups:     'boolean'\n    default:\n      groups:     false\n  #.........................................................................................................\n  return base_types\n\n###\n\n#===========================================================================================================\nclass Intertype_error extends Error\nclass Intertype_validation_error extends Intertype_error\n\n\n#===========================================================================================================\nclass Intertype\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @_contexts = if false then new WeakMap() else new Map ### TAINT this is going to be configurable for testing ###\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_ctx: ( type ) ->\n    return ( R = @_contexts.get type ) if R?\n    @_contexts.set type, R = Object.freeze { me: type, types: @, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  isa: ( type, x ) ->\n    return type.$isa.call ( @_get_ctx type ), x\n\n  #---------------------------------------------------------------------------------------------------------\n  isa_optional: ( type, x ) -> ( not x? ) or ( @isa type, x )\n\n  #---------------------------------------------------------------------------------------------------------\n  validate: ( type, x ) ->\n    return x if @isa type, x\n    throw new Intertype_validation_error \"Ωpmi___1 validation error\\n#{rpr type}\\n#{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  validate_optional: ( type, x ) ->\n    return x if @isa_optional type, x\n    throw new Intertype_validation_error \"Ωpmi___2 validation error\\n#{rpr type}\\n#{rpr x}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( type, P... ) ->\n    return @validate type, type.$create.call ( @_get_ctx type ), P...\n\n#===========================================================================================================\ntypes = new Intertype()\n\n\n#===========================================================================================================\nclass Type\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( declaration ) ->\n    @$isa     = declaration.$isa\n    @$create  = declaration.$create\n    return undefined\n\n  # #---------------------------------------------------------------------------------------------------------\n  # $isa: ->\n  # $create: ->\n\n\n#===========================================================================================================\nt =\n  anything:\n    $isa: ( x ) -> true\n    # $create: ( cfg ) ->\n  boolean:\n    $isa: ( x ) -> ( x is true ) or ( x is false )\n    # $create: ( cfg ) ->\n  function:\n    $isa: ( x ) -> ( Object::toString.call x ) is '[object Function]'\n    $create: -> ( -> null )\n  asyncfunction:\n    $isa: ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n    $create: -> ( -> await null )\n  symbol:\n    $isa: ( x ) -> ( typeof x ) is 'symbol'\n    # $create: ( cfg ) ->\n  object:\n    $isa: ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n    $create: ( cfg ) -> { cfg..., }\n  float:\n    $isa: ( x ) -> Number.isFinite x\n    $create: -> 0\n  text:\n    $isa: ( x ) -> ( typeof x ) is 'string'\n    $create: -> ''\n  nullary:\n    $isa: ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n    # $create: ( cfg ) ->\n  unary:\n    $isa: ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n    # $create: ( cfg ) ->\n  binary:\n    $isa: ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n    # $create: ( cfg ) ->\n  trinary:\n    $isa: ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n    # $create: ( cfg ) ->\n  set:\n    $isa: ( x ) -> x instanceof Set\n    $create: ( cfg ) -> new Set cfg ? []\n  map:\n    $isa: ( x ) -> x instanceof Map\n    $create: ( cfg ) -> new Map cfg ? []\n  list:\n    $isa: ( x ) -> Array.isArray x\n    $create: ( cfg ) -> ( x for x from cfg ? [] )\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@intertype_tasks =\n\n  #=========================================================================================================\n  demo:\n\n    #-------------------------------------------------------------------------------------------------------\n    isa: ->\n      tt = new Intertype()\n      ###\n      declare.lt_constructor_cfg\n        fields:\n          loners:     'boolean'\n        default:\n          loners:     true\n      ###\n      t2 =\n        lt_constructor_cfg:\n          $isa: ( x ) ->\n            return false unless @types.isa t.object, x\n            return false unless @types.isa @me.loners, x.loners\n            return true\n          loners:\n            $isa:       ( x ) -> @types.isa t.boolean, x\n          $template:\n            loners:     true\n          $create: ( x ) ->\n            return x unless @types.isa_optional t.object, x\n            return { @me.$template..., x..., }\n      #.....................................................................................................\n      @eq ( Ωpmi___3 = -> tt.isa t.float, true                                   ), false\n      @eq ( Ωpmi___4 = -> tt.isa t.float, '3'                                    ), false\n      @eq ( Ωpmi___5 = -> tt.isa t.float, 337465                                 ), true\n      @eq ( Ωpmi___6 = -> tt.isa t2.lt_constructor_cfg, 337465                   ), false\n      @eq ( Ωpmi___7 = -> tt.isa t2.lt_constructor_cfg, {}                       ), false\n      @eq ( Ωpmi___8 = -> tt.isa t2.lt_constructor_cfg, { loners: 8, }           ), false\n      @eq ( Ωpmi___9 = -> tt.isa t2.lt_constructor_cfg, { loners: true, }        ), true\n      @eq ( Ωpmi__10 = -> tt.validate t2.lt_constructor_cfg, { loners: true, }   ), { loners: true, }\n      @eq ( Ωpmi__11 = -> tt.create t2.lt_constructor_cfg                        ), { loners: true, }\n      @eq ( Ωpmi__12 = -> tt.create t2.lt_constructor_cfg, null                  ), { loners: true, }\n      @eq ( Ωpmi__13 = -> tt.create t2.lt_constructor_cfg, undefined             ), { loners: true, }\n      @throws ( Ωpmi__14 = -> tt.create    t2.lt_constructor_cfg, { loners: 7, } ), /validation error/\n      @throws ( Ωpmi__15 = -> tt.validate  t2.lt_constructor_cfg, { loners: 8, } ), /validation error/\n      do =>\n        contexts = new Set tt._contexts.keys()\n        @eq ( Ωpmi__16 = -> contexts.has t.float                          ), true\n        @eq ( Ωpmi__17 = -> contexts.has t2.lt_constructor_cfg            ), true\n        @eq ( Ωpmi__18 = -> contexts.has t2.lt_constructor_cfg.loners     ), true\n        @eq ( Ωpmi__19 = -> contexts.has t.text                           ), false\n      #.....................................................................................................\n      return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: true, } ).test @intertype_tasks\n  # ( new Test { throw_on_error: true, } ).test { mvp_isa: @intertype_tasks.MVP.isa, }\n\n  ->\n    d =\n      a: ->\n        foo: 1\n        bar: 2\n    debug 'Ωpmi__20', d\n    debug 'Ωpmi__21', d.a\n    debug 'Ωpmi__22', d.a.name\n    debug 'Ωpmi__23', d.a()\n"
  ]
}