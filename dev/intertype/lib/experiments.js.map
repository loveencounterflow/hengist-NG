{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/experiments.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\nTMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n\n\n#===========================================================================================================\nget_typespaces = ->\n  { Typespace } = require '../../../apps/intertype'\n  #.........................................................................................................\n  mvp = new Typespace\n    # anything:       ( x, t ) -> true\n    nothing:        ( x, t ) -> not x?\n    something:      ( x, t ) -> x?\n    primitive:      ( x, t ) -> ( x in [ null, undefined, true, false, ] ) or ( typeof x in [ 'string', 'number', ] )\n    object:         ( x, t ) -> not t.isa mvp.primitive, x\n    pod:            ( x, t ) -> x? and x.constructor in [ Object, undefined, ]\n    #.......................................................................................................\n    null:           ( x, t ) -> x is null\n    undefined:      ( x, t ) -> x is undefined\n    infinity:       ( x, t ) -> ( x is +Infinity ) or ( x is -Infinity )\n    boolean:        ( x, t ) -> ( x is true ) or ( x is false )\n    nan:            ( x, t ) -> Number.isNaN x\n    #.......................................................................................................\n    integer:\n      isa:    ( x, t ) -> Number.isInteger x\n      foo:    4\n    odd:\n      isa:    ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 isnt 0 )\n    # short form just assigns either a test method or a type name:\n    even:           ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 is 0 )\n    float:\n      isa:            ( x, t ) -> Number.isFinite x\n      template:       0\n    bigint:         ( x, t ) -> typeof x is 'bigint'\n    text:           ( x, t ) -> typeof x is 'string'\n    empty_text:     ( x, t ) -> x is ''\n    nonempty_text:  ( x, t ) -> ( t.isa @$typespace.text, x ) and ( x.length > 0 )\n    #.......................................................................................................\n    set:            ( x, t ) -> x instanceof Set\n    map:            ( x, t ) -> x instanceof Map\n    weakmap:        ( x, t ) -> x instanceof WeakMap\n    list:           ( x, t ) -> Array.isArray x\n    #.......................................................................................................\n    function:           ( x, t ) -> ( Object::toString.call x ) is '[object Function]'\n    asyncfunction:      ( x, t ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n    generatorfunction:  ( x, t ) -> ( Object::toString.call x ) is '[object GeneratorFunction]'\n    #.......................................................................................................\n    # numerical:      ( x, t ) -> ( t.isa @$typespace.float, x   ) or ( t.isa @$typespace.bigint, x )\n    # positive0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +0  )\n    # positive1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +1  )\n    # negative0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <=  0  )\n    # negative1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <= -1  )\n    # cardinal:       ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( t.isa @$typespace.positive0, x )\n    #.......................................................................................................\n    # cardinalbigint: ( x, t ) -> ( t.isa @$typespace.bigint, x    ) and ( x >= +0 )\n    #.......................................................................................................\n    # circle1:  'circle2'\n    # circle2:  'circle3'\n    # circle3:  'circle1'\n    #.......................................................................................................\n    strange:  'odd'     # declares another name for `odd`\n    weird:    'strange' # declares another name for `odd`\n    abnormal: 'weird'   # declares another name for `odd`\n    #.......................................................................................................\n    quantity_refs:\n      fields:\n        # each field becomes a `Type` instance; strings may refer to names in the same typespace\n        q:    'float'\n        u:    'nonempty_text'\n      template:\n        q:    0\n        u:    'u'\n    #.......................................................................................................\n    quantity_funs:\n      fields:\n        q:    ( x, t ) -> t.isa mvp.float,          x\n        u:    ( x, t ) -> t.isa mvp.nonempty_text,  x\n      template:\n        q:    0\n        u:    'u'\n    #.......................................................................................................\n    address:\n      fields:\n        postcode:   'nonempty_text'\n        city:       'nonempty_text'\n    #.......................................................................................................\n    employee:\n      fields:\n        address:    'address'\n        name:\n          fields:\n            firstname:  'nonempty_text'\n            lastname:   'nonempty_text'\n  #.........................................................................................................\n  ts1 = new Typespace\n    #.......................................................................................................\n    quantity_typs:\n      fields:\n        q:    mvp.float\n        u:    mvp.nonempty_text\n      template:\n        q:    0\n        u:    'u'\n    #.......................................................................................................\n    quantity_typs_float_fb:\n      fields:\n        q:    mvp.float\n        u:    mvp.nonempty_text\n      template:\n        u:    'u'\n    #.......................................................................................................\n    quantity_typs_float_fb:\n      fields:\n        q:    mvp.float\n        u:\n          isa:      mvp.nonempty_text\n          template: 'u'\n    #.......................................................................................................\n    float_one:\n      isa:          mvp.float\n      template:     1\n    #.......................................................................................................\n    name:\n      fields:\n        firstname:  mvp.nonempty_text\n        lastname:   mvp.nonempty_text\n    #.......................................................................................................\n    person:\n      fields:\n        address:    mvp.address\n        name:       'name'\n  #.........................................................................................................\n  flatly_1 = new Typespace\n    flat:         ( x, t ) -> t.isa mvp.even, x\n    evenly:       'flat'\n    plain:        'evenly'\n    # foo:          'bar'\n  #.........................................................................................................\n  flatly_2 = new Typespace\n    flat:         mvp.even\n    evenly:       'flat'\n    plain:        'evenly'\n  #.........................................................................................................\n  cr1 = new Typespace\n    int_no_create:\n      isa:      ( x, t ) -> Number.isInteger x\n    int_create_zero:\n      isa:      ( x, t ) -> Number.isInteger x\n      template: 0\n    int_create_zero_fn:\n      isa:      ( x, t ) -> Number.isInteger x\n      template: -> 0\n    int_create_fn:\n      isa:      ( x, t ) -> Number.isInteger x\n      create:   ( [ numeric, P..., ], t ) ->\n        unless P.length is 0\n          throw new Error \"Ωit___1 create method for #{@$typename} doesn't accept more than one argument\"\n        return 0 unless numeric?\n        return Math.floor numeric if t.isa mvp.float, numeric\n        return parseInt numeric if ( t.isa mvp.text, numeric ) and ( /^(0|[1-9][0-9]*)$/.test numeric )\n        throw new Error \"Ωit___2 unable to create a #{@$typename} from value #{rpr numeric}\"\n  #.........................................................................................................\n  crt = new Typespace\n    cNfNtN:   {}\n    # cNfNtV:   { template: {}, }\n    # cNfNAPtV: { fields: 89, }\n  #.........................................................................................................\n  return { mvp, ts1, flatly_1, flatly_2, crt, cr1, }\n\n\n#===========================================================================================================\nsample_declarations =\n  anything:               ( x ) -> true\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  float:                  ( x ) -> Number.isFinite x\n  text:                   ( x ) -> ( typeof x ) is 'string'\n  nullary:                ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  unary:                  ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  binary:                 ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  trinary:                ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  set:                    ( x ) -> x instanceof Set\n  list:                   ( x ) -> Array.isArray x\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@intertype_tasks =\n\n\n  #---------------------------------------------------------------------------------------------------------\n  experiments:\n\n    #-------------------------------------------------------------------------------------------------------\n    clone_fields_and_template: ->\n      { $isa\n        Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { props: {\n          nameit } }      = require '../../../apps/intertype/node_modules/webguy'\n      #.....................................................................................................\n      cfg =\n        freeze: true\n        # freeze: false\n      freeze = if cfg.freeze then Object.freeze else ( x ) -> x\n      #.....................................................................................................\n      qq =\n        #...................................................................................................\n        get_create: ( d ) ->\n          return @_get_create_for_pods      d if $isa.pod       d\n          return @_get_create_for_functions d if $isa.function  d\n          return ( P, t ) -> freeze d\n        #...................................................................................................\n        _get_create_for_pods: ( d ) ->\n          shadow    = new Map()\n          for key in ( Object.getOwnPropertyNames d ).concat Object.getOwnPropertySymbols d\n            descriptor = Object.getOwnPropertyDescriptor d, key\n            continue unless descriptor.enumerable ### strange but important for e.g. `String::length` ###\n            name = if ( $isa.text key ) then key else Symbol::toString.call key\n            shadow.set key, nameit name, @get_create descriptor.value\n          #.................................................................................................\n          return ( P, t ) ->\n            R = {}\n            for [ key, value, ] from shadow.entries()\n              R[ key ] = value.call @, P, t\n            freeze R\n            return R\n        #...................................................................................................\n        _get_create_for_functions: ( d ) ->\n          return ( P, t ) -> freeze d.call @, P, t\n      #.....................................................................................................\n      typespace =\n        a:\n          [Symbol.for 'e']: { z: 'Z', }\n          b: [ 'B', ]\n          c: ( P, t ) -> debug 'Ωit_187', P; [ 'C', ( P ? [] )..., ]\n          d: 9\n      typespace.t =\n        A: typespace.a\n        B: -> [ 'ä', 'ö', 'ü', 'ß', ]\n      #.....................................................................................................\n      help 'Ωit_188', qq.get_create typespace.a\n      help 'Ωit_189', ( qq.get_create typespace.a )()\n      help 'Ωit_190', t1 = ( qq.get_create typespace.t )()\n      help 'Ωit_191', t2 = ( qq.get_create typespace.t ) [ 1, 2, 3, ]\n      info 'Ωit_192', GUY.trm.truth Object.isFrozen ( qq.get_create typespace.a )().b\n      info 'Ωit_193', GUY.trm.truth Object.isFrozen t1\n      info 'Ωit_194', GUY.trm.truth Object.isFrozen t1.A\n      info 'Ωit_195', GUY.trm.truth Object.isFrozen t1.B\n      try t1.B.push 't1' catch e then warn 'Ωit_196', e.message\n      try t2.B.push 't2' catch e then warn 'Ωit_197', e.message\n      help 'Ωit_198', t1.B\n      help 'Ωit_199', t2.B\n      help 'Ωit_200', GUY.trm.truth t1.B is t2.B\n      help 'Ωit_201', GUY.trm.truth Object.isFrozen t1.B\n      help 'Ωit_202', GUY.trm.truth Object.isFrozen t2.B\n      try t1.A.b.push 't1' catch e then warn 'Ωit_203', e.message\n      try t2.A.b.push 't2' catch e then warn 'Ωit_204', e.message\n      help 'Ωit_205', t1.A.b\n      help 'Ωit_206', t2.A.b\n      help 'Ωit_207', GUY.trm.truth t1.A.b is t2.A.b\n      help 'Ωit_208', GUY.trm.truth Object.isFrozen t1.A.b\n      help 'Ωit_209', t1.A[ Symbol.for 'e' ]\n      help 'Ωit_210', t2.A[ Symbol.for 'e' ]\n      help 'Ωit_211', GUY.trm.truth t1.A[ Symbol.for 'e' ] is t2.A[ Symbol.for 'e' ]\n      help 'Ωit_212', typespace.a\n      help 'Ωit_213', Object.assign {}, typespace.a, typespace.t\n      help 'Ωit_214', ( qq.get_create Object.assign {}, typespace.a, typespace.t )()\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    recursive_merge: ->\n      { $isa\n        Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { props: {\n          nameit } }      = require '../../../apps/intertype/node_modules/webguy'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    stability_with_nulls: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { mvp             } = get_typespaces()\n      #.....................................................................................................\n      s = new Typespace\n        h: ( x, t ) -> try t.isa mvp.text, x.d catch e then ( if e instanceof TypeError then false else throw e )\n      #.....................................................................................................\n      debug 'Ωit_215', types.isa s.h, { d: 4, }\n      debug 'Ωit_216', types.isa s.h, { d: 'D', }\n      try debug 'Ωit_217', types.isa s.h, null catch error then warn 'Ωit_218', error\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    key_handling: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { mvp             } = get_typespaces()\n      #.....................................................................................................\n      class Q\n        #---------------------------------------------------------------------------------------------------------\n        _get_own_keys: ( d ) ->\n          return [] unless d?\n          return ( Object.getOwnPropertyNames d ).concat Object.getOwnPropertySymbols d\n        #---------------------------------------------------------------------------------------------------------\n        _get_own_user_keys: ( d ) -> ( k for k in @_get_own_keys d when ( typeof k is 'symbol' ) or ( not k.startsWith '$' ) )\n        _get_own_system_keys: ( d ) -> ( k for k in Object.getOwnPropertyNames d when k.startsWith '$' )\n      #.....................................................................................................\n      return null\n\n    # #-------------------------------------------------------------------------------------------------------\n    # create: ->\n    #   { Intertype\n    #     Type\n    #     Typespace\n    #     types           } = require '../../../apps/intertype'\n    #   { crt             } = get_typespaces()\n    #   #.....................................................................................................\n    #   @throws ( Ωit_219 = -> types.create crt.cNfNtN                ), /MEH-create-/\n    #   @throws ( Ωit_220 = -> types.create crt.cNfNtV                ), /expected `fields` to be a POD/\n    #   @throws ( Ωit_221 = -> types.create crt.cNfNAPtV              ), /MEH-create-/\n    #   #.....................................................................................................\n    #   return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: false, } ).test @intertype_tasks\n"
  ]
}