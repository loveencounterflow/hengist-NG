{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\nTMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n\n\n#===========================================================================================================\nget_typespaces = ->\n  { Typespace } = require '../../../apps/intertype'\n  #.........................................................................................................\n  mvp = new Typespace\n    # anything:       ( x, t ) -> true\n    nothing:        ( x, t ) -> not x?\n    something:      ( x, t ) -> x?\n    primitive:      ( x, t ) -> ( x in [ null, undefined, true, false, ] ) or ( typeof x in [ 'string', 'number', ] )\n    object:         ( x, t ) -> not t.isa mvp.primitive, x\n    pod:            ( x, t ) -> x? and x.constructor in [ Object, undefined, ]\n    #.......................................................................................................\n    null:           ( x, t ) -> x is null\n    undefined:      ( x, t ) -> x is undefined\n    infinity:       ( x, t ) -> ( x is +Infinity ) or ( x is -Infinity )\n    boolean:        ( x, t ) -> ( x is true ) or ( x is false )\n    nan:            ( x, t ) -> Number.isNaN x\n    #.......................................................................................................\n    integer:\n      $isa:   ( x, t ) -> Number.isInteger x\n      foo:    4\n    odd:\n      $isa:   ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 isnt 0 )\n    # short form just assigns either a test method or a type name:\n    even:           ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( x %% 2 is 0 )\n    float:\n      $isa:           ( x, t ) -> Number.isFinite x\n      $template:      0\n    bigint:         ( x, t ) -> typeof x is 'bigint'\n    text:           ( x, t ) -> typeof x is 'string'\n    empty_text:     ( x, t ) -> x is ''\n    nonempty_text:  ( x, t ) -> ( t.isa @$typespace.text, x ) and ( x.length > 0 )\n    #.......................................................................................................\n    set:            ( x, t ) -> x instanceof Set\n    map:            ( x, t ) -> x instanceof Map\n    weakmap:        ( x, t ) -> x instanceof WeakMap\n    list:           ( x, t ) -> Array.isArray x\n    #.......................................................................................................\n    function:           ( x, t ) -> ( Object::toString.call x ) is '[object Function]'\n    asyncfunction:      ( x, t ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n    generatorfunction:  ( x, t ) -> ( Object::toString.call x ) is '[object GeneratorFunction]'\n    #.......................................................................................................\n    # numerical:      ( x, t ) -> ( t.isa @$typespace.float, x   ) or ( t.isa @$typespace.bigint, x )\n    # positive0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +0  )\n    # positive1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x >= +1  )\n    # negative0:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <=  0  )\n    # negative1:      ( x, t ) -> ( t.isa @$typespace.float, x   ) and ( x <= -1  )\n    # cardinal:       ( x, t ) -> ( t.isa @$typespace.integer, x ) and ( t.isa @$typespace.positive0, x )\n    #.......................................................................................................\n    # cardinalbigint: ( x, t ) -> ( t.isa @$typespace.bigint, x    ) and ( x >= +0 )\n    #.......................................................................................................\n    # circle1:  'circle2'\n    # circle2:  'circle3'\n    # circle3:  'circle1'\n    #.......................................................................................................\n    strange:  'odd'     # declares another name for `odd`\n    weird:    'strange' # declares another name for `odd`\n    abnormal: 'weird'   # declares another name for `odd`\n    #.......................................................................................................\n    quantity_refs:\n      $kind:  '$record'\n      q:\n        $isa:       'float'\n        $template:  0\n      u:\n        $isa:       'nonempty_text'\n        $template:  'u'\n    #.......................................................................................................\n    quantity_funs:\n      q:\n        $isa:       ( x, t ) -> t.isa mvp.float,          x\n        $template:  0\n      u:\n        $isa:       ( x, t ) -> t.isa mvp.nonempty_text,  x\n        $template:  'u'\n    #.......................................................................................................\n    street_address:\n      $kind:      '$record'\n      postcode:   'nonempty_text'\n      city:       'nonempty_text'\n    #.......................................................................................................\n    employee:\n      $kind:      '$record'\n      address:    'street_address'\n      name:\n        firstname:  'nonempty_text'\n        lastname:   'nonempty_text'\n  #.........................................................................................................\n  ts1 = new Typespace\n    #.......................................................................................................\n    quantity_typs:\n      q:\n        $isa:       mvp.float\n        $template:  0\n      u:\n        $isa:       mvp.nonempty_text\n        $template:  'u'\n    #.......................................................................................................\n    quantity_typs_float_fb:\n      q:          mvp.float\n      u:\n        $isa:       mvp.nonempty_text\n        $template:  'u'\n    #.......................................................................................................\n    quantity_typs_float_fb:\n      q:            mvp.float\n      u:\n        $isa:       mvp.nonempty_text\n        $template:  'u'\n    #.......................................................................................................\n    float_one:\n      $isa:         mvp.float\n      $template:    1\n    #.......................................................................................................\n    name:\n      firstname:  mvp.nonempty_text\n      lastname:   mvp.nonempty_text\n    #.......................................................................................................\n    person:\n      address:    mvp.address\n      name:       'name'\n  #.........................................................................................................\n  flatly_1 = new Typespace\n    flat:         ( x, t ) -> t.isa mvp.even, x\n    evenly:       'flat'\n    plain:        'evenly'\n    # foo:          'bar'\n  #.........................................................................................................\n  flatly_2 = new Typespace\n    flat:         mvp.even\n    evenly:       'flat'\n    plain:        'evenly'\n  #.........................................................................................................\n  cr1 = new Typespace\n    int_no_create:\n      $isa:           ( x, t ) -> Number.isInteger x\n    int_create_zero:\n      $isa:           ( x, t ) -> Number.isInteger x\n      $template:0\n    int_create_zero_fn:\n      $isa:           ( x, t ) -> Number.isInteger x\n      $template:      -> 0\n    int_create_fn:\n      $isa:           ( x, t ) -> Number.isInteger x\n      $create:        ( [ numeric, P..., ], t ) ->\n        unless P.length is 0\n          throw new Error \"Ωit___1 create method for #{@$typename} doesn't accept more than one argument\"\n        return 0 unless numeric?\n        return Math.floor numeric if t.isa mvp.float, numeric\n        return parseInt numeric if ( t.isa mvp.text, numeric ) and ( /^(0|[1-9][0-9]*)$/.test numeric )\n        throw new Error \"Ωit___2 unable to create a #{@$typename} from value #{rpr numeric}\"\n  #.........................................................................................................\n  # crt = new Typespace\n  #   cNfNtN:   {}\n    # cNfNtV:   { $template:{}, }\n    # cNfNAPtV: { fields: 89, }\n  #.........................................................................................................\n  return { mvp, ts1, flatly_1, flatly_2, cr1, }\n\n\n#===========================================================================================================\nsample_declarations =\n  anything:               ( x ) -> true\n  boolean:                ( x ) -> ( x is true ) or ( x is false )\n  function:               ( x ) -> ( Object::toString.call x ) is '[object Function]'\n  asyncfunction:          ( x ) -> ( Object::toString.call x ) is '[object AsyncFunction]'\n  symbol:                 ( x ) -> ( typeof x ) is 'symbol'\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  float:                  ( x ) -> Number.isFinite x\n  text:                   ( x ) -> ( typeof x ) is 'string'\n  nullary:                ( x ) -> x? and ( ( x.length is 0 ) or ( x.size is 0 ) )\n  unary:                  ( x ) -> x? and ( ( x.length is 1 ) or ( x.size is 1 ) )\n  binary:                 ( x ) -> x? and ( ( x.length is 2 ) or ( x.size is 2 ) )\n  trinary:                ( x ) -> x? and ( ( x.length is 3 ) or ( x.size is 3 ) )\n  object:                 ( x ) -> x? and ( typeof x is 'object' ) and ( ( Object::toString.call x ) is '[object Object]' )\n  set:                    ( x ) -> x instanceof Set\n  list:                   ( x ) -> Array.isArray x\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@intertype_tasks =\n\n  #=========================================================================================================\n  MVP:\n\n    #-------------------------------------------------------------------------------------------------------\n    disallow_forward_refs: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      #.....................................................................................................\n      do =>\n        create_typespace = ->\n          ts1 = new Typespace\n            integer:            ( x, t ) -> Number.isInteger x\n            wholenumber:        'integer'\n        @eq ( Ωit___3 = -> create_typespace()             instanceof Typespace  ), true\n        @eq ( Ωit___4 = -> create_typespace().integer     instanceof Type       ), true\n        @eq ( Ωit___5 = -> create_typespace().wholenumber instanceof Type       ), true\n      #.....................................................................................................\n      do =>\n        create_typespace = ->\n          ts1 = new Typespace\n            wholenumber:        'integer'\n            integer:            ( x, t ) -> Number.isInteger x\n        @throws ( Ωit___6 = -> create_typespace() ), /declaration for type 'wholenumber' contains forward reference to type 'integer'/\n      #.....................................................................................................\n      do =>\n        create_typespace = ->\n          ts1 = new Typespace\n            wholenumber:\n              $isa:               'integer'\n              fields:             {}\n            integer:            ( x, t ) -> Number.isInteger x\n        @throws ( Ωit___7 = -> create_typespace() ), /declaration for type 'wholenumber' contains forward reference to type 'integer'/\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    isa: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { flatly_1\n        flatly_2\n        ts1\n        mvp         } = get_typespaces()\n      $isa = sample_declarations\n      #.....................................................................................................\n      @eq ( Ωit___8 = -> mvp            instanceof Typespace          ), true\n      @eq ( Ωit___9 = -> flatly_1       instanceof Typespace          ), true\n      @eq ( Ωit__10 = -> flatly_2       instanceof Typespace          ), true\n      @eq ( Ωit__11 = -> flatly_1.flat  instanceof Type               ), true\n      @eq ( Ωit__12 = -> flatly_2.flat  instanceof Type               ), true\n      @eq ( Ωit__13 = -> mvp.quantity_refs   instanceof Type               ), true\n      @eq ( Ωit__14 = -> mvp.quantity_funs   instanceof Type               ), true\n      @eq ( Ωit__15 = -> ts1.quantity_typs   instanceof Type               ), true\n      @eq ( Ωit__16 = -> $isa.function  mvp.quantity_refs.isa              ), true\n      @eq ( Ωit__17 = -> $isa.function  mvp.quantity_funs.isa              ), true\n      @eq ( Ωit__18 = -> $isa.function  ts1.quantity_typs.isa              ), true\n      @eq ( Ωit__19 = -> $isa.object    mvp.quantity_refs.fields           ), true\n      @eq ( Ωit__20 = -> $isa.object    mvp.quantity_funs.fields           ), true\n      @eq ( Ωit__21 = -> $isa.object    ts1.quantity_typs.fields           ), true\n      @eq ( Ωit__22 = -> mvp.quantity_refs.$fields.q instanceof Type        ), true\n      @eq ( Ωit__23 = -> mvp.quantity_funs.$fields.q instanceof Type        ), true\n      @eq ( Ωit__24 = -> ts1.quantity_typs.$fields.q instanceof Type        ), true\n      @eq ( Ωit__25 = -> $isa.function  mvp.quantity_refs.$fields.q.isa     ), true\n      @eq ( Ωit__26 = -> $isa.function  mvp.quantity_funs.$fields.q.isa     ), true\n      @eq ( Ωit__27 = -> $isa.function  ts1.quantity_typs.$fields.q.isa     ), true\n      #.....................................................................................................\n      echo()\n      @eq ( Ωit__28 = -> types.isa mvp.integer,              5                          ), true\n      @eq ( Ωit__29 = -> types.isa mvp.odd,                  5                          ), true\n      @eq ( Ωit__30 = -> types.isa mvp.even,                 6                          ), true\n      @eq ( Ωit__31 = -> types.isa mvp.strange,              5                          ), true\n      @eq ( Ωit__32 = -> types.isa mvp.weird,                5                          ), true\n      @eq ( Ωit__33 = -> types.isa mvp.abnormal,             5                          ), true\n      @eq ( Ωit__34 = -> types.isa flatly_1.flat,            8                          ), true\n      @eq ( Ωit__35 = -> types.isa flatly_1.evenly,          8                          ), true\n      @eq ( Ωit__36 = -> types.isa flatly_1.plain,           8                          ), true\n      @eq ( Ωit__37 = -> types.isa flatly_2.flat,            8                          ), true\n      @eq ( Ωit__38 = -> types.isa flatly_2.evenly,          8                          ), true\n      @eq ( Ωit__39 = -> types.isa flatly_2.plain,           8                          ), true\n      @eq ( Ωit__40 = -> types.isa mvp.nonempty_text,        'abc'                      ), true\n      @eq ( Ωit__41 = -> types.isa mvp.quantity_refs.fields.q,    123.456                    ), true\n      @eq ( Ωit__42 = -> types.isa mvp.quantity_funs.fields.q,    123.456                    ), true\n      @eq ( Ωit__43 = -> types.isa ts1.quantity_typs.fields.q,    123.456                    ), true\n      @eq ( Ωit__44 = -> types.isa mvp.quantity_refs.fields.u,    'm'                        ), true\n      @eq ( Ωit__45 = -> types.isa mvp.quantity_funs.fields.u,    'm'                        ), true\n      @eq ( Ωit__46 = -> types.isa ts1.quantity_typs.fields.u,    'm'                        ), true\n      @eq ( Ωit__47 = -> types.isa mvp.quantity_refs,             { q: 123.456, u: 'm', }    ), true\n      @eq ( Ωit__48 = -> types.isa mvp.quantity_funs,             { q: 123.456, u: 'm', }    ), true\n      @eq ( Ωit__49 = -> types.isa ts1.quantity_typs,             { q: 123.456, u: 'm', }    ), true\n      #.....................................................................................................\n      echo()\n      @eq ( Ωit__50 = -> types.isa mvp.integer,              5.3                        ), false\n      @eq ( Ωit__51 = -> types.isa mvp.odd,                  6                          ), false\n      @eq ( Ωit__52 = -> types.isa mvp.odd,                  5.3                        ), false\n      @eq ( Ωit__53 = -> types.isa mvp.even,                 5                          ), false\n      @eq ( Ωit__54 = -> types.isa mvp.strange,              6                          ), false\n      @eq ( Ωit__55 = -> types.isa mvp.weird,                6                          ), false\n      @eq ( Ωit__56 = -> types.isa mvp.abnormal,             6                          ), false\n      @eq ( Ωit__57 = -> types.isa flatly_1.evenly,          5                          ), false\n      @eq ( Ωit__58 = -> types.isa flatly_1.flat,            5                          ), false\n      @eq ( Ωit__59 = -> types.isa flatly_1.plain,           5                          ), false\n      @eq ( Ωit__60 = -> types.isa flatly_2.flat,            5                          ), false\n      @eq ( Ωit__61 = -> types.isa flatly_2.evenly,          5                          ), false\n      @eq ( Ωit__62 = -> types.isa flatly_2.plain,           5                          ), false\n      @eq ( Ωit__63 = -> types.isa mvp.nonempty_text,        ''                         ), false\n      @eq ( Ωit__64 = -> types.isa mvp.quantity_refs.$fields.q,   '123.456'                  ), false\n      @eq ( Ωit__65 = -> types.isa mvp.quantity_funs.$fields.q,   '123.456'                  ), false\n      @eq ( Ωit__66 = -> types.isa ts1.quantity_typs.$fields.q,   '123.456'                  ), false\n      @eq ( Ωit__67 = -> types.isa mvp.quantity_refs.$fields.u,   ''                         ), false\n      @eq ( Ωit__68 = -> types.isa mvp.quantity_funs.$fields.u,   ''                         ), false\n      @eq ( Ωit__69 = -> types.isa ts1.quantity_typs.$fields.u,   ''                         ), false\n      @eq ( Ωit__70 = -> types.isa mvp.quantity_refs,             { q: 123.456, u: '', }     ), false\n      @eq ( Ωit__71 = -> types.isa mvp.quantity_funs,             { q: 123.456, u: '', }     ), false\n      @eq ( Ωit__72 = -> types.isa ts1.quantity_typs,             { q: 123.456, u: '', }     ), false\n      @eq ( Ωit__73 = -> types.isa mvp.quantity_refs,             { q: null, u: 'm', }       ), false\n      @eq ( Ωit__74 = -> types.isa mvp.quantity_funs,             { q: null, u: 'm', }       ), false\n      @eq ( Ωit__75 = -> types.isa ts1.quantity_typs,             { q: null, u: 'm', }       ), false\n      #.....................................................................................................\n      return null\n\n\n    #-------------------------------------------------------------------------------------------------------\n    validate: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { flatly_1\n        flatly_2\n        ts1\n        mvp         } = get_typespaces()\n      $isa = sample_declarations\n      #.....................................................................................................\n      @eq     ( Ωit__76 = -> types.validate mvp.integer,  -5                      ), -5\n      @eq     ( Ωit__77 = -> types.validate mvp.integer,  5                       ), 5\n      @throws ( Ωit__78 = -> types.validate mvp.integer,  5.3                     ), /expected a integer/\n      @throws ( Ωit__79 = -> types.validate mvp.quantity_refs,  5                      ), /expected a quantity/\n      @throws ( Ωit__80 = -> types.validate mvp.quantity_funs,  5                      ), /expected a quantity/\n      @throws ( Ωit__81 = -> types.validate ts1.quantity_typs,  5                      ), /expected a quantity/\n      @eq     ( Ωit__82 = -> types.validate mvp.quantity_refs, { q: 123.4, u: 'km', }  ), { q: 123.4, u: 'km', }\n      @eq     ( Ωit__83 = -> types.validate mvp.quantity_funs, { q: 123.4, u: 'km', }  ), { q: 123.4, u: 'km', }\n      @eq     ( Ωit__84 = -> types.validate ts1.quantity_typs, { q: 123.4, u: 'km', }  ), { q: 123.4, u: 'km', }\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    evaluate: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { flatly_1\n        flatly_2\n        ts1\n        mvp         } = get_typespaces()\n      $isa = sample_declarations\n      #.....................................................................................................\n      echo()\n      probes_and_matchers = [\n        [[ mvp.integer, 5 ], [\n          [ 'integer',                                                                       5,                                            true,   ]\n          ]]\n        [[ mvp.integer, 5.3 ], [\n          [ 'integer',                                                                       5.3,                                          false,  ]\n          ]]\n        [[ mvp.even, 5 ], [\n          [ 'even',                                                                          5,                                            false,  ]\n          [ 'even/integer',                                                                  5,                                            true,   ]\n          ]]\n        [[ flatly_1.evenly, 5 ], [\n          [ 'evenly',                                                                        5,                                            false,  ]\n          [ 'evenly/flat',                                                                   5,                                            false,  ]\n          [ 'evenly/flat/even',                                                              5,                                            false,  ]\n          [ 'evenly/flat/even/integer',                                                      5,                                            true,   ]\n          ]]\n        [[ flatly_1.evenly, 6 ], [\n          [ 'evenly',                                                                        6,                                            true,   ]\n          [ 'evenly/flat',                                                                   6,                                            true,   ]\n          [ 'evenly/flat/even',                                                              6,                                            true,   ]\n          [ 'evenly/flat/even/integer',                                                      6,                                            true,   ]\n          ]]\n        [[ flatly_2.evenly, 5 ], [\n          [ 'evenly',                                                                        5,                                            false,  ]\n          [ 'evenly/even',                                                                   5,                                            false,  ]\n          [ 'evenly/even/integer',                                                           5,                                            true,   ]\n          ]]\n        [[ flatly_2.evenly, 6 ], [\n          [ 'evenly',                                                                        6,                                            true,   ]\n          [ 'evenly/even',                                                                   6,                                            true,   ]\n          [ 'evenly/even/integer',                                                           6,                                            true,   ]\n          ]]\n        [[ mvp.quantity_refs, { q: 123.456, u: '' } ], [\n          [ 'quantity_refs',                                                                 { q: 123.456, u: '' },                        false,  ]\n          [ 'quantity_refs/quantity_refs_$q',                                                123.456,                                      true,   ]\n          [ 'quantity_refs/quantity_refs_$q/float',                                          123.456,                                      true,   ]\n          [ 'quantity_refs/quantity_refs_$u',                                                '',                                           false,  ]\n          [ 'quantity_refs/quantity_refs_$u/nonempty_text',                                  '',                                           false,  ]\n          [ 'quantity_refs/quantity_refs_$u/nonempty_text/text',                             '',                                           true,   ]\n          ]]\n        [[ mvp.quantity_funs, { q: 123.456, u: '' } ], [\n          [ 'quantity_funs',                                                                 { q: 123.456, u: '' },                        false,  ]\n          [ 'quantity_funs/quantity_funs_$q',                                                123.456,                                      true,   ]\n          [ 'quantity_funs/quantity_funs_$q/float',                                          123.456,                                      true,   ]\n          [ 'quantity_funs/quantity_funs_$u',                                                '',                                           false,  ]\n          [ 'quantity_funs/quantity_funs_$u/nonempty_text',                                  '',                                           false,  ]\n          [ 'quantity_funs/quantity_funs_$u/nonempty_text/text',                             '',                                           true,   ]\n          ]]\n        [[ ts1.quantity_typs, { q: 123.456, u: '' } ], [\n          [ 'quantity_typs',                                                                 { q: 123.456, u: '' },                        false,  ]\n          [ 'quantity_typs/quantity_typs_$q',                                                123.456,                                      true,   ]\n          [ 'quantity_typs/quantity_typs_$q/float',                                          123.456,                                      true,   ]\n          [ 'quantity_typs/quantity_typs_$u',                                                '',                                           false,  ]\n          [ 'quantity_typs/quantity_typs_$u/nonempty_text',                                  '',                                           false,  ]\n          [ 'quantity_typs/quantity_typs_$u/nonempty_text/text',                             '',                                           true,   ]\n          ]]\n        [[ mvp.quantity_refs, { q: 123.456, u: null } ], [\n          [ 'quantity_refs',                                                                 { q: 123.456, u: null },                      false,  ]\n          [ 'quantity_refs/quantity_refs_$q',                                                123.456,                                      true,   ]\n          [ 'quantity_refs/quantity_refs_$q/float',                                          123.456,                                      true,   ]\n          [ 'quantity_refs/quantity_refs_$u',                                                null,                                         false,  ]\n          [ 'quantity_refs/quantity_refs_$u/nonempty_text',                                  null,                                         false,  ]\n          [ 'quantity_refs/quantity_refs_$u/nonempty_text/text',                             null,                                         false,  ]\n          ]]\n        [[ mvp.quantity_funs, { q: 123.456, u: null } ], [\n          [ 'quantity_funs',                                                                 { q: 123.456, u: null },                      false,  ]\n          [ 'quantity_funs/quantity_funs_$q',                                                123.456,                                      true,   ]\n          [ 'quantity_funs/quantity_funs_$q/float',                                          123.456,                                      true,   ]\n          [ 'quantity_funs/quantity_funs_$u',                                                null,                                         false,  ]\n          [ 'quantity_funs/quantity_funs_$u/nonempty_text',                                  null,                                         false,  ]\n          [ 'quantity_funs/quantity_funs_$u/nonempty_text/text',                             null,                                         false,  ]\n          ]]\n        [[ ts1.quantity_typs, { q: 123.456, u: null } ], [\n          [ 'quantity_typs',                                                                 { q: 123.456, u: null },                      false,  ]\n          [ 'quantity_typs/quantity_typs_$q',                                                123.456,                                      true,   ]\n          [ 'quantity_typs/quantity_typs_$q/float',                                          123.456,                                      true,   ]\n          [ 'quantity_typs/quantity_typs_$u',                                                null,                                         false,  ]\n          [ 'quantity_typs/quantity_typs_$u/nonempty_text',                                  null,                                         false,  ]\n          [ 'quantity_typs/quantity_typs_$u/nonempty_text/text',                             null,                                         false,  ]\n          ]]\n        [[ mvp.quantity_refs, { q: 'nan', u: 'm' } ], [\n          [ 'quantity_refs',                                                                 { q: 'nan', u: 'm' },                         false,  ]\n          [ 'quantity_refs/quantity_refs_$q',                                                'nan',                                        false,  ]\n          [ 'quantity_refs/quantity_refs_$q/float',                                          'nan',                                        false,  ]\n          ]]\n        [[ mvp.quantity_funs, { q: 'nan', u: 'm' } ], [\n          [ 'quantity_funs',                                                                 { q: 'nan', u: 'm' },                         false,  ]\n          [ 'quantity_funs/quantity_funs_$q',                                                'nan',                                        false,  ]\n          [ 'quantity_funs/quantity_funs_$q/float',                                          'nan',                                        false,  ]\n          ]]\n        [[ ts1.quantity_typs, { q: 'nan', u: 'm' } ], [\n          [ 'quantity_typs',                                                                 { q: 'nan', u: 'm' },                         false,  ]\n          [ 'quantity_typs/quantity_typs_$q',                                                'nan',                                        false,  ]\n          [ 'quantity_typs/quantity_typs_$q/float',                                          'nan',                                        false,  ]\n          ]]\n        [[ mvp.employee, { address: { postcode: 'SE36', city: 'London' }, name: null } ], [\n          [ 'employee',                                                                      { address: { postcode: 'SE36', city: 'London' }, name: null }, false,  ]\n          [ 'employee/employee_$address',                                                    { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address',                                            { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address/address_$postcode',                          'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text',            'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text/text',       'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$city',                              'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text',                'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text/text',           'London',                                     true,   ]\n          [ 'employee/employee_$name',                                                       null,                                         false,  ]\n          ]]\n        [[ mvp.employee, { address: { postcode: 'SE36', city: 'London' }, name: {} } ], [\n          [ 'employee',                                                                      { address: { postcode: 'SE36', city: 'London' }, name: {} }, false,  ]\n          [ 'employee/employee_$address',                                                    { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address',                                            { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address/address_$postcode',                          'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text',            'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text/text',       'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$city',                              'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text',                'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text/text',           'London',                                     true,   ]\n          [ 'employee/employee_$name',                                                       {},                                           false,  ]\n          [ 'employee/employee_$name/employee_$name_$firstname',                             undefined,                                    false,  ]\n          [ 'employee/employee_$name/employee_$name_$firstname/nonempty_text',               undefined,                                    false,  ]\n          [ 'employee/employee_$name/employee_$name_$firstname/nonempty_text/text',          undefined,                                    false,  ]\n          ]]\n        [[ mvp.employee, { address: { postcode: 'SE36', city: 'London' }, name: { firstname: 'Bob' } } ], [\n          [ 'employee',                                                                      { address: { postcode: 'SE36', city: 'London' }, name: { firstname: 'Bob' } }, false,  ]\n          [ 'employee/employee_$address',                                                    { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address',                                            { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address/address_$postcode',                          'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text',            'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text/text',       'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$city',                              'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text',                'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text/text',           'London',                                     true,   ]\n          [ 'employee/employee_$name',                                                       { firstname: 'Bob' },                         false,  ]\n          [ 'employee/employee_$name/employee_$name_$firstname',                             'Bob',                                        true,   ]\n          [ 'employee/employee_$name/employee_$name_$firstname/nonempty_text',               'Bob',                                        true,   ]\n          [ 'employee/employee_$name/employee_$name_$firstname/nonempty_text/text',          'Bob',                                        true,   ]\n          [ 'employee/employee_$name/employee_$name_$lastname',                              undefined,                                    false,  ]\n          [ 'employee/employee_$name/employee_$name_$lastname/nonempty_text',                undefined,                                    false,  ]\n          [ 'employee/employee_$name/employee_$name_$lastname/nonempty_text/text',           undefined,                                    false,  ]\n          ]]\n        [[ mvp.employee, { address: { postcode: 'SE36', city: 'London' }, name: { firstname: 'Bob', lastname: 'Miller' } } ], [\n          [ 'employee',                                                                      { address: { postcode: 'SE36', city: 'London' }, name: { firstname: 'Bob', lastname: 'Miller' } }, true,   ]\n          [ 'employee/employee_$address',                                                    { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address',                                            { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'employee/employee_$address/address/address_$postcode',                          'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text',            'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$postcode/nonempty_text/text',       'SE36',                                       true,   ]\n          [ 'employee/employee_$address/address/address_$city',                              'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text',                'London',                                     true,   ]\n          [ 'employee/employee_$address/address/address_$city/nonempty_text/text',           'London',                                     true,   ]\n          [ 'employee/employee_$name',                                                       { firstname: 'Bob', lastname: 'Miller' },     true,   ]\n          [ 'employee/employee_$name/employee_$name_$firstname',                             'Bob',                                        true,   ]\n          [ 'employee/employee_$name/employee_$name_$firstname/nonempty_text',               'Bob',                                        true,   ]\n          [ 'employee/employee_$name/employee_$name_$firstname/nonempty_text/text',          'Bob',                                        true,   ]\n          [ 'employee/employee_$name/employee_$name_$lastname',                              'Miller',                                     true,   ]\n          [ 'employee/employee_$name/employee_$name_$lastname/nonempty_text',                'Miller',                                     true,   ]\n          [ 'employee/employee_$name/employee_$name_$lastname/nonempty_text/text',           'Miller',                                     true,   ]\n          ]]\n        [[ ts1.person, { address: { postcode: 'SE36', city: 'London' }, name: { firstname: 'Bob', lastname: 'Miller' } } ], [\n          [ 'person',                                                                        { address: { postcode: 'SE36', city: 'London' }, name: { firstname: 'Bob', lastname: 'Miller' } }, true,   ]\n          [ 'person/person_$address',                                                        { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'person/person_$address/address',                                                { postcode: 'SE36', city: 'London' },         true,   ]\n          [ 'person/person_$address/address/address_$postcode',                              'SE36',                                       true,   ]\n          [ 'person/person_$address/address/address_$postcode/nonempty_text',                'SE36',                                       true,   ]\n          [ 'person/person_$address/address/address_$postcode/nonempty_text/text',           'SE36',                                       true,   ]\n          [ 'person/person_$address/address/address_$city',                                  'London',                                     true,   ]\n          [ 'person/person_$address/address/address_$city/nonempty_text',                    'London',                                     true,   ]\n          [ 'person/person_$address/address/address_$city/nonempty_text/text',               'London',                                     true,   ]\n          [ 'person/person_$name',                                                           { firstname: 'Bob', lastname: 'Miller' },     true,   ]\n          [ 'person/person_$name/name',                                                      { firstname: 'Bob', lastname: 'Miller' },     true,   ]\n          [ 'person/person_$name/name/name_$firstname',                                      'Bob',                                        true,   ]\n          [ 'person/person_$name/name/name_$firstname/nonempty_text',                        'Bob',                                        true,   ]\n          [ 'person/person_$name/name/name_$firstname/nonempty_text/text',                   'Bob',                                        true,   ]\n          [ 'person/person_$name/name/name_$lastname',                                       'Miller',                                     true,   ]\n          [ 'person/person_$name/name/name_$lastname/nonempty_text',                         'Miller',                                     true,   ]\n          [ 'person/person_$name/name/name_$lastname/nonempty_text/text',                    'Miller',                                     true,   ]\n          ]]\n        ]\n      #.....................................................................................................\n      fm = ( x, width = 0 ) -> ( ( rpr x ) + ',' ).padEnd width\n      for [ [ probe_type, probe_value, ], matcher, ] in probes_and_matchers\n        echo '[[', ( 'mvp.' + probe_type.$typename + ',' ), ( probe_value ), '], ['\n        records = types.evaluate probe_type, probe_value\n        for record, idx in records\n          @eq ( Ωit__85 = -> [ record.stack, record.value, record.verdict, ] ), matcher[ idx ]\n          echo '  [', ( fm record.stack, 80 ), ( fm record.value, 45 ), ( fm record.verdict, 7 ), ']'\n        echo '  ]]'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    typenames: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { flatly_1\n        flatly_2\n        ts1\n        mvp         } = get_typespaces()\n      #.....................................................................................................\n      urge 'Ωit__86', type for type of mvp\n      debug 'Ωit__87', type for type of ts1\n      debug 'Ωit__88', ts1.quantity_typs\n      # debug 'Ωit__89', types.create std.integer, 7\n      # debug 'Ωit__90', types.create std.integer, 7.8\n      # debug 'Ωit__91', types.create std.integer, '7'\n      # debug 'Ωit__92', types.create std.integer, '7.8'\n      #.....................................................................................................\n      return null\n\n\n\n  #=========================================================================================================\n  basics:\n\n    #-------------------------------------------------------------------------------------------------------\n    type_of: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      # { mvp         } = get_typespaces()\n      $isa = sample_declarations\n      #.....................................................................................................\n      @eq ( Ωit__93 = -> $isa.list Intertype.primitive_types        ), true\n      @eq ( Ωit__94 = -> Object.isFrozen Intertype.primitive_types  ), true\n      #.....................................................................................................\n      @eq ( Ωit__95 = -> Intertype.type_of null               ), 'null'\n      @eq ( Ωit__96 = -> Intertype.type_of undefined          ), 'undefined'\n      @eq ( Ωit__97 = -> Intertype.type_of +Infinity          ), 'infinity'\n      @eq ( Ωit__98 = -> Intertype.type_of -Infinity          ), 'infinity'\n      @eq ( Ωit__99 = -> Intertype.type_of true               ), 'boolean'\n      @eq ( Ωit_100 = -> Intertype.type_of false              ), 'boolean'\n      @eq ( Ωit_101 = -> Intertype.type_of NaN                ), 'nan'\n      @eq ( Ωit_102 = -> Intertype.type_of 6e78               ), 'float'\n      @eq ( Ωit_103 = -> Intertype.type_of 'wat'              ), 'text'\n      @eq ( Ωit_104 = -> Intertype.type_of []                 ), 'list'\n      @eq ( Ωit_105 = -> Intertype.type_of ( -> null )        ), 'function'\n      @eq ( Ωit_106 = -> Intertype.type_of ( -> await null )  ), 'asyncfunction'\n      @eq ( Ωit_107 = -> Intertype.type_of ( -> yield null )  ), 'generatorfunction'\n      @eq ( Ωit_108 = -> Intertype.type_of {}                 ), 'object'\n      @eq ( Ωit_109 = -> Intertype.type_of new Set()          ), 'set'\n      @eq ( Ωit_110 = -> Intertype.type_of new Map()          ), 'map'\n      @eq ( Ωit_111 = -> Intertype.type_of new WeakMap()      ), 'weakmap'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    types_of: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { mvp         } = get_typespaces()\n      $isa = sample_declarations\n      class Myclass\n      #.....................................................................................................\n      @eq ( Ωit_112 = -> types.types_of mvp, null               ), [ 'nothing', 'primitive', 'null', ]\n      @eq ( Ωit_113 = -> types.types_of mvp, undefined          ), [ 'nothing', 'primitive', 'undefined', ]\n      @eq ( Ωit_114 = -> types.types_of mvp, +Infinity          ), [ 'something', 'primitive', 'infinity', ]\n      @eq ( Ωit_115 = -> types.types_of mvp, -Infinity          ), [ 'something', 'primitive', 'infinity', ]\n      @eq ( Ωit_116 = -> types.types_of mvp, true               ), [ 'something', 'primitive', 'boolean', ]\n      @eq ( Ωit_117 = -> types.types_of mvp, false              ), [ 'something', 'primitive', 'boolean', ]\n      @eq ( Ωit_118 = -> types.types_of mvp, NaN                ), [ 'something', 'primitive', 'nan', ]\n      @eq ( Ωit_119 = -> types.types_of mvp, 6e78               ), [ 'something', 'primitive', 'integer', 'even', 'float', 'quantity_refs_$q', 'quantity_funs_$q' ]\n      @eq ( Ωit_120 = -> types.types_of mvp, 3                  ), [ 'something', 'primitive', 'integer', 'odd', 'float', 'strange', 'weird', 'abnormal', 'quantity_refs_$q', 'quantity_funs_$q' ]\n      @eq ( Ωit_121 = -> types.types_of mvp, 'wat'              ), [ 'something', 'primitive', 'text', 'nonempty_text', 'quantity_refs_$u', 'quantity_funs_$u', 'address_$postcode', 'address_$city', 'employee_$name_$firstname', 'employee_$name_$lastname' ]\n      @eq ( Ωit_122 = -> types.types_of mvp, ''                 ), [ 'something', 'primitive', 'text', 'empty_text', ]\n      @eq ( Ωit_123 = -> types.types_of mvp, []                 ), [ 'something', 'object', 'list', ]\n      @eq ( Ωit_124 = -> types.types_of mvp, ( -> null )        ), [ 'something', 'object', 'function', ]\n      @eq ( Ωit_125 = -> types.types_of mvp, ( -> await null )  ), [ 'something', 'object', 'asyncfunction', ]\n      @eq ( Ωit_126 = -> types.types_of mvp, ( -> yield null )  ), [ 'something', 'object', 'generatorfunction', ]\n      @eq ( Ωit_127 = -> types.types_of mvp, {}                 ), [ 'something', 'object', 'pod', ]\n      @eq ( Ωit_128 = -> types.types_of mvp, Object.create null ), [ 'something', 'object', 'pod', ]\n      @eq ( Ωit_129 = -> types.types_of mvp, new Myclass()      ), [ 'something', 'object', ]\n      @eq ( Ωit_130 = -> types.types_of mvp, new Set()          ), [ 'something', 'object', 'set', ]\n      @eq ( Ωit_131 = -> types.types_of mvp, new Map()          ), [ 'something', 'object', 'map', ]\n      @eq ( Ωit_132 = -> types.types_of mvp, new WeakMap()      ), [ 'something', 'object', 'weakmap', ]\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    $type_of_and_$isa: ->\n      { std\n        $isa\n        $type_of        } = require '../../../apps/intertype'\n      class A extends Object\n      #.....................................................................................................\n      @eq ( Ωit_133 = -> $type_of 'abc'                         ), 'text'\n      @eq ( Ωit_134 = -> $type_of ( -> )                        ), 'function'\n      @eq ( Ωit_135 = -> $type_of {}                            ), 'object'\n      @eq ( Ωit_136 = -> $isa.object {}                         ), true\n      @eq ( Ωit_137 = -> $isa.pod {}                            ), true\n      @eq ( Ωit_138 = -> $isa.pod ( Object.create null )        ), true\n      @eq ( Ωit_139 = -> $isa.function ( -> )                   ), true\n      @eq ( Ωit_140 = -> $isa.text 'abc'                        ), true\n      @eq ( Ωit_141 = -> $isa.nonempty_text 'abc'               ), true\n      @eq ( Ωit_142 = -> $type_of std.integer                   ), 'object'\n      @eq ( Ωit_143 = -> $isa.type std.integer                  ), true\n      @eq ( Ωit_144 = -> $isa.object new A()                    ), true\n      #.....................................................................................................\n      @eq ( Ωit_145 = -> $isa.nonempty_text ''                  ), false\n      @eq ( Ωit_146 = -> $isa.pod new A()                       ), false\n      @eq ( Ωit_147 = -> $isa.function ( -> yield 5 )           ), false\n      @eq ( Ωit_148 = -> $isa.function ( -> yield 5 )()         ), false\n      @eq ( Ωit_149 = -> $isa.function ( -> await 5 )           ), false\n      #.....................................................................................................\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create:\n\n    #-------------------------------------------------------------------------------------------------------\n    basics: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { mvp\n        ts1\n        cr1\n        crt             } = get_typespaces()\n      #.....................................................................................................\n      # debug 'Ωit_150', ts1\n      # debug 'Ωit_151', ( k for k of ts1 )\n      # echo()\n      # debug 'Ωit_152', ts1.quantity_typs_$q.fields\n      # debug 'Ωit_153', ts1.quantity_typs_$u.fields\n      # debug 'Ωit_154', ts1.quantity_typs.fields\n      # debug 'Ωit_155', ts1.name.fields\n      # debug 'Ωit_156', ts1.name_$firstname.fields\n      # debug 'Ωit_157', ts1.name_$lastname.fields\n      # echo()\n      # debug 'Ωit_158', ts1.quantity_typs_$q.template\n      # debug 'Ωit_159', ts1.quantity_typs_$u.template\n      # debug 'Ωit_160', ts1.quantity_typs.template\n      # debug 'Ωit_161', ts1.name.template\n      # debug 'Ωit_162', ts1.name_$firstname.template\n      # debug 'Ωit_163', ts1.name_$lastname.template\n      # process.exit 111\n      #.....................................................................................................\n      @eq     ( Ωit_164 = -> types.create cr1.int_create_zero                         ), 0\n      @eq     ( Ωit_165 = -> types.create cr1.int_create_zero_fn                      ), 0\n      @eq     ( Ωit_166 = -> types.create cr1.int_create_fn                           ), 0\n      @eq     ( Ωit_167 = -> types.create cr1.int_create_fn, 4                        ), 4\n      @eq     ( Ωit_168 = -> types.create cr1.int_create_fn, 4.9                      ), 4\n      @eq     ( Ωit_169 = -> types.create cr1.int_create_fn, '4'                      ), 4\n      @eq     ( Ωit_170 = -> types.create ts1.quantity_typs                           ), { q: 0, u: 'u' }\n      # @eq     ( Ωit_171 = -> types.create ts1.quantity_typs, { u: 's', }              ), { q: 0, u: 's' }\n      # @eq     ( Ωit_172 = -> types.create ts1.quantity_typs, { q: 3214, u: 'mm', }    ), { q: 3214, u: 'mm' }\n      # @eq     ( Ωit_173 = -> types.create ts1.quantity_typs, { q: 32.4, u: 'mm', }    ), { q: 32, u: 'mm' }\n      # @eq     ( Ωit_174 = -> types.create ts1.quantity_typs, { q: '3214', u: 'mm', }  ), { q: 3214, u: 'mm' }\n      @eq     ( Ωit_175 = -> types.create mvp.float                                   ), 0\n      @eq     ( Ωit_176 = -> types.create ts1.float_one                               ), 1\n      @eq     ( Ωit_177 = -> types.create ts1.quantity_typs_float_fb                  ), { q: 0, u: 'u' }\n      # @eq     ( Ωit_178 = -> types.create ts1.quantity_typs_float_fb, { u: 's', }              ), { q: 0, u: 's' }\n      # @eq     ( Ωit_179 = -> types.create ts1.quantity_typs_float_fb, { q: 3214, u: 'mm', }    ), { q: 3214, u: 'mm' }\n      # @eq     ( Ωit_180 = -> types.create ts1.quantity_typs_float_fb, { q: 32.4, u: 'mm', }    ), { q: 32, u: 'mm' }\n      # @eq     ( Ωit_181 = -> types.create ts1.quantity_typs_float_fb, { q: '3214', u: 'mm', }  ), { q: 3214, u: 'mm' }\n      #.....................................................................................................\n      @throws ( Ωit_182 = -> types.create cr1.unknown                       ), /expected an instance of Type, got a undefined/\n      @throws ( Ωit_183 = -> types.create cr1.int_no_create                 ), /condition cI/\n      @throws ( Ωit_184 = -> types.create cr1.int_create_zero, 4            ), /condition cH/\n      @throws ( Ωit_185 = -> types.create cr1.int_create_fn, '4.9'          ), /unable to create/\n      @throws ( Ωit_186 = -> types.create cr1.int_create_fn, 4, 6           ), /doesn't accept more than one argument/\n      #.....................................................................................................\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $kind:\n\n    #-------------------------------------------------------------------------------------------------------\n    vocabulary: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      { mvp\n        ts1\n        cr1\n        crt             } = get_typespaces()\n      #.....................................................................................................\n      do =>\n        declare_unknown_$kind = ->\n          ts = new Typespace\n            foo:\n              $kind: 'whatever'\n        @throws ( Ωit_187 = -> declare_unknown_$kind() ), /doesn't accept more than one argument/\n      #.....................................................................................................\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  type_instantiation:\n\n    #-------------------------------------------------------------------------------------------------------\n    $kind_and_members: ->\n      { Intertype\n        Type\n        Typespace\n        types           } = require '../../../apps/intertype'\n      #.....................................................................................................\n      keys = [\n        '$typespace',\n        '$members',\n        '$fields',\n        '$variants',\n        '$member_names',\n        '$field_names',\n        '$variant_names',\n        '$has_members',\n        '$has_fields',\n        '$has_variants',\n        '$kind',\n        '$isa',\n        ]\n      #.....................................................................................................\n      show_ts = ( ts, typename ) ->\n        debug 'Ωit_188', ( \"t:\".padEnd 20 ), ts[ typename ]\n        for key in keys\n          debug 'Ωit_189', ( GUY.fmt.format '>20s', \"t.#{key}:\" ), ts[ typename ][ key ]\n        return null\n      #.....................................................................................................\n      do =>\n        declaration =\n          t: ( x ) -> true\n        ts          = new Typespace declaration\n        @eq ( Ωit_190 = -> ts.t.$kind           ), '$unspecified'\n        @eq ( Ωit_191 = -> ts.t.$members        ), {}\n        @eq ( Ωit_192 = -> ts.t.$fields         ), {}\n        @eq ( Ωit_193 = -> ts.t.$variants       ), {}\n        @eq ( Ωit_194 = -> ts.t.$member_names   ), []\n        @eq ( Ωit_195 = -> ts.t.$field_names    ), []\n        @eq ( Ωit_196 = -> ts.t.$variant_names  ), []\n        # show_ts ts, 't'\n      #.....................................................................................................\n      do =>\n        declaration =\n          t: [ 1, 3, 5, ]\n        ts          = new Typespace declaration\n        @eq ( Ωit_197 = -> ts.t.$kind           ), '$enumeration'\n        @eq ( Ωit_198 = -> ts.t.$fields         ), {}\n        @eq ( Ωit_199 = -> ts.t.$variants       ), {}\n        @eq ( Ωit_200 = -> ts.t.$member_names   ), []\n        @eq ( Ωit_201 = -> ts.t.$field_names    ), []\n        @eq ( Ωit_202 = -> ts.t.$variant_names  ), []\n        # show_ts ts, 't'\n      #.....................................................................................................\n      do =>\n        declaration =\n          t:\n            $isa:   [ 1, 3, 5, ]\n            $kind:  '$record'\n        @throws ( Ωit_203 = -> new Typespace declaration ), /expected \\$kind to be '\\$enumeration', got '\\$record'/\n      #.....................................................................................................\n      do =>\n        declaration =\n          t:\n            field1:   ( x ) ->\n            field2:   ( x ) ->\n        ts          = new Typespace declaration\n        @eq ( Ωit_204 = -> ts.t.$kind           ), '$record'\n        @eq ( Ωit_205 = -> ts.t.$has_members    ), true\n        @eq ( Ωit_206 = -> ts.t.$has_fields     ), true\n        @eq ( Ωit_207 = -> ts.t.$has_variants   ), false\n        @eq ( Ωit_208 = -> Object.keys ts.t.$fields ), [ 'field1', 'field2', ]\n        @eq ( Ωit_209 = -> ts.t.$variants       ), {}\n        @eq ( Ωit_210 = -> ts.t.$member_names   ), [ 'field1', 'field2', ]\n        @eq ( Ωit_211 = -> ts.t.$field_names    ), [ 'field1', 'field2', ]\n        @eq ( Ωit_212 = -> ts.t.$variant_names  ), []\n        # show_ts ts, 't'\n      #.....................................................................................................\n      do =>\n        declaration =\n          t:\n            field1:   ( x ) ->\n            field2:   ( x ) ->\n            $kind:    '$record'\n        ts          = new Typespace declaration\n        @eq ( Ωit_213 = -> ts.t.$kind               ), '$record'\n        @eq ( Ωit_214 = -> ts.t.$has_members        ), true\n        @eq ( Ωit_215 = -> ts.t.$has_fields         ), true\n        @eq ( Ωit_216 = -> ts.t.$has_variants       ), false\n        @eq ( Ωit_217 = -> Object.keys ts.t.$fields ), [ 'field1', 'field2', ]\n        @eq ( Ωit_218 = -> ts.t.$variants           ), {}\n        @eq ( Ωit_219 = -> ts.t.$member_names       ), [ 'field1', 'field2', ]\n        @eq ( Ωit_220 = -> ts.t.$field_names        ), [ 'field1', 'field2', ]\n        @eq ( Ωit_221 = -> ts.t.$variant_names      ), []\n        # show_ts ts, 't'\n      #.....................................................................................................\n      do =>\n        declaration =\n          t:\n            $kind:    '$variant'\n            t1:       ( x ) ->\n            t2:       ( x ) ->\n        ts          = new Typespace declaration\n        @eq ( Ωit_222 = -> ts.t.$kind                 ), '$variant'\n        @eq ( Ωit_223 = -> ts.t.$has_members          ), true\n        @eq ( Ωit_224 = -> ts.t.$has_fields           ), false\n        @eq ( Ωit_225 = -> ts.t.$has_variants         ), true\n        @eq ( Ωit_226 = -> Object.keys ts.t.$variants ), [ 't1', 't2', ]\n        @eq ( Ωit_227 = -> ts.t.$fields               ), {}\n        @eq ( Ωit_228 = -> ts.t.$member_names         ), [ 't1', 't2', ]\n        @eq ( Ωit_229 = -> ts.t.$variant_names        ), [ 't1', 't2', ]\n        @eq ( Ωit_230 = -> ts.t.$field_names          ), []\n        show_ts ts, 't'\n      #.....................................................................................................\n      return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # @use_fields_to_declare_qualifiers()\n  # test @use_fields_to_declare_qualifiers\n  # TT = { interface: @intertype_tasks.interface, }\n  # ( new Test { throw_on_error: false, } ).test ( { Create_methods: @intertype_tasks.Create_methods, } )\n  # ( new Test { throw_on_error: false, } ).test ( { on_dotted_types: @intertype_tasks.Create_methods.on_dotted_types, } )\n  # ( new Test { throw_on_error: false, } ).test ( { kinds_and_roles: @intertype_tasks.kinds_and_roles, } )\n  # ( new Test { throw_on_error: false, } ).test {\n  #     on_dotted_types_1: @intertype_tasks.Create_methods.on_dotted_types_1\n  #     # on_dotted_types_2: @intertype_tasks.Create_methods.on_dotted_types_2\n  #     # on_dotted_types_3: @intertype_tasks.Create_methods.on_dotted_types_3\n  #     # on_dotted_types_4: @intertype_tasks.Create_methods.on_dotted_types_4\n  #     }\n  # ( new Test { throw_on_error: false, } ).test { can_create_types_with_templates_and_create: @intertype_tasks.can_create_types_with_templates_and_create, }\n  # ( new Test { throw_on_error: false, } ).test ( { Naming: @intertype_tasks.Naming, } )\n  # ( new Test { throw_on_error: false, } ).test ( { Regexes: @intertype_tasks.Regexes, } )\n  # ( new Test { throw_on_error: true, } ).test ( { demo_exception_with_lacking_stacktrace_1: @intertype_tasks.demo_exception_with_lacking_stacktrace_1, } )\n  # ( new Test { throw_on_error: true, } ).test ( { demo_exception_with_lacking_stacktrace_2: @intertype_tasks.demo_exception_with_lacking_stacktrace_2, } )\n  # await ( new Test { throw_on_error: true, } ).async_test { tasks: @tasks, }\n  # await ( new Test { throw_on_error: true, } ).async_test { can_use_values_of_unknown_type: @tasks.can_use_values_of_unknown_type, }\n  # demo_1()\n  # ( new Test { throw_on_error: true, } ).test @intertype_tasks\n  ( new Test { throw_on_error: true, } ).test { mvp_isa: @intertype_tasks.MVP.isa, }\n  # ( new Test { throw_on_error: true, } ).test { type_instantiation: @intertype_tasks.type_instantiation, }\n  # ( new Test { throw_on_error: true, } ).test { disallow_forward_refs: @intertype_tasks.MVP.disallow_forward_refs, }\n  # ( new Test { throw_on_error: false, } ).test { create: @intertype_tasks.create, }\n  # ( new Test { throw_on_error: false, } ).test { clone_fields_and_template: @intertype_tasks.create.clone_fields_and_template, }\n  # ( new Test { throw_on_error: false, } ).test { create: @intertype_tasks.create, }\n  # ( new Test { throw_on_error: false, } ).test { experiments: @intertype_tasks.experiments, }\n\n"
  ]
}