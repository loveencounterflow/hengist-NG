{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-all.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'diatrieb/test-all'\n{ rpr\n  inspect\n  echo\n  bold\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\ntypes                     = new ( require 'intertype' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n#===========================================================================================================\nrun_dlg1 = ( dlg = null ) ->\n  dlg ?= new ( require '../../../apps/diatribe' ).Interactive_dialog()\n  dlg.intro \"create-my-app\"\n  #.........................................................................................................\n  loop\n    if value = await dlg.confirm { ref: 'q1', message: \"do you want to loop?\", }\n      continue\n    break\n  await dlg.text { ref: 'q2', message: \"please enter text\", }\n  #.........................................................................................................\n  await do =>\n    cfg =\n      ref:        'q3'\n      message:    \"Pick a project type.\"\n      options: [\n        { value: 'ts',      label: 'TypeScript' },\n        { value: 'js',      label: 'JavaScript' },\n        { value: 'coffee',  label: 'CoffeeScript', hint: 'yes!' }, ]\n    project_type = await dlg.select cfg\n    return null\n  #.........................................................................................................\n  await do =>\n    # spinner = dlg.get_spinner()\n    # spinner.start \"asking questions\"\n    cfg =\n      ref:        null # intentionally left out\n      message:    \"Select additional tools.\"\n      options: [\n        { value: 'eslint',    label: 'ESLint', hint: 'recommended' },\n        { value: 'prettier',  label: 'Prettier' },\n        { value: 'gh-action', label: 'GitHub Action' }, ]\n      required: false\n    tools = await dlg.multiselect cfg\n    # spinner.stop \"thanks!\"\n    return null\n  #.........................................................................................................\n  dlg.outro \"You're all set!\"\n  dlg.finish()\n  #.........................................................................................................\n  return dlg\n\n#===========================================================================================================\ndemo_run_dlg1_interactive = ->\n  settings = await run_dlg1()\n  info 'Ω___1', settings\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_run_dlg1_programmatic = ->\n  { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n  exp_steps =\n    q1:         { modal: 'confirm',      answer: false,            }\n    q2:         { modal: 'text',         answer: \"helo\",           }\n    q3:         { modal: 'select',       answer: 'coffee',         }\n    $q4:        { modal: 'multiselect',  answer: [ 'prettier', ],  }\n    whatever:   { modal: 'select',       answer: 'js',             }\n  dlg = new Programmatic_dialog exp_steps\n  try\n    await run_dlg1 dlg\n  catch error\n    throw error unless error instanceof errors.Dialog_error\n    warn 'Ω___2', reverse bold error.message\n  for ref, step of dlg.act_steps\n    if step instanceof errors.Dialog_failure then warn ref, step\n    else                                          help ref, step\n  info dlg.results\n  return null\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@diatribe_tasks =\n\n  #---------------------------------------------------------------------------------------------------------\n  with_underrun_failure: ->\n    #.......................................................................................................\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    exp_steps = [\n      { exp_ref: 'q1',        exp_modal: 'confirm',      answer: false,            }\n      { exp_ref: 'q2',        exp_modal: 'text',         answer: \"helo\",           }\n      { exp_ref: 'q3',        exp_modal: 'select',       answer: 'coffee',         }\n      { exp_ref: '$q4',       exp_modal: 'multiselect',  answer: [ 'prettier', ],  }\n      { exp_ref: 'whatever',  exp_modal: 'select',       answer: 'js',             } ]\n    dlg = new Programmatic_dialog exp_steps\n    try\n      await run_dlg1 dlg\n    catch error\n      throw error unless error instanceof errors.Dialog_error\n      warn 'Ω___3', reverse bold error.message\n    #.......................................................................................................\n    @eq ( Ωit___4 = -> dlg.act_steps                                             ), { q1: 'confirm', q2: 'text', q3: 'select', '$q4': 'multiselect', '$finish': { message: 'finished too early: act 4 exp 5' } }\n    @eq ( Ωit___5 = -> dlg.act_steps.$finish instanceof errors.Underrun_failure  ), true\n    @eq ( Ωit___6 = -> dlg.results                                                ), { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  with_overrun_failure: ->\n    #.......................................................................................................\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    exp_steps = [\n      { exp_ref: 'q1',  exp_modal: 'confirm', answer: false,    }\n      { exp_ref: 'q2',  exp_modal: 'text',    answer: \"helo\",   }\n      { exp_ref: 'q3',  exp_modal: 'select',  answer: 'coffee', } ]\n    dlg = new Programmatic_dialog exp_steps\n    try\n      await run_dlg1 dlg\n    catch error\n      throw error unless error instanceof errors.Dialog_error\n      warn 'Ω___7', reverse bold error.message\n    #.......................................................................................................\n    @eq ( Ωit___8 = -> dlg.act_steps                                             ), { q1: 'confirm', q2: 'text', q3: 'select', '$q4': { message: 'emergency halt, running too long: act 4 exp 3' } }\n    @eq ( Ωit___9 = -> dlg.act_steps.$q4 instanceof errors.Overrun_failure       ), true\n    @eq ( Ωit__10 = -> dlg.results                                                ), { q1: false, q2: 'helo', q3: 'coffee', }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  without_failure: ->\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    #.......................................................................................................\n    run_dlg = ( dlg, act_steps, results ) =>\n      try await run_dlg1 dlg catch error\n        throw error unless error instanceof errors.Dialog_error\n        warn 'Ω__11', reverse bold error.message\n      info 'Ω__12', \"act_steps:  \", dlg.act_steps\n      urge 'Ω__13', \"results:     \", dlg.results\n      @eq ( Ωit__14 = -> dlg.act_steps ), act_steps\n      @eq ( Ωit__15 = -> dlg.results    ), results\n      return dlg\n    #.......................................................................................................\n    await do =>\n      exp_steps = [\n        { exp_ref: 'q1',      exp_modal: 'confirm',     answer: false,            }\n        { exp_ref: 'q2',      exp_modal: 'text',        answer: \"helo\",           }\n        { exp_ref: 'q3',      exp_modal: 'select',      answer: 'coffee',         }\n        { exp_ref: '$q4',     exp_modal: 'multiselect', answer: [ 'prettier', ],  } ]\n      dlg = await run_dlg                                                   \\\n        ( new Programmatic_dialog exp_steps ),                                  \\\n        { q1: 'confirm', q2: 'text', q3: 'select', '$q4': 'multiselect' },  \\\n        { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n      return null\n    #.......................................................................................................\n    await do =>\n      exp_steps = [\n        { exp_ref: 'q1',      exp_modal: 'confirm',      answer: false,           }\n        { exp_ref: 'q2',      exp_modal: 'text',         answer: \"helo\",          }\n        { exp_ref: 'q_wrong', exp_modal: 'select',       answer: 'coffee',        }\n        { exp_ref: '$q4',     exp_modal: 'multiselect',  answer: [ 'prettier', ], }\n        ]\n      dlg = await run_dlg                                                   \\\n        ( new Programmatic_dialog exp_steps ),                                  \\\n        { q1: 'confirm', q2: 'text', q3: { message: \"step#2: act 'q3', exp 'q_wrong'\" }, '$q4': 'multiselect' },  \\\n        { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n      @eq ( Ωit__17 = -> dlg.act_steps.q3 instanceof errors.Misstep_failure ), true\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  recognize_wrong_step: ->\n    #.......................................................................................................\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    exp_steps =\n      q1:         [ 'confirm',      false,            ]\n      q2:         [ 'text',         \"helo\",           ]\n      q3:         [ 'select',       'coffee',         ]\n      $q4:        [ 'multiselect',  [ 'prettier', ],  ]\n      # whatever:   [ 'select',       'js',         ]\n    dlg = new Programmatic_dialog exp_steps\n    await run_dlg1 dlg\n    #.......................................................................................................\n    @eq ( Ωit__18 = -> dlg.act_steps ), { q1: 'confirm', q2: 'text', q3: 'select', '$q4': 'multiselect' }\n    @eq ( Ωit__19 = -> dlg.results    ), { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await ( new Test { throw_on_error: true, } ).async_test {\n    # with_underrun_failure:  @diatribe_tasks.with_underrun_failure\n    # with_overrun_failure:   @diatribe_tasks.with_overrun_failure\n    without_failure:        @diatribe_tasks.without_failure\n    }\n  # await demo_run_dlg1_interactive()\n  # await demo_run_dlg1_programmatic()\n"
  ]
}