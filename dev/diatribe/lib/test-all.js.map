{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-all.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'diatribe/test-all'\n{ rpr\n  inspect\n  echo\n  bold\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\ntypes                     = new ( require 'intertype' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n#===========================================================================================================\nrun_dlg1 = ( dlg = null ) ->\n  dlg ?= new ( require '../../../apps/diatribe' ).Interactive_dialog()\n  dlg.intro \"create-my-app\"\n  #.........................................................................................................\n  loop\n    if value = await dlg.confirm { ref: 'q1', message: \"do you want to loop?\", }\n      continue\n    break\n  await dlg.text { ref: 'q2', message: \"please enter text\", }\n  #.........................................................................................................\n  await do =>\n    cfg =\n      ref:        'q3'\n      message:    \"Pick a project type.\"\n      options: [\n        { value: 'ts',      label: 'TypeScript' },\n        { value: 'js',      label: 'JavaScript' },\n        { value: 'coffee',  label: 'CoffeeScript', hint: 'yes!' }, ]\n    project_type = await dlg.select cfg\n    return null\n  #.........................................................................................................\n  await do =>\n    # spinner = dlg.get_spinner()\n    # spinner.start \"asking questions\"\n    cfg =\n      ref:        null # intentionally left out\n      message:    \"Select additional tools.\"\n      options: [\n        { value: 'eslint',    label: 'ESLint', hint: 'recommended' },\n        { value: 'prettier',  label: 'Prettier' },\n        { value: 'gh-action', label: 'GitHub Action' }, ]\n      required: false\n    tools = await dlg.multiselect cfg\n    # spinner.stop \"thanks!\"\n    return null\n  #.........................................................................................................\n  dlg.outro \"You're all set!\"\n  dlg.finish()\n  #.........................................................................................................\n  return dlg\n\n#===========================================================================================================\ndemo_run_dlg1_interactive = ->\n  settings = await run_dlg1()\n  info 'Ω___1', settings\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_run_dlg1_programmatic = ->\n  { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n  exp_steps =\n    q1:         { modal: 'confirm',      answer: false,            }\n    q2:         { modal: 'text',         answer: \"helo\",           }\n    q3:         { modal: 'select',       answer: 'coffee',         }\n    $q4:        { modal: 'multiselect',  answer: [ 'prettier', ],  }\n    whatever:   { modal: 'select',       answer: 'js',             }\n  dlg = new Programmatic_dialog exp_steps\n  try\n    await run_dlg1 dlg\n  catch error\n    throw error unless error instanceof errors.Dialog_error\n    warn 'Ω___2', reverse bold error.message\n  for ref, step of dlg.act_steps\n    if step instanceof errors.Dialog_failure then warn 'Ω___3', ref, step\n    else                                          help 'Ω___4', ref, step\n  info dlg.results\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_from_docs = ->\n  { Interactive_dialog\n    Programmatic_dialog } = require '../../../apps/diatribe'\n  run_my_dialog = ( dlg = null ) ->\n    # Provide default implementation if none given:\n    dlg        ?= new Interactive_dialog()\n    #.........................................................................................................\n    # Start running user interaction:\n    want_pizza  = await dlg.confirm { ref: 'want_pizza', message: \"Do you want pizza?\", }\n    #.........................................................................................................\n    # Depending on answer, decide what to do:\n    if want_pizza\n      console.log \"You want pizza. Good!\"\n      #.......................................................................................................\n      # If so inclined, we could perform some actions here that only take place when the answer was `Yes`; in\n      # this example, we only ask a conditional follow-up question for the toppings.\n      #.......................................................................................................\n      want_pineapple  = await dlg.confirm { ref: 'want_pineapple', message: \"Do you want pinapple?\", }\n    else\n      console.log \"Maybe next time.\"\n    #.........................................................................................................\n    # It is mandatory to call `dlg.finish()` to signal completion:\n    dlg.finish()\n    #.........................................................................................................\n    # Return what is most useful to you:\n    return dlg\n  #---------------------------------------------------------------------------------------------------------\n  # urge 'Ω___5', await run_my_dialog()\n  await do =>\n    whisper 'Ω___6', '————————————————————————————————————————'\n    exp_steps = [\n      { ref: 'want_pizza', modal: 'confirm', answer: false, } ]\n    info 'Ω___7', \"exp_step\", step for step in exp_steps\n    dlg = await run_my_dialog new Programmatic_dialog exp_steps\n    help 'Ω___8', \"act_steps\", dlg.act_steps\n    help 'Ω___9', \"act_step\", step for step in dlg.act_steps\n    return null\n  #.........................................................................................................\n  await do =>\n    whisper 'Ω__10', '————————————————————————————————————————'\n    try\n      exp_steps = [\n        { ref: 'want_pizza', modal: 'confirm', answer: true, } ]\n      info 'Ω__11', \"exp_step\", step for step in exp_steps\n      dlg = await run_my_dialog new Programmatic_dialog exp_steps\n    catch error\n      warn 'Ω__12', error.message\n    return null\n  #.........................................................................................................\n  await do =>\n    whisper 'Ω__13', '————————————————————————————————————————'\n    exp_steps = [\n      { ref: 'want_pizza',      modal: 'confirm', answer: true, }\n      { ref: 'want_pineapple',  modal: 'confirm', answer: false, } ]\n    info 'Ω__14', \"exp_step\", step for step in exp_steps\n    dlg = await run_my_dialog new Programmatic_dialog exp_steps\n    help 'Ω__15', \"act_steps\", dlg.act_steps\n    help 'Ω__16', \"act_step\", step for step in dlg.act_steps\n    return null\n  #.........................................................................................................\n  await do =>\n    whisper 'Ω__17', '————————————————————————————————————————'\n    exp_steps = [\n      { ref: 'want_pizza',      modal: 'confirm', answer: false, }\n      { ref: 'want_pineapple',  modal: 'confirm', answer: false, } ]\n    info 'Ω__18', \"exp_step\", step for step in exp_steps\n    dlg = await run_my_dialog new Programmatic_dialog exp_steps\n    help 'Ω__19', \"act_step\", step for step in dlg.act_steps\n    return null\n  #.........................................................................................................\n  return null\n\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@diatribe_tasks =\n\n  #---------------------------------------------------------------------------------------------------------\n  with_underrun_failure: ->\n    #.......................................................................................................\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    exp_steps = [\n      { ref: 'q1',        modal: 'confirm',      answer: false,            }\n      { ref: 'q2',        modal: 'text',         answer: \"helo\",           }\n      { ref: 'q3',        modal: 'select',       answer: 'coffee',         }\n      { ref: '$q4',       modal: 'multiselect',  answer: [ 'prettier', ],  }\n      { ref: 'whatever',  modal: 'select',       answer: 'js',             } ]\n    act_steps = [\n      { ref: 'q1',  modal: 'confirm',     answer: false },\n      { ref: 'q2',  modal: 'text',        answer: 'helo' },\n      { ref: 'q3',  modal: 'select',      answer: 'coffee' },\n      { ref: '$q4', modal: 'multiselect', answer: [ 'prettier' ] },\n      { message: 'finished too early: act 4 exp 5' } ] ### Underrun_failure ###\n    #.......................................................................................................\n    dlg = new Programmatic_dialog exp_steps\n    try\n      await run_dlg1 dlg\n    catch error\n      throw error unless error instanceof errors.Dialog_error\n      warn 'Ω__20', reverse bold error.message\n    #.......................................................................................................\n    @eq ( Ω__21 = -> dlg.act_steps                                             ), act_steps\n    @eq ( Ω__22 = -> dlg.act_steps[ 4 ] instanceof errors.Underrun_failure  ), true\n    @eq ( Ω__23 = -> dlg.results                                                ), { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  with_overrun_failure: ->\n    #.......................................................................................................\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    exp_steps = [\n      { ref: 'q1',  modal: 'confirm', answer: false,    }\n      { ref: 'q2',  modal: 'text',    answer: \"helo\",   }\n      { ref: 'q3',  modal: 'select',  answer: 'coffee', } ]\n    act_steps = [\n      { ref: 'q1', modal: 'confirm', answer: false },\n      { ref: 'q2', modal: 'text', answer: 'helo' },\n      { ref: 'q3', modal: 'select', answer: 'coffee' },\n      { message: 'emergency halt, running too long: act 4 exp 3' } ] ### Overrun_failure ###\n    #.......................................................................................................\n    dlg = new Programmatic_dialog exp_steps\n    try\n      await run_dlg1 dlg\n    catch error\n      throw error unless error instanceof errors.Dialog_error\n      warn 'Ω__24', reverse bold error.message\n    #.......................................................................................................\n    @eq ( Ω__25 = -> dlg.act_steps                                             ), act_steps\n    @eq ( Ω__26 = -> dlg.act_steps[ 3 ] instanceof errors.Overrun_failure       ), true\n    @eq ( Ω__27 = -> dlg.results                                                ), { q1: false, q2: 'helo', q3: 'coffee', }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  without_failure: ->\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    #.......................................................................................................\n    run_dlg = ( dlg, act_steps, results ) =>\n      try await run_dlg1 dlg catch error\n        throw error unless error instanceof errors.Dialog_error\n        warn 'Ω__28', reverse bold error.message\n      info 'Ω__29', \"act_steps:  \", dlg.act_steps\n      urge 'Ω__30', \"results:     \", dlg.results\n      @eq ( Ω__31 = -> dlg.act_steps ), act_steps\n      @eq ( Ω__32 = -> dlg.results    ), results\n      return dlg\n    #.......................................................................................................\n    await do =>\n      exp_steps = [\n        { ref: 'q1',      modal: 'confirm',     answer: false,            }\n        { ref: 'q2',      modal: 'text',        answer: \"helo\",           }\n        { ref: 'q3',      modal: 'select',      answer: 'coffee',         }\n        { ref: '$q4',     modal: 'multiselect', answer: [ 'prettier', ],  } ]\n      act_steps = exp_steps\n      dlg = await run_dlg                                                   \\\n        ( new Programmatic_dialog exp_steps ),                                  \\\n        act_steps,  \\\n        { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n      return null\n    #.......................................................................................................\n    await do =>\n      exp_steps = [\n        { ref: 'q1',      modal: 'confirm',      answer: false,           }\n        { ref: 'q2',      modal: 'text',         answer: \"helo\",          }\n        { ref: 'q_wrong', modal: 'select',       answer: 'coffee',        }\n        { ref: '$q4',     modal: 'multiselect',  answer: [ 'prettier', ], }\n        ]\n      act_steps = [\n        { ref: 'q1', modal: 'confirm', answer: false },\n        { ref: 'q2', modal: 'text', answer: 'helo' },\n        { message: \"step#2: act 'q3', exp 'q_wrong'\" }, ### Misstep_failure ###\n        { ref: '$q4', modal: 'multiselect', answer: [ 'prettier' ] } ]\n      dlg = await run_dlg                                                   \\\n        ( new Programmatic_dialog exp_steps ),                                  \\\n        act_steps,  \\\n        { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n      @eq ( Ω__33 = -> dlg.act_steps[ 2 ] instanceof errors.Misstep_failure ), true\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  recognize_wrong_step: ->\n    #.......................................................................................................\n    { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n    exp_steps = [\n      { ref: 'q1',    modal: 'confirm',      answer: false,            }\n      { ref: 'q2',    modal: 'text',         answer: \"helo\",           }\n      { ref: 'wrong', modal: 'select',       answer: 'coffee',         }\n      { ref: '$q4',   modal: 'multiselect',  answer: [ 'prettier', ],  }\n      ]\n    act_steps = [\n      { ref: 'q1', modal: 'confirm', answer: false },\n      { ref: 'q2', modal: 'text', answer: 'helo' },\n      { message: \"step#2: act 'q3', exp 'wrong'\" }, ### Misstep_failure ###\n      { ref: '$q4', modal: 'multiselect', answer: [ 'prettier' ] } ]\n    #.......................................................................................................\n    dlg = new Programmatic_dialog exp_steps\n    await run_dlg1 dlg\n    #.......................................................................................................\n    @eq ( Ω__34 = -> dlg.act_steps ), act_steps\n    @eq ( Ω__35 = -> dlg.act_steps[ 2 ] instanceof errors.Misstep_failure ), true\n    @eq ( Ω__36 = -> dlg.results    ), { q1: false, q2: 'helo', q3: 'coffee', '$q4': [ 'prettier' ] }\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  await ( new Test { throw_on_error: true, } ).async_test {\n    # with_underrun_failure:  @diatribe_tasks.with_underrun_failure\n    # with_overrun_failure:   @diatribe_tasks.with_overrun_failure\n    without_failure:        @diatribe_tasks.without_failure\n    }\n  # await demo_run_dlg1_interactive()\n  whisper 'Ω__37', '————————————————————————————————————————'\n  await ( new Test { throw_on_error: true, } ).async_test @diatribe_tasks\n  whisper 'Ω__38', '————————————————————————————————————————'\n  # await demo_run_dlg1_programmatic()\n  await demo_from_docs()\n  return null"
  ]
}