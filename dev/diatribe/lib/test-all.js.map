{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-all.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'diatrieb/test-all'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\ntypes                     = new ( require 'intertype' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n\n#===========================================================================================================\nrun_dlg1 = ( dlg = null ) ->\n  dlg ?= new ( require '../../../apps/diatribe' ).Interactive_dialog()\n  dlg.intro \"create-my-app\"\n  #.........................................................................................................\n  loop\n    if value = await dlg.confirm { ref: 'q1', message: \"do you want to loop?\", }\n      continue\n    break\n  await dlg.text { ref: 'q2', message: \"please enter text\", }\n  #.........................................................................................................\n  await do =>\n    cfg =\n      ref:        'q3'\n      message:    \"Pick a project type.\"\n      options: [\n        { value: 'ts',      label: 'TypeScript' },\n        { value: 'js',      label: 'JavaScript' },\n        { value: 'coffee',  label: 'CoffeeScript', hint: 'yes!' }, ]\n    project_type = await dlg.select cfg\n    return null\n  #.........................................................................................................\n  await do =>\n    # spinner = dlg.get_spinner()\n    # spinner.start \"asking questions\"\n    cfg =\n      ref:        null # intentionally left out\n      message:    \"Select additional tools.\"\n      options: [\n        { value: 'eslint',    label: 'ESLint', hint: 'recommended' },\n        { value: 'prettier',  label: 'Prettier' },\n        { value: 'gh-action', label: 'GitHub Action' }, ]\n      required: false\n    tools = await dlg.multiselect cfg\n    # spinner.stop \"thanks!\"\n    return null\n  #.........................................................................................................\n  dlg.outro \"You're all set!\"\n  #.........................................................................................................\n  return dlg.results\n\n#===========================================================================================================\ndemo_run_dlg1_interactive = ->\n  settings = await run_dlg1()\n  info 'Ω___1', settings\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_run_dlg1_programmatic = ->\n  { Programmatic_dialog, errors, } = require '../../../apps/diatribe'\n  steps =\n    q1:         [ 'confirm',      false,            ]\n    q2:         [ 'text',         \"helo\",           ]\n    q3:         [ 'select',       'coffee',         ]\n    $q4:        [ 'multiselect',  [ 'prettier', ],  ]\n    whatever:   [ 'select',       'js',         ]\n  dlg = new Programmatic_dialog steps\n  try\n    await run_dlg1 dlg\n  catch error\n    throw error unless error instanceof errors.Dialog_error\n    warn 'Ω___2', reverse bold error.message\n  dlg.finish()\n  for ref, step of dlg._act_steps\n    if step instanceof errors.Dialog_failure then warn ref, step\n    else                                          help ref, step\n  info dlg.results\n  return null\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@diatribe_tasks =\n\n  #---------------------------------------------------------------------------------------------------------\n  interface: ->\n    DIATRIBE     = require '../../../apps/diatribe'\n    @eq ( Ωit___3 = -> true ), true\n    #.......................................................................................................\n    return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  ( new Test { throw_on_error: false, } ).test @diatribe_tasks\n  await demo_run_dlg1_interactive()\n  await demo_run_dlg1_programmatic()\n"
  ]
}