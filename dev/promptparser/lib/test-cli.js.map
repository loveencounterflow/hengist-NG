{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-cli.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,EACE,KADF,EAEE,IAFF,EAGE,IAHF,EAIE,KAJF,EAKE,MALF,EAME,IANF,EAOE,IAPF,EAQE,OARF,CAAA,GAQ4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,uBAApB,CAR5B;;EASA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,OAHF,EAIE,GAJF,CAAA,GAI4B,GAAG,CAAC,GAJhC;;EAKA,IAAA,GAA4B,OAAA,CAAQ,sBAAR,EAlB5B;;;EAoBA,IAAA,GAA4B,OAAA,CAAQ,2BAAR;;EAC5B,CAAA,CAAE,IAAF,CAAA,GAA4B,IAA5B;;EACA,IAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,SAAR,EAvB5B;;;;;EA2BA,CAAA,CAAE,GAAF,EACE,OADF,CAAA,GAC4B,OAAA,CAAQ,WAAR,CAD5B,EA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+EA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAA+B,MAAS,CAAA,CAAA,CAAA,GAAA;AACxC,UAAA,GAAA,EAAA,OAAA,EAAA;MAAE,IAAA,CAAK,OAAL,EAAc,IAAI,IAAI,CAAC,SAAT,CAAA,CAAoB,CAAC,OAArB,CAA6B,SAA7B,CAAd;AACA;AAAA;MAAA,KAAA,cAAA;qBAAA,IAAA,CAAK,OAAL,EAAgB,GAAA,CAAI,OAAJ,CAAhB;MAAA,CAAA;;IAFsC,CAAA,IAAxC;;;EA/EA;;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/test-cli'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\n# TMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n{ isa\n  type_of }               = require 'intertype'\n\n\n# #===========================================================================================================\n# class Promptparser_cli extends Cli\n\n#   #---------------------------------------------------------------------------------------------------------\n#   jobdef:\n#     exit_on_error:  false\n#     commands:\n#       foo:      null\n#       do_this:  null\n#       refresh:\n#         allow_extra:    false\n#         flags:\n#           # $name:\n#           #   type:           function\n#           #   alias:          text\n#           #   description:    text\n#           #   multiple:       [ null, false, 'greedy', 'lazy', ]\n#           #   positional:     boolean\n#           #   fallback:       anything\n#           max_count:\n#             type:           return_error 'max_count', types.create.cli_max_count.bind types.create\n#             # alias:          # text\n#             description:    \"processing will be short-cut after this many prompts\"\n#             multiple:       false # [ null, false, 'greedy', 'lazy', ]\n#             positional:     false # boolean\n#             # fallback:       # anything\n#           foo:\n#             alias:          'f'\n#             type:           return_error 'foo', types.create.cli_foo.bind types.create\n#             description:    \"sample\"\n#             fallback:       1\n\n#   #---------------------------------------------------------------------------------------------------------\n#   cmd_do_this: -> help 'Ω___1', \"cmd_do_this\", @verdict\n#   cmd_foo:     -> help 'Ω___2', \"cmd_foo\",     @verdict\n#   cmd_refresh: -> help 'Ω___3', \"cmd_refresh\", @verdict\n\n# #===========================================================================================================\n# demo_cli_arguments = ->\n#   cli = new Promptparser_cli process.argv\n#   #.........................................................................................................\n#   # debug 'Ω___4', cli.verdict\n#   # debug 'Ω___5', rpr cli.verdict.cmd\n#   # debug 'Ω___6', rpr cli.verdict.parameters.max_count\n#   # debug 'Ω___7', rpr cli.verdict.parameters.foo\n#   return null\n\n#===========================================================================================================\nif module is require.main then await do =>\n  help 'Ω___8', new Intl.Segmenter().segment '👩🏻‍🏫'\n  help 'Ω___8', ( rpr segment ) for segment from new Intl.Segmenter().segment 'abc👩🏻‍🏫def'\n#   t = new Test { throw_on_error: false, }\n#   t = new Test { throw_on_error: true, }\n#   t.test { promptparser_tasks, }\n#   # t.test { t: promptparser_tasks.single_prompt_parsing.parse_all_records, }\n\n"
  ]
}