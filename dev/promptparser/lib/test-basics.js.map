{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\n# TMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n{ isa\n  type_of }               = require 'intertype'\n\n\n# #===========================================================================================================\n# cfg = do ->\n#   db_folder_path            = PATH.resolve  __dirname,                '/dev/shm'\n#   db_file_path              = PATH.join     db_folder_path,           'prompts-and-generations.bd6ef2fc-3d7c-4e3e-9e41-76712e65cede.sqlite'\n#   assets_folder_path        = PATH.resolve  __dirname,                '../../../assets'\n#   promptparser_folder_path  = PATH.join     assets_folder_path,       'promptparser'\n#   short_prompts_file_path   = PATH.join     promptparser_folder_path, 'short-prompts.md'\n#   { assets_folder_path, promptparser_folder_path, short_prompts_file_path, db_folder_path, db_file_path, }\n\n\n#===========================================================================================================\n### TAINT consider to make test preparation a feature of `guy-test` ###\nprepare_task = ( cfg = null ) ->\n  cfg ?= get_journal_walker_cfg()\n  whisper GUY.trm.plum \"Ω___1 prepare_task / try to remove DB file:\", H.try_to_remove_file cfg.flags.db\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nget_journal_walker_cfg = ->\n  cmd             = 'build'\n  flags           =\n    match:      /(?:)/,\n    trash_db:   true,\n    # sample:     0.05,\n    # sample:     0.1,\n    sample:     1,\n    # max_count:  20,\n    max_count:  Infinity,\n    prompts:    '../../jzr/to-be-merged-from-Atlas/prompts-consolidated.md'\n    images:     '../../Downloads/b-from-downloader'\n    seed:       1,\n    pre_match:  /^\\[.*?\\].*?\\S+/,\n    db:         '/dev/shm/promptparser.sqlite'\n  return { cmd, flags, }\n\n\n#===========================================================================================================\n### TAINT relocate these methods to `guy-test` ###\nH =\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_stats: ( path ) ->\n    try ( R = FS.statSync path ) catch error\n      return null if error.code is 'ENOENT'\n      throw error\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  file_exists: ( path ) ->\n    return false unless ( stats = @_get_stats path )?\n    return stats.isFile()\n\n  #---------------------------------------------------------------------------------------------------------\n  folder_exists: ( path ) ->\n    return false unless ( stats = @_get_stats path )?\n    return stats.isDirectory()\n\n  #---------------------------------------------------------------------------------------------------------\n  try_to_remove_file: ( path ) ->\n    try FS.unlinkSync path catch error\n      return 0 if error.code is 'ENOENT'\n      throw error\n    return 1\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @resolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @copy_over = ( from_path, to_path ) ->\n  #   @try_to_remove_file to_path unless to_path in [ ':memory:', '', ]\n  #   await FSP.copyFile from_path, to_path\n  #   return null\n\n\n#===========================================================================================================\npromptparser_tasks =\n\n  # #---------------------------------------------------------------------------------------------------------\n  # fundamentals:\n\n    # #-------------------------------------------------------------------------------------------------------\n    # can_find_source_locations_and_files: ->\n    #   prepare_task()\n    #   @eq ( assets_folder       = -> H.folder_exists  cfg.assets_folder_path        ), true\n    #   @eq ( promptparser_folder = -> H.folder_exists  cfg.promptparser_folder_path  ), true\n    #   @eq ( prompts_file        = -> H.file_exists    cfg.short_prompts_file_path   ), true\n    #   @eq ( db_folder           = -> H.folder_exists  cfg.db_folder_path            ), true\n    #   return null\n\n\n    # #-------------------------------------------------------------------------------------------------------\n    # cannot_use_wrong_path: ->\n    #   # prepare_task()\n    #   { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n    #   use_wrong_paths = ->\n    #     cfg               = get_journal_walker_cfg()\n    #     cfg.flags.db      = '/non-existing/path/db'\n    #     cfg.flags.prompts = '/non-existing/path/prompts'\n    #     jw                = new _Journal_walker_for_testing cfg\n    #     return null\n    #   @throws ( Ω___3 = -> use_wrong_paths() ), /Cannot open database because the directory does not exist/\n    #   return null\n\n    # #-------------------------------------------------------------------------------------------------------\n    # can_omit_prompt_file_path: ->\n    #   prepare_task()\n    #   { Prompt_file_reader } = require '../../../apps/promptparser'\n    #   db = new Prompt_file_reader cfg.db_file_path, null\n    #   @eq ( Ω___4 = -> db instanceof Prompt_file_reader ), true\n    #   @eq ( Ω___5 = -> isa.object db.cfg                ), true\n    #   @eq ( Ω___6 = -> db.cfg.db_path                   ), cfg.db_file_path\n    #   @eq ( Ω___7 = -> db.cfg.datasource_path           ), null\n    #   @eq ( Ω___8 = -> db.cfg.has_db_path               ), true\n    #   @eq ( Ω___9 = -> db.cfg.has_datasource_path       ), false\n    #   return null\n\n  #---------------------------------------------------------------------------------------------------------\n  single_prompt_parsing:\n\n    #-------------------------------------------------------------------------------------------------------\n    interface: ->\n      prepare_task()\n      #.....................................................................................................\n      { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n      jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n      #.....................................................................................................\n      @eq ( Ω__10 = -> jw.types.type_of jw.parse_first_tokens                 ), 'function'\n      @eq ( Ω__11 = -> jw.types.type_of jw.parse_all_tokens                   ), 'function'\n      @eq ( Ω__12 = -> jw.types.type_of jw.parse_first_records                ), 'function'\n      @eq ( Ω__13 = -> jw.types.type_of jw.parse_all_records                  ), 'function'\n      @eq ( Ω__14 = -> jw.types.type_of jw.parse_first_tokens   '[s432] helo' ), 'list'\n      @eq ( Ω__15 = -> jw.types.type_of jw.parse_all_tokens     '[s432] helo' ), 'list'\n      @eq ( Ω__16 = -> jw.types.type_of jw.parse_first_records  '[s432] helo' ), 'list'\n      @eq ( Ω__17 = -> jw.types.type_of jw.parse_all_records    '[s432] helo' ), 'list'\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_all_records: ->\n      prepare_task()\n      { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n      jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n      #.....................................................................................................\n      result  = jw.parse_all_records '[s432] helo\\n[1] world\\n\\n'\n      matcher = [\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_prompts', fields: { prompt_id: 'c6efaf27673db4f7', lnr: 1, comment: null, rejected: false } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'all_prompts', fields: { prompt_id: 'c6efaf27673db4f7', prompt: 'helo' } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_generations', fields: { prompt_id: 'c6efaf27673db4f7', nr: 1, count: 4 } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_generations', fields: { prompt_id: 'c6efaf27673db4f7', nr: 2, count: 3 } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_generations', fields: { prompt_id: 'c6efaf27673db4f7', nr: 3, count: 2 } },\n        { '$key': 'record', prompt_id: '7c211433f0207159', table: 'jnl_prompts', fields: { prompt_id: '7c211433f0207159', lnr: 2, comment: null, rejected: false } },\n        { '$key': 'record', prompt_id: '7c211433f0207159', table: 'all_prompts', fields: { prompt_id: '7c211433f0207159', prompt: 'world' } },\n        { '$key': 'record', prompt_id: '7c211433f0207159', table: 'jnl_generations', fields: { prompt_id: '7c211433f0207159', nr: 1, count: 1 } },\n        { '$key': 'record', prompt_id: 'da39a3ee5e6b4b0d', table: 'jnl_prompts', fields: { prompt_id: 'da39a3ee5e6b4b0d', lnr: 2, comment: null, rejected: false } },\n        { '$key': 'record', prompt_id: 'da39a3ee5e6b4b0d', table: 'all_prompts', fields: { prompt_id: 'da39a3ee5e6b4b0d', prompt: '' } },\n        { '$key': 'record', prompt_id: 'da39a3ee5e6b4b0d', table: 'jnl_prompts', fields: { prompt_id: 'da39a3ee5e6b4b0d', lnr: 2, comment: null, rejected: false } } ]\n      @eq ( Ω__18 = -> result ), matcher\n      #.....................................................................................................\n      whisper 'Ω__19', '————————————————————————————————————————'\n      whisper 'Ω__20', record for record from result\n      whisper 'Ω__21', '————————————————————————————————————————'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_first_records: ->\n      prepare_task()\n      { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n      jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n      #.....................................................................................................\n      result  = jw.parse_first_records '[s432] helo\\n[1] world\\n\\n'\n      urge 'Ω__22', result\n      matcher = [\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_prompts', fields: { prompt_id: 'c6efaf27673db4f7', lnr: 1, comment: null, rejected: false } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'all_prompts', fields: { prompt_id: 'c6efaf27673db4f7', prompt: 'helo' } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_generations', fields: { prompt_id: 'c6efaf27673db4f7', nr: 1, count: 4 } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_generations', fields: { prompt_id: 'c6efaf27673db4f7', nr: 2, count: 3 } },\n        { '$key': 'record', prompt_id: 'c6efaf27673db4f7', table: 'jnl_generations', fields: { prompt_id: 'c6efaf27673db4f7', nr: 3, count: 2 } } ]\n      @eq ( Ω__23 = -> result ), matcher\n      #.....................................................................................................\n      whisper 'Ω__24', '————————————————————————————————————————'\n      whisper 'Ω__25', record for record from result\n      whisper 'Ω__26', '————————————————————————————————————————'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_all_tokens: ->\n      prepare_task()\n      { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n      jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n      #.....................................................................................................\n      result  = jw.parse_all_tokens '\\n[s432] helo\\n[1] world\\n\\n'\n      matcher = [\n        { '$key': 'marks:marksleft',  jump: 'marks', value: '[',      lnr1: 2, x1: 0, lnr2: 2, x2: 1,  data: null, source: '[s432] helo' },\n        { '$key': 'marks:format',     jump: null,    value: 's',      lnr1: 2, x1: 1, lnr2: 2, x2: 2,  data: null, source: '[s432] helo' },\n        { '$key': 'marks:generation', jump: null,    value: '4',      lnr1: 2, x1: 2, lnr2: 2, x2: 3,  data: null, source: '[s432] helo' },\n        { '$key': 'marks:generation', jump: null,    value: '3',      lnr1: 2, x1: 3, lnr2: 2, x2: 4,  data: null, source: '[s432] helo' },\n        { '$key': 'marks:generation', jump: null,    value: '2',      lnr1: 2, x1: 4, lnr2: 2, x2: 5,  data: null, source: '[s432] helo' },\n        { '$key': 'marks:marksright', jump: 'plain', value: ']',      lnr1: 2, x1: 5, lnr2: 2, x2: 6,  data: null, source: '[s432] helo' },\n        { '$key': 'plain:prompt',     jump: null,    value: ' helo',  lnr1: 2, x1: 6, lnr2: 2, x2: 11, data: null, source: '[s432] helo' }\n        { '$key': 'marks:marksleft',  jump: 'marks', value: '[',      lnr1: 3, x1: 0, lnr2: 3, x2: 1,  data: null, source: '[1] world' },\n        { '$key': 'marks:generation', jump: null,    value: '1',      lnr1: 3, x1: 1, lnr2: 3, x2: 2,  data: null, source: '[1] world' },\n        { '$key': 'marks:marksright', jump: 'plain', value: ']',      lnr1: 3, x1: 2, lnr2: 3, x2: 3,  data: null, source: '[1] world' },\n        { '$key': 'plain:prompt',     jump: null,    value: ' world', lnr1: 3, x1: 3, lnr2: 3, x2: 9,  data: null, source: '[1] world' },\n        ]\n      @eq ( Ω__27 = -> result ), matcher\n      #.....................................................................................................\n      whisper 'Ω__28', '————————————————————————————————————————'\n      whisper 'Ω__29', token for token from result\n      whisper 'Ω__30', '————————————————————————————————————————'\n      #.....................................................................................................\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    parse_first_tokens: ->\n      prepare_task()\n      { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n      jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n      #.....................................................................................................\n      result  = jw.parse_first_tokens '\\n[s432] helo\\n[1] world\\n\\n'\n      urge 'Ω__31', result\n      @eq ( Ω__32 = -> result[ 0 ] ), { '$key': 'marks:marksleft',  jump: 'marks', value: '[',     lnr1: 2, x1: 0, lnr2: 2, x2: 1,  data: null, source: '[s432] helo' }\n      @eq ( Ω__33 = -> result[ 1 ] ), { '$key': 'marks:format',     jump: null,    value: 's',     lnr1: 2, x1: 1, lnr2: 2, x2: 2,  data: null, source: '[s432] helo' }\n      @eq ( Ω__34 = -> result[ 2 ] ), { '$key': 'marks:generation', jump: null,    value: '4',     lnr1: 2, x1: 2, lnr2: 2, x2: 3,  data: null, source: '[s432] helo' }\n      @eq ( Ω__35 = -> result[ 3 ] ), { '$key': 'marks:generation', jump: null,    value: '3',     lnr1: 2, x1: 3, lnr2: 2, x2: 4,  data: null, source: '[s432] helo' }\n      @eq ( Ω__36 = -> result[ 4 ] ), { '$key': 'marks:generation', jump: null,    value: '2',     lnr1: 2, x1: 4, lnr2: 2, x2: 5,  data: null, source: '[s432] helo' }\n      @eq ( Ω__37 = -> result[ 5 ] ), { '$key': 'marks:marksright', jump: 'plain', value: ']',     lnr1: 2, x1: 5, lnr2: 2, x2: 6,  data: null, source: '[s432] helo' }\n      @eq ( Ω__38 = -> result[ 6 ] ), { '$key': 'plain:prompt',     jump: null,    value: ' helo', lnr1: 2, x1: 6, lnr2: 2, x2: 11, data: null, source: '[s432] helo' }\n      #.....................................................................................................\n      whisper 'Ω__39', '————————————————————————————————————————'\n      whisper 'Ω__40', token for token from result\n      whisper 'Ω__41', '————————————————————————————————————————'\n      #.....................................................................................................\n      return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # single_prompt_insertion:\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   interface: ->\n  #     prepare_task()\n  #     { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n  #     jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n  #     @eq ( Ω__42 = -> jw.types.type_of jw.insert                             ), 'function'\n  #     # @eq ( Ω__43 = -> db.types.type_of db.insert_first_records                ), 'function'\n  #     # @eq ( Ω__44 = -> db.types.type_of db.insert_all_records                  ), 'function'\n  #     # @eq ( Ω__45 = -> db.types.type_of db.insert_first_records  '[s432] helo' ), 'list'\n  #     # @eq ( Ω__46 = -> db.types.type_of db.insert_all_records    '[s432] helo' ), 'list'\n  #     return null\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   insert_one_by_one: ->\n  #     prepare_task()\n  #     { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n  #     jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n  #     #.....................................................................................................\n  #     records = jw.parse_all_records '[s432] helo\\n[1] world\\n\\n'\n  #     for record in records\n  #       @eq ( Ω__47 = -> jw.insert record ), 1\n  #     return null\n\n  #   #-------------------------------------------------------------------------------------------------------\n  #   insert_many: ->\n  #     prepare_task()\n  #     { _Journal_walker_for_testing } = require '../../../apps/promptparser/lib/_used-for-testing'\n  #     jw = new _Journal_walker_for_testing get_journal_walker_cfg()\n  #     #.....................................................................................................\n  #     records = jw.parse_all_records '[s432] helo\\n[1] world\\n\\n'\n  #     @eq ( Ω__48 = -> jw.insert records ), 8\n  #     return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  t = new Test { throw_on_error: false, }\n  t = new Test { throw_on_error: true, }\n  t.test { promptparser_tasks, }\n  # t.test { t: promptparser_tasks.single_prompt_parsing.parse_all_records, }\n\n"
  ]
}