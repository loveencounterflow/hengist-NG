{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'promptparser/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\nWGUY                      = require '../../../apps/webguy'\n# TMP_types                 = new ( require 'intertype-203.0.0' ).Intertype()\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\n# test_mode                 = 'throw_failures'\n# test_mode                 = 'throw_errors'\n# test_mode                 = 'failsafe'\n{ isa\n  type_of }               = require 'intertype'\n\n\n#===========================================================================================================\ncfg = do ->\n  db_folder_path            = PATH.resolve  __dirname,                '/dev/shm'\n  db_file_path              = PATH.join     db_folder_path,           'prompts-and-generations.bd6ef2fc-3d7c-4e3e-9e41-76712e65cede.sqlite'\n  assets_folder_path        = PATH.resolve  __dirname,                '../../../assets'\n  promptparser_folder_path  = PATH.join     assets_folder_path,       'promptparser'\n  short_prompts_file_path   = PATH.join     promptparser_folder_path, 'short-prompts.md'\n  { assets_folder_path, promptparser_folder_path, short_prompts_file_path, db_folder_path, db_file_path, }\n\n\n#===========================================================================================================\n### TAINT consider to make test preparation a feature of `guy-test` ###\nprepare_task = ->\n  whisper GUY.trm.plum \"Î©___1 prepare_task / try to remove DB file:\", H.try_to_remove_file cfg.db_file_path\n  return null\n\n#===========================================================================================================\n### TAINT relocate these methods to `guy-test` ###\nH =\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_stats: ( path ) ->\n    try ( R = FS.statSync path ) catch error\n      return null if error.code is 'ENOENT'\n      throw error\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  file_exists: ( path ) ->\n    return false unless ( stats = @_get_stats path )?\n    return stats.isFile()\n\n  #---------------------------------------------------------------------------------------------------------\n  folder_exists: ( path ) ->\n    return false unless ( stats = @_get_stats path )?\n    return stats.isDirectory()\n\n  #---------------------------------------------------------------------------------------------------------\n  try_to_remove_file: ( path ) ->\n    try FS.unlinkSync path catch error\n      return 0 if error.code is 'ENOENT'\n      throw error\n    return 1\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @resolve_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../../', path\n\n  # #---------------------------------------------------------------------------------------------------------\n  # @copy_over = ( from_path, to_path ) ->\n  #   @try_to_remove_file to_path unless to_path in [ ':memory:', '', ]\n  #   await FSP.copyFile from_path, to_path\n  #   return null\n\n\n#===========================================================================================================\npromptparser_tasks =\n\n  #---------------------------------------------------------------------------------------------------------\n  fundamentals:\n\n    #-------------------------------------------------------------------------------------------------------\n    can_find_source_locations_and_files: ->\n      prepare_task()\n      @eq ( assets_folder       = -> H.folder_exists  cfg.assets_folder_path        ), true\n      @eq ( promptparser_folder = -> H.folder_exists  cfg.promptparser_folder_path  ), true\n      @eq ( prompts_file        = -> H.file_exists    cfg.short_prompts_file_path   ), true\n      @eq ( db_folder           = -> H.folder_exists  cfg.db_folder_path            ), true\n      return null\n\n\n    #-------------------------------------------------------------------------------------------------------\n    cannot_use_wrong_path_1: ->\n      prepare_task()\n      { Prompt_file_reader } = require '../../../apps/promptparser'\n      use_wrong_paths = ->\n        db = new Prompt_file_reader '/foo/prompts-and-generations.sqlite', '/bar/short-prompts.md'\n        return null\n      @throws ( Î©___2 = -> use_wrong_paths() ), /Cannot open database because the directory does not exist/\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    cannot_use_wrong_path_2: ->\n      prepare_task()\n      { Prompt_file_reader } = require '../../../apps/promptparser'\n      use_wrong_paths = ->\n        db = new Prompt_file_reader '/foo/prompts-and-generations.sqlite', '/bar/short-prompts.md'\n        return null\n      @throws ( Î©___3 = -> use_wrong_paths() ), /Cannot open database because the directory does not exist/\n      return null\n\n    #-------------------------------------------------------------------------------------------------------\n    can_omit_prompt_file_path: ->\n      prepare_task()\n      { Prompt_file_reader } = require '../../../apps/promptparser'\n      db = new Prompt_file_reader cfg.db_file_path, null\n      @eq ( Î©___4 = -> db instanceof Prompt_file_reader ), true\n      @eq ( Î©___5 = -> isa.object db.cfg                ), true\n      @eq ( Î©___6 = -> db.cfg.db_path                   ), cfg.db_file_path\n      @eq ( Î©___7 = -> db.cfg.datasource_path           ), null\n      @eq ( Î©___8 = -> db.cfg.has_db_path               ), true\n      @eq ( Î©___9 = -> db.cfg.has_datasource_path       ), false\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  Ã¤Ã¤Ã¤:\n\n    #-------------------------------------------------------------------------------------------------------\n    Ã¶Ã¶Ã¶: ->\n      prepare_task()\n      { Prompt_file_reader } = require '../../../apps/promptparser'\n      db = new Prompt_file_reader cfg.db_file_path, cfg.short_prompts_file_path\n      debug 'Î©__10', type_of db\n      debug 'Î©__11', db.cfg\n      return null\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  t = new Test { throw_on_error: true, }\n  t = new Test { throw_on_error: false, }\n  t.test { promptparser_tasks, }\n\n"
  ]
}