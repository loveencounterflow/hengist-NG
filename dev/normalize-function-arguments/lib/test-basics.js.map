{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@nfa_tasks =\n\n  #=========================================================================================================\n  basics: ->\n    NFA = require '../../../apps/normalize-function-arguments'\n    { nfa } = NFA\n    { red\n      reverse } = GUY.trm\n    #.......................................................................................................\n    do =>\n      fn = nfa ( a, b, c, cfg ) -> { a, b, c, cfg, }\n      # fn = ( a, b, c, cfg ) -> { $A: [ arguments..., ], a, b, c, cfg, }\n      # help 'Ω___1', get_fn_args fn\n      # if signature?\n      #.....................................................................................................\n      @eq     ( Ωnfat___2 = -> fn 1                       ), { a: 1, b: undefined, c: undefined, cfg: { a: 1 } }\n      @eq     ( Ωnfat___3 = -> fn 1, 2                    ), { a: 1, b: 2, c: undefined, cfg: { a: 1, b: 2 } }\n      @eq     ( Ωnfat___4 = -> fn 1, 2, 3                 ), { a: 1, b: 2, c: 3, cfg: { a: 1, b: 2, c: 3 } }\n      @throws ( Ωnfat___5 = -> fn 1, 2, 3, 4              ), /expected up to 3 positional arguments plus one POD, got 4 positional arguments/\n      @eq     ( Ωnfat___6 = -> fn 1, {}                   ), { a: 1, b: undefined, c: undefined, cfg: { a: 1 } }\n      @eq     ( Ωnfat___7 = -> fn 1, 2, {}                ), { a: 1, b: 2, c: undefined, cfg: { a: 1, b: 2 } }\n      @eq     ( Ωnfat___8 = -> fn 1, 2, 3, {}             ), { a: 1, b: 2, c: 3, cfg: { a: 1, b: 2, c: 3 } }\n      @throws ( Ωnfat___9 = -> fn 1, 2, 3, 4, {}          ), /expected up to 4 arguments, got 5/\n      @eq     ( Ωnfat__10 = -> fn 1, { b: 88, }           ), { a: 1, b: 88, c: undefined, cfg: { b: 88, a: 1 } }\n      @eq     ( Ωnfat__11 = -> fn 1, 2, { b: 88, }        ), { a: 1, b: 2, c: undefined, cfg: { b: 2, a: 1 } }\n      @eq     ( Ωnfat__12 = -> fn 1, 2, 3, { b: 88, }     ), { a: 1, b: 2, c: 3, cfg: { b: 2, a: 1, c: 3 } }\n      @throws ( Ωnfat__13 = -> fn 1, 2, 3, 4, { b: 88, }  ), /expected up to 4 arguments, got 5/\n      #.....................................................................................................\n      return null\n    #.......................................................................................................\n    return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test @nfa_tasks\n  # ( new Test guytest_cfg ).test @nfa_tasks.builtins\n"
  ]
}