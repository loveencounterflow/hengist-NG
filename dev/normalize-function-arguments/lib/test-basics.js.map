{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-basics.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'intertype/test-basics'\n{ rpr\n  inspect\n  echo\n  reverse\n  log     }               = GUY.trm\n# WGUY                      = require '../../../apps/webguy'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\n{ f }                     = require '../../../apps/effstring'\n\n\n\n############################################################################################################\n#\n#===========================================================================================================\n@nfa_tasks =\n\n  #=========================================================================================================\n  basics: ->\n    NFA = require '../../../apps/normalize-function-arguments'\n    { nfa } = NFA\n    { red\n      reverse } = GUY.trm\n    #.......................................................................................................\n    do =>\n      fn = nfa ( a, b, c, cfg ) -> { a, b, c, cfg, }\n      # fn = ( a, b, c, cfg ) -> { $A: [ arguments..., ], a, b, c, cfg, }\n      # help 'Ω__69', get_fn_args fn\n      # if signature?\n      #.....................................................................................................\n      echo()\n      info 'Ω__70', fn 1\n      info 'Ω__71', fn 1, 2\n      info 'Ω__72', fn 1, 2, 3\n      info 'Ω__73', try fn 1, 2, 3, 4 catch e then red reverse e.message\n      #.....................................................................................................\n      echo()\n      info 'Ω__74', fn 1, {}\n      info 'Ω__75', fn 1, 2, {}\n      info 'Ω__76', fn 1, 2, 3, {}\n      info 'Ω__77', try fn 1, 2, 3, 4, {} catch e then red reverse e.message\n      #.....................................................................................................\n      echo()\n      info 'Ω__78', fn 1, { b: 88, }\n      info 'Ω__79', fn 1, 2, { b: 88, }\n      info 'Ω__80', fn 1, 2, 3, { b: 88, }\n      info 'Ω__81', try fn 1, 2, 3, 4, { b: 88, } catch e then red reverse e.message\n      #.....................................................................................................\n      return null\n      @eq ( Ωcltt__48 = -> std.text.isa           ''                        ), true\n      return null\n    #.......................................................................................................\n    return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test @nfa_tasks\n  # ( new Test guytest_cfg ).test @nfa_tasks.builtins\n"
  ]
}