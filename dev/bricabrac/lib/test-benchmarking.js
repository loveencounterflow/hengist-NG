(async function() {
  'use strict';
  var C, GTNG, GUY, SFMODULES, Test, alert, debug, echo, f, help, info, inspect, log, plain, praise, reverse, rpr, urge, warn, whisper, white;

  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('bricabrac-benchmarking'));

  ({rpr, inspect, echo, white, reverse, log} = GUY.trm);

  // WGUY                      = require '../../../apps/webguy'
  GTNG = require('../../../apps/guy-test-NG');

  ({Test} = GTNG);

  ({f} = require('../../../apps/effstring'));

  SFMODULES = require('../../../apps/bricabrac-single-file-modules');

  ({
    ansi_colors_and_effects: C
  } = SFMODULES.require_ansi_colors_and_effects());

  //###########################################################################################################

  //===========================================================================================================
  this.tasks = {
    //=========================================================================================================
    basics: function() {
      var bigint_from_hrtime, hrtime_as_bigint, strip_ansi, timeit, type_of, with_capture_output;
      ({bigint_from_hrtime, hrtime_as_bigint, timeit} = SFMODULES.unstable.require_benchmarking());
      ({type_of} = SFMODULES.unstable.require_type_of());
      ({with_capture_output} = SFMODULES.unstable.require_capture_output());
      ({strip_ansi} = SFMODULES.require_strip_ansi());
      (() => {        //.......................................................................................................
        var output, output_handler, result, Ωbbbt___3, Ωbbbt___4;
        output = [];
        output_handler = function(text) {
          return output.push(text);
        };
        // output_handler = ( text ) -> output += text
        result = with_capture_output(output_handler, () => {
          var Ωbbbt___1;
          return this.eq((Ωbbbt___1 = function() {
            var abc;
            return type_of(timeit(abc = function() {
              debug("Ωbbbt___2 just a test");
              return 9876;
            }));
          }), 'pod');
        });
        output = strip_ansi(output.join(''));
        echo(reverse(white(output)));
        this.eq((Ωbbbt___3 = function() {
          return /\babc:\s+[0-9.]+/v.test(output);
        }), true);
        this.eq((Ωbbbt___4 = function() {
          return result;
        }), 9876);
        return null;
      })();
      //.......................................................................................................
      return null;
    }
  };

  //===========================================================================================================
  if (module === require.main) {
    await (() => {
      var guytest_cfg;
      guytest_cfg = {
        throw_on_error: false,
        show_passes: false,
        report_checks: false
      };
      guytest_cfg = {
        throw_on_error: true,
        show_passes: false,
        report_checks: false
      };
      return (new Test(guytest_cfg)).test(this.tasks);
    })();
  }

  // ( new Test guytest_cfg ).test @tasks.builtins

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rlc3QtYmVuY2htYXJraW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBO0FBQUEsTUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBOztFQUVBLEdBQUEsR0FBNEIsT0FBQSxDQUFRLEtBQVI7O0VBQzVCLENBQUEsQ0FBRSxLQUFGLEVBQ0UsS0FERixFQUVFLElBRkYsRUFHRSxJQUhGLEVBSUUsS0FKRixFQUtFLE1BTEYsRUFNRSxJQU5GLEVBT0UsSUFQRixFQVFFLE9BUkYsQ0FBQSxHQVE0QixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVIsQ0FBb0Isd0JBQXBCLENBUjVCOztFQVNBLENBQUEsQ0FBRSxHQUFGLEVBQ0UsT0FERixFQUVFLElBRkYsRUFHRSxLQUhGLEVBSUUsT0FKRixFQUtFLEdBTEYsQ0FBQSxHQUs0QixHQUFHLENBQUMsR0FMaEMsRUFaQTs7O0VBbUJBLElBQUEsR0FBNEIsT0FBQSxDQUFRLDJCQUFSOztFQUM1QixDQUFBLENBQUUsSUFBRixDQUFBLEdBQTRCLElBQTVCOztFQUNBLENBQUEsQ0FBRSxDQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLHlCQUFSLENBQTVCOztFQUNBLFNBQUEsR0FBNEIsT0FBQSxDQUFRLDZDQUFSOztFQUM1QixDQUFBO0lBQUUsdUJBQUEsRUFBeUI7RUFBM0IsQ0FBQSxHQUFrQyxTQUFTLENBQUMsK0JBQVYsQ0FBQSxDQUFsQyxFQXZCQTs7Ozs7RUE2QkEsSUFBQyxDQUFBLEtBQUQsR0FHRSxDQUFBOztJQUFBLE1BQUEsRUFBUSxRQUFBLENBQUEsQ0FBQTtBQUNWLFVBQUEsa0JBQUEsRUFBQSxnQkFBQSxFQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBO01BQUksQ0FBQSxDQUFFLGtCQUFGLEVBQ0UsZ0JBREYsRUFFRSxNQUZGLENBQUEsR0FFOEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxvQkFBbkIsQ0FBQSxDQUY5QjtNQUdBLENBQUEsQ0FBRSxPQUFGLENBQUEsR0FBOEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFuQixDQUFBLENBQTlCO01BQ0EsQ0FBQSxDQUFFLG1CQUFGLENBQUEsR0FBOEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxzQkFBbkIsQ0FBQSxDQUE5QjtNQUNBLENBQUEsQ0FBRSxVQUFGLENBQUEsR0FBOEIsU0FBUyxDQUFDLGtCQUFWLENBQUEsQ0FBOUI7TUFFRyxDQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUE7QUFDUCxZQUFBLE1BQUEsRUFBQSxjQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQTtRQUFNLE1BQUEsR0FBUztRQUNULGNBQUEsR0FBaUIsUUFBQSxDQUFFLElBQUYsQ0FBQTtpQkFBWSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQVo7UUFBWixFQUR2Qjs7UUFHTSxNQUFBLEdBQVMsbUJBQUEsQ0FBb0IsY0FBcEIsRUFBb0MsQ0FBQSxDQUFBLEdBQUE7QUFDbkQsY0FBQTtpQkFBUSxJQUFDLENBQUEsRUFBRCxDQUFJLENBQUUsU0FBQSxHQUFZLFFBQUEsQ0FBQSxDQUFBO0FBQUUsZ0JBQUE7bUJBQUMsT0FBQSxDQUFRLE1BQUEsQ0FBTyxHQUFBLEdBQU0sUUFBQSxDQUFBLENBQUE7Y0FBRyxLQUFBLENBQU0sdUJBQU47QUFBK0IscUJBQU87WUFBekMsQ0FBYixDQUFSO1VBQUgsQ0FBZCxDQUFKLEVBQTJGLEtBQTNGO1FBRDJDLENBQXBDO1FBRVQsTUFBQSxHQUFTLFVBQUEsQ0FBYSxNQUFNLENBQUMsSUFBUCxDQUFZLEVBQVosQ0FBYjtRQUNULElBQUEsQ0FBSyxPQUFBLENBQVEsS0FBQSxDQUFNLE1BQU4sQ0FBUixDQUFMO1FBQ0EsSUFBQyxDQUFBLEVBQUQsQ0FBSSxDQUFFLFNBQUEsR0FBWSxRQUFBLENBQUEsQ0FBQTtpQkFBRyxtQkFBbUIsQ0FBQyxJQUFwQixDQUF5QixNQUF6QjtRQUFILENBQWQsQ0FBSixFQUF5RCxJQUF6RDtRQUNBLElBQUMsQ0FBQSxFQUFELENBQUksQ0FBRSxTQUFBLEdBQVksUUFBQSxDQUFBLENBQUE7aUJBQUc7UUFBSCxDQUFkLENBQUosRUFBeUQsSUFBekQ7QUFDQSxlQUFPO01BVk4sQ0FBQSxJQVBQOztBQW1CSSxhQUFPO0lBcEJEO0VBQVIsRUFoQ0Y7OztFQXlEQSxJQUFHLE1BQUEsS0FBVSxPQUFPLENBQUMsSUFBckI7SUFBK0IsTUFBUyxDQUFBLENBQUEsQ0FBQSxHQUFBO0FBQ3hDLFVBQUE7TUFBRSxXQUFBLEdBQWM7UUFBRSxjQUFBLEVBQWdCLEtBQWxCO1FBQTBCLFdBQUEsRUFBYSxLQUF2QztRQUE4QyxhQUFBLEVBQWU7TUFBN0Q7TUFDZCxXQUFBLEdBQWM7UUFBRSxjQUFBLEVBQWdCLElBQWxCO1FBQTBCLFdBQUEsRUFBYSxLQUF2QztRQUE4QyxhQUFBLEVBQWU7TUFBN0Q7YUFDZCxDQUFFLElBQUksSUFBSixDQUFTLFdBQVQsQ0FBRixDQUF3QixDQUFDLElBQXpCLENBQThCLElBQUMsQ0FBQSxLQUEvQjtJQUhzQyxDQUFBLElBQXhDOzs7RUF6REE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzdHJpY3QnXG5cbkdVWSAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICdndXknXG57IGFsZXJ0XG4gIGRlYnVnXG4gIGhlbHBcbiAgaW5mb1xuICBwbGFpblxuICBwcmFpc2VcbiAgdXJnZVxuICB3YXJuXG4gIHdoaXNwZXIgfSAgICAgICAgICAgICAgID0gR1VZLnRybS5nZXRfbG9nZ2VycyAnYnJpY2FicmFjLWJlbmNobWFya2luZydcbnsgcnByXG4gIGluc3BlY3RcbiAgZWNob1xuICB3aGl0ZVxuICByZXZlcnNlXG4gIGxvZyAgICAgfSAgICAgICAgICAgICAgID0gR1VZLnRybVxuIyBXR1VZICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy93ZWJndXknXG5HVE5HICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9ndXktdGVzdC1ORydcbnsgVGVzdCAgICAgICAgICAgICAgICAgIH0gPSBHVE5HXG57IGYgfSAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9lZmZzdHJpbmcnXG5TRk1PRFVMRVMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSAnLi4vLi4vLi4vYXBwcy9icmljYWJyYWMtc2luZ2xlLWZpbGUtbW9kdWxlcydcbnsgYW5zaV9jb2xvcnNfYW5kX2VmZmVjdHM6IEMsIH0gPSBTRk1PRFVMRVMucmVxdWlyZV9hbnNpX2NvbG9yc19hbmRfZWZmZWN0cygpXG5cblxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4jXG4jPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkB0YXNrcyA9XG5cbiAgIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBiYXNpY3M6IC0+XG4gICAgeyBiaWdpbnRfZnJvbV9ocnRpbWUsXG4gICAgICBocnRpbWVfYXNfYmlnaW50LFxuICAgICAgdGltZWl0LCAgICAgICAgICAgICAgICAgfSA9IFNGTU9EVUxFUy51bnN0YWJsZS5yZXF1aXJlX2JlbmNobWFya2luZygpXG4gICAgeyB0eXBlX29mLCAgICAgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfdHlwZV9vZigpXG4gICAgeyB3aXRoX2NhcHR1cmVfb3V0cHV0LCAgICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfY2FwdHVyZV9vdXRwdXQoKVxuICAgIHsgc3RyaXBfYW5zaSwgICAgICAgICAgICAgfSA9IFNGTU9EVUxFUy5yZXF1aXJlX3N0cmlwX2Fuc2koKVxuICAgICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgZG8gPT5cbiAgICAgIG91dHB1dCA9IFtdXG4gICAgICBvdXRwdXRfaGFuZGxlciA9ICggdGV4dCApIC0+IG91dHB1dC5wdXNoIHRleHRcbiAgICAgICMgb3V0cHV0X2hhbmRsZXIgPSAoIHRleHQgKSAtPiBvdXRwdXQgKz0gdGV4dFxuICAgICAgcmVzdWx0ID0gd2l0aF9jYXB0dXJlX291dHB1dCBvdXRwdXRfaGFuZGxlciwgPT5cbiAgICAgICAgQGVxICggzqliYmJ0X19fMSA9IC0+IHR5cGVfb2YgdGltZWl0IGFiYyA9IC0+IGRlYnVnIFwizqliYmJ0X19fMiBqdXN0IGEgdGVzdFwiOyByZXR1cm4gOTg3NiApLCAncG9kJ1xuICAgICAgb3V0cHV0ID0gc3RyaXBfYW5zaSAoIG91dHB1dC5qb2luICcnIClcbiAgICAgIGVjaG8gcmV2ZXJzZSB3aGl0ZSBvdXRwdXRcbiAgICAgIEBlcSAoIM6pYmJidF9fXzMgPSAtPiAvXFxiYWJjOlxccytbMC05Ll0rL3YudGVzdCBvdXRwdXQgICksIHRydWVcbiAgICAgIEBlcSAoIM6pYmJidF9fXzQgPSAtPiByZXN1bHQgICAgICAgICAgICAgICAgICAgICAgICAgICApLCA5ODc2XG4gICAgICByZXR1cm4gbnVsbFxuICAgICMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXG4gICAgcmV0dXJuIG51bGxcblxuXG5cbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuaWYgbW9kdWxlIGlzIHJlcXVpcmUubWFpbiB0aGVuIGF3YWl0IGRvID0+XG4gIGd1eXRlc3RfY2ZnID0geyB0aHJvd19vbl9lcnJvcjogZmFsc2UsICBzaG93X3Bhc3NlczogZmFsc2UsIHJlcG9ydF9jaGVja3M6IGZhbHNlLCB9XG4gIGd1eXRlc3RfY2ZnID0geyB0aHJvd19vbl9lcnJvcjogdHJ1ZSwgICBzaG93X3Bhc3NlczogZmFsc2UsIHJlcG9ydF9jaGVja3M6IGZhbHNlLCB9XG4gICggbmV3IFRlc3QgZ3V5dGVzdF9jZmcgKS50ZXN0IEB0YXNrc1xuICAjICggbmV3IFRlc3QgZ3V5dGVzdF9jZmcgKS50ZXN0IEB0YXNrcy5idWlsdGluc1xuIl19
