(async function() {
  'use strict';
  var C, GTNG, GUY, SFMODULES, Test, alert, debug, echo, f, help, info, inspect, log, plain, praise, reverse, rpr, urge, warn, whisper, white;

  GUY = require('guy');

  ({alert, debug, help, info, plain, praise, urge, warn, whisper} = GUY.trm.get_loggers('bricabrac-benchmarking'));

  ({rpr, inspect, echo, white, reverse, log} = GUY.trm);

  // WGUY                      = require '../../../apps/webguy'
  GTNG = require('../../../apps/guy-test-NG');

  ({Test} = GTNG);

  ({f} = require('../../../apps/effstring'));

  SFMODULES = require('../../../apps/bricabrac-single-file-modules');

  ({
    ansi_colors_and_effects: C
  } = SFMODULES.require_ansi_colors_and_effects());

  //###########################################################################################################

  //===========================================================================================================
  this.tasks = {
    //=========================================================================================================
    basics: function() {
      var Benchmarker, bigint_from_hrtime, hrtime_as_bigint, strip_ansi, timeit, type_of, with_capture_output;
      ({bigint_from_hrtime, hrtime_as_bigint, timeit, Benchmarker} = SFMODULES.unstable.require_benchmarking());
      ({type_of} = SFMODULES.unstable.require_type_of());
      ({with_capture_output} = SFMODULES.unstable.require_capture_output());
      ({strip_ansi} = SFMODULES.require_strip_ansi());
      (() => {        //.......................................................................................................
        var inner_result, outer_result, output, output_handler, Ωbbbt___3, Ωbbbt___4, Ωbbbt___5, Ωbbbt___6;
        output = '';
        output_handler = function(text) {
          return output += text;
        };
        inner_result = null;
        outer_result = with_capture_output(output_handler, () => {
          var abc;
          return inner_result = timeit(abc = function() {
            debug("Ωbbbt___1 just a test");
            return 9876;
          });
        });
        output = strip_ansi(output);
        // echo 'Ωbbbt___2', reverse white rpr output
        this.eq((Ωbbbt___3 = function() {
          return /just a test/v.test(output);
        }), true);
        this.eq((Ωbbbt___4 = function() {
          return /\babc:\s+[0-9.]+/v.test(output);
        }), true);
        this.eq((Ωbbbt___5 = function() {
          return inner_result;
        }), 9876);
        this.eq((Ωbbbt___6 = function() {
          return outer_result;
        }), inner_result);
        return null;
      })();
      //.......................................................................................................
      return null;
    }
  };

  //===========================================================================================================
  if (module === require.main) {
    await (() => {
      var guytest_cfg;
      guytest_cfg = {
        throw_on_error: false,
        show_passes: false,
        report_checks: false
      };
      guytest_cfg = {
        throw_on_error: true,
        show_passes: false,
        report_checks: false
      };
      return (new Test(guytest_cfg)).test(this.tasks);
    })();
  }

  // ( new Test guytest_cfg ).test @tasks.builtins

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3Rlc3QtYmVuY2htYXJraW5nLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUFBO0FBQUEsTUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBOztFQUVBLEdBQUEsR0FBNEIsT0FBQSxDQUFRLEtBQVI7O0VBQzVCLENBQUEsQ0FBRSxLQUFGLEVBQ0UsS0FERixFQUVFLElBRkYsRUFHRSxJQUhGLEVBSUUsS0FKRixFQUtFLE1BTEYsRUFNRSxJQU5GLEVBT0UsSUFQRixFQVFFLE9BUkYsQ0FBQSxHQVE0QixHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVIsQ0FBb0Isd0JBQXBCLENBUjVCOztFQVNBLENBQUEsQ0FBRSxHQUFGLEVBQ0UsT0FERixFQUVFLElBRkYsRUFHRSxLQUhGLEVBSUUsT0FKRixFQUtFLEdBTEYsQ0FBQSxHQUs0QixHQUFHLENBQUMsR0FMaEMsRUFaQTs7O0VBbUJBLElBQUEsR0FBNEIsT0FBQSxDQUFRLDJCQUFSOztFQUM1QixDQUFBLENBQUUsSUFBRixDQUFBLEdBQTRCLElBQTVCOztFQUNBLENBQUEsQ0FBRSxDQUFGLENBQUEsR0FBNEIsT0FBQSxDQUFRLHlCQUFSLENBQTVCOztFQUNBLFNBQUEsR0FBNEIsT0FBQSxDQUFRLDZDQUFSOztFQUM1QixDQUFBO0lBQUUsdUJBQUEsRUFBeUI7RUFBM0IsQ0FBQSxHQUFrQyxTQUFTLENBQUMsK0JBQVYsQ0FBQSxDQUFsQyxFQXZCQTs7Ozs7RUE2QkEsSUFBQyxDQUFBLEtBQUQsR0FHRSxDQUFBOztJQUFBLE1BQUEsRUFBUSxRQUFBLENBQUEsQ0FBQTtBQUNWLFVBQUEsV0FBQSxFQUFBLGtCQUFBLEVBQUEsZ0JBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQTtNQUFJLENBQUEsQ0FBRSxrQkFBRixFQUNFLGdCQURGLEVBRUUsTUFGRixFQUdFLFdBSEYsQ0FBQSxHQUc4QixTQUFTLENBQUMsUUFBUSxDQUFDLG9CQUFuQixDQUFBLENBSDlCO01BSUEsQ0FBQSxDQUFFLE9BQUYsQ0FBQSxHQUE4QixTQUFTLENBQUMsUUFBUSxDQUFDLGVBQW5CLENBQUEsQ0FBOUI7TUFDQSxDQUFBLENBQUUsbUJBQUYsQ0FBQSxHQUE4QixTQUFTLENBQUMsUUFBUSxDQUFDLHNCQUFuQixDQUFBLENBQTlCO01BQ0EsQ0FBQSxDQUFFLFVBQUYsQ0FBQSxHQUE4QixTQUFTLENBQUMsa0JBQVYsQ0FBQSxDQUE5QjtNQUVHLENBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQTtBQUNQLFlBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxNQUFBLEVBQUEsY0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBO1FBQU0sTUFBQSxHQUFTO1FBQ1QsY0FBQSxHQUFrQixRQUFBLENBQUUsSUFBRixDQUFBO2lCQUFZLE1BQUEsSUFBVTtRQUF0QjtRQUNsQixZQUFBLEdBQWtCO1FBQ2xCLFlBQUEsR0FBa0IsbUJBQUEsQ0FBb0IsY0FBcEIsRUFBb0MsQ0FBQSxDQUFBLEdBQUE7QUFDNUQsY0FBQTtpQkFBUSxZQUFBLEdBQWUsTUFBQSxDQUFPLEdBQUEsR0FBTSxRQUFBLENBQUEsQ0FBQTtZQUFHLEtBQUEsQ0FBTSx1QkFBTjtBQUErQixtQkFBTztVQUF6QyxDQUFiO1FBRHFDLENBQXBDO1FBRWxCLE1BQUEsR0FBa0IsVUFBQSxDQUFXLE1BQVgsRUFMeEI7O1FBT00sSUFBQyxDQUFBLEVBQUQsQ0FBSSxDQUFFLFNBQUEsR0FBWSxRQUFBLENBQUEsQ0FBQTtpQkFBRyxjQUFjLENBQUMsSUFBZixDQUF5QixNQUF6QjtRQUFILENBQWQsQ0FBSixFQUF5RCxJQUF6RDtRQUNBLElBQUMsQ0FBQSxFQUFELENBQUksQ0FBRSxTQUFBLEdBQVksUUFBQSxDQUFBLENBQUE7aUJBQUcsbUJBQW1CLENBQUMsSUFBcEIsQ0FBeUIsTUFBekI7UUFBSCxDQUFkLENBQUosRUFBeUQsSUFBekQ7UUFDQSxJQUFDLENBQUEsRUFBRCxDQUFJLENBQUUsU0FBQSxHQUFZLFFBQUEsQ0FBQSxDQUFBO2lCQUFHO1FBQUgsQ0FBZCxDQUFKLEVBQXlELElBQXpEO1FBQ0EsSUFBQyxDQUFBLEVBQUQsQ0FBSSxDQUFFLFNBQUEsR0FBWSxRQUFBLENBQUEsQ0FBQTtpQkFBRztRQUFILENBQWQsQ0FBSixFQUF5RCxZQUF6RDtBQUNBLGVBQU87TUFaTixDQUFBLElBUlA7O0FBc0JJLGFBQU87SUF2QkQ7RUFBUixFQWhDRjs7O0VBNERBLElBQUcsTUFBQSxLQUFVLE9BQU8sQ0FBQyxJQUFyQjtJQUErQixNQUFTLENBQUEsQ0FBQSxDQUFBLEdBQUE7QUFDeEMsVUFBQTtNQUFFLFdBQUEsR0FBYztRQUFFLGNBQUEsRUFBZ0IsS0FBbEI7UUFBMEIsV0FBQSxFQUFhLEtBQXZDO1FBQThDLGFBQUEsRUFBZTtNQUE3RDtNQUNkLFdBQUEsR0FBYztRQUFFLGNBQUEsRUFBZ0IsSUFBbEI7UUFBMEIsV0FBQSxFQUFhLEtBQXZDO1FBQThDLGFBQUEsRUFBZTtNQUE3RDthQUNkLENBQUUsSUFBSSxJQUFKLENBQVMsV0FBVCxDQUFGLENBQXdCLENBQUMsSUFBekIsQ0FBOEIsSUFBQyxDQUFBLEtBQS9CO0lBSHNDLENBQUEsSUFBeEM7OztFQTVEQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCdcblxuR1VZICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUgJ2d1eSdcbnsgYWxlcnRcbiAgZGVidWdcbiAgaGVscFxuICBpbmZvXG4gIHBsYWluXG4gIHByYWlzZVxuICB1cmdlXG4gIHdhcm5cbiAgd2hpc3BlciB9ICAgICAgICAgICAgICAgPSBHVVkudHJtLmdldF9sb2dnZXJzICdicmljYWJyYWMtYmVuY2htYXJraW5nJ1xueyBycHJcbiAgaW5zcGVjdFxuICBlY2hvXG4gIHdoaXRlXG4gIHJldmVyc2VcbiAgbG9nICAgICB9ICAgICAgICAgICAgICAgPSBHVVkudHJtXG4jIFdHVVkgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL3dlYmd1eSdcbkdUTkcgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2d1eS10ZXN0LU5HJ1xueyBUZXN0ICAgICAgICAgICAgICAgICAgfSA9IEdUTkdcbnsgZiB9ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2VmZnN0cmluZydcblNGTU9EVUxFUyAgICAgICAgICAgICAgICAgPSByZXF1aXJlICcuLi8uLi8uLi9hcHBzL2JyaWNhYnJhYy1zaW5nbGUtZmlsZS1tb2R1bGVzJ1xueyBhbnNpX2NvbG9yc19hbmRfZWZmZWN0czogQywgfSA9IFNGTU9EVUxFUy5yZXF1aXJlX2Fuc2lfY29sb3JzX2FuZF9lZmZlY3RzKClcblxuXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiNcbiM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuQHRhc2tzID1cblxuICAjPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGJhc2ljczogLT5cbiAgICB7IGJpZ2ludF9mcm9tX2hydGltZSxcbiAgICAgIGhydGltZV9hc19iaWdpbnQsXG4gICAgICB0aW1laXQsXG4gICAgICBCZW5jaG1hcmtlciwgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnVuc3RhYmxlLnJlcXVpcmVfYmVuY2htYXJraW5nKClcbiAgICB7IHR5cGVfb2YsICAgICAgICAgICAgICAgIH0gPSBTRk1PRFVMRVMudW5zdGFibGUucmVxdWlyZV90eXBlX29mKClcbiAgICB7IHdpdGhfY2FwdHVyZV9vdXRwdXQsICAgIH0gPSBTRk1PRFVMRVMudW5zdGFibGUucmVxdWlyZV9jYXB0dXJlX291dHB1dCgpXG4gICAgeyBzdHJpcF9hbnNpLCAgICAgICAgICAgICB9ID0gU0ZNT0RVTEVTLnJlcXVpcmVfc3RyaXBfYW5zaSgpXG4gICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICBkbyA9PlxuICAgICAgb3V0cHV0ID0gJydcbiAgICAgIG91dHB1dF9oYW5kbGVyICA9ICggdGV4dCApIC0+IG91dHB1dCArPSB0ZXh0XG4gICAgICBpbm5lcl9yZXN1bHQgICAgPSBudWxsXG4gICAgICBvdXRlcl9yZXN1bHQgICAgPSB3aXRoX2NhcHR1cmVfb3V0cHV0IG91dHB1dF9oYW5kbGVyLCA9PlxuICAgICAgICBpbm5lcl9yZXN1bHQgPSB0aW1laXQgYWJjID0gLT4gZGVidWcgXCLOqWJiYnRfX18xIGp1c3QgYSB0ZXN0XCI7IHJldHVybiA5ODc2XG4gICAgICBvdXRwdXQgICAgICAgICAgPSBzdHJpcF9hbnNpIG91dHB1dFxuICAgICAgIyBlY2hvICfOqWJiYnRfX18yJywgcmV2ZXJzZSB3aGl0ZSBycHIgb3V0cHV0XG4gICAgICBAZXEgKCDOqWJiYnRfX18zID0gLT4gL2p1c3QgYSB0ZXN0L3YudGVzdCAgICAgIG91dHB1dCAgKSwgdHJ1ZVxuICAgICAgQGVxICggzqliYmJ0X19fNCA9IC0+IC9cXGJhYmM6XFxzK1swLTkuXSsvdi50ZXN0IG91dHB1dCAgKSwgdHJ1ZVxuICAgICAgQGVxICggzqliYmJ0X19fNSA9IC0+IGlubmVyX3Jlc3VsdCAgICAgICAgICAgICAgICAgICAgICksIDk4NzZcbiAgICAgIEBlcSAoIM6pYmJidF9fXzYgPSAtPiBvdXRlcl9yZXN1bHQgICAgICAgICAgICAgICAgICAgICApLCBpbm5lcl9yZXN1bHRcbiAgICAgIHJldHVybiBudWxsXG4gICAgIy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cbiAgICByZXR1cm4gbnVsbFxuXG5cblxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5pZiBtb2R1bGUgaXMgcmVxdWlyZS5tYWluIHRoZW4gYXdhaXQgZG8gPT5cbiAgZ3V5dGVzdF9jZmcgPSB7IHRocm93X29uX2Vycm9yOiBmYWxzZSwgIHNob3dfcGFzc2VzOiBmYWxzZSwgcmVwb3J0X2NoZWNrczogZmFsc2UsIH1cbiAgZ3V5dGVzdF9jZmcgPSB7IHRocm93X29uX2Vycm9yOiB0cnVlLCAgIHNob3dfcGFzc2VzOiBmYWxzZSwgcmVwb3J0X2NoZWNrczogZmFsc2UsIH1cbiAgKCBuZXcgVGVzdCBndXl0ZXN0X2NmZyApLnRlc3QgQHRhc2tzXG4gICMgKCBuZXcgVGVzdCBndXl0ZXN0X2NmZyApLnRlc3QgQHRhc2tzLmJ1aWx0aW5zXG4iXX0=
