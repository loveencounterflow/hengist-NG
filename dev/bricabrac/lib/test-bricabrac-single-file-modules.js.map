{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/test-bricabrac-single-file-modules.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n###\n\n\n## Applications\n\n* **RegEx Builder** (example from [Rejigs blog post](https://medium.com/@omarzawahry/rejigs-making-regular-expressions-human-readable-1fad37cb3eae))\n\n```java\nvar emailRegex =\n    Rejigs.Create()\n          .AtStart()\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\"._%+-\"))\n          .Text(\"@\")\n          .OneOrMore(r => r.AnyLetterOrDigit().Or().AnyOf(\".-\"))\n          .Text(\".\")\n          .AnyLetterOrDigit().AtLeast(2)\n          .AtEnd()\n          .Build();\n```\n\n* **HTML/XML Builer**\n* **SQL Builder**\n* **CLI Coloring**\n* syntax for a **Type Checker**\n\n###\n\n'use strict'\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'bricabrac-single-file-modules'\n{ rpr\n  inspect\n  echo\n  white\n  green\n  blue\n  gold\n  grey\n  red\n  bold\n  reverse\n  log     }               = GUY.trm\n{ f }                     = require '../../../apps/effstring'\n# write                     = ( p ) -> process.stdout.write p\n{ nfa }                   = require '../../../apps/normalize-function-arguments'\nGTNG                      = require '../../../apps/guy-test-NG'\n{ Test                  } = GTNG\nSFMODULES                 = require '../../../apps/bricabrac-single-file-modules'\n\n\n\n\n\n#===========================================================================================================\n@tests = tests =\n\n  #---------------------------------------------------------------------------------------------------------\n  is_tagfun_call: ->\n    { is_tagfun_call,                  } = SFMODULES.require_tagfun_tools()\n    fn = ( P... ) -> is_tagfun_call P...\n    @eq ( Ωbbsfm___1 = -> fn()             ), false\n    @eq ( Ωbbsfm___2 = -> fn [ 1, 2, 3, ]  ), false\n    @eq ( Ωbbsfm___3 = -> fn\"[ 1, 2, 3, ]\" ), true\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  escape_html_text: ->\n    { escape_html_text, } = SFMODULES.require_escape_html_text()\n    @eq ( Ωbbsfm___4 = -> escape_html_text ''                    ), ''\n    @eq ( Ωbbsfm___5 = -> escape_html_text 'abc'                 ), 'abc'\n    @eq ( Ωbbsfm___6 = -> escape_html_text 'abc<tag>d&e&f</tag>' ), 'abc&lt;tag&gt;d&amp;e&amp;f&lt;/tag&gt;'\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_tagfun_call_parts: ->\n    # { Html,                     } = require_html_class()\n    # { escape_html_text,         } = require_escape_html_text()\n    # { stackable_tagfun,         } = require_stackable_tagfun()\n    { walk_parts,\n      walk_nonempty_parts,\n      walk_raw_parts,\n      walk_raw_nonempty_parts,  } = SFMODULES.require_tagfun_tools()\n    #-------------------------------------------------------------------------------------------------------\n    @eq ( Ωbbsfm___7 = -> [ ( walk_parts\"\"                  )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm___8 = -> [ ( walk_parts \"\"                 )..., ] ), [ { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm___9 = -> [ ( walk_nonempty_parts\"\"         )..., ] ), []\n    @eq ( Ωbbsfm__10 = -> [ ( walk_nonempty_parts ''        )..., ] ), []\n    @eq ( Ωbbsfm__11 = -> [ ( walk_parts\"a\"                 )..., ] ), [ { chunk: 'a', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__12 = -> [ ( walk_parts\"\\na\"               )..., ] ), [ { chunk: '\\na', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__13 = -> [ ( walk_raw_parts\"\\na\"           )..., ] ), [ { chunk: '\\\\na', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__14 = -> [ ( walk_parts\"#{1}\"              )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__15 = -> [ ( walk_nonempty_parts\"#{1}\"     )..., ] ), [ { value: 1, isa: 'value', }, ]\n    @eq ( Ωbbsfm__16 = -> [ ( walk_parts\"a#{1}\"             )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__17 = -> [ ( walk_parts\"#{1}#{2}\"          )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: '', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', } ]\n    @eq ( Ωbbsfm__18 = -> [ ( walk_nonempty_parts\"#{1}#{2}\" )..., ] ), [ { value: 1, isa: 'value', }, { value: 2, isa: 'value', }, ]\n    @eq ( Ωbbsfm__19 = -> [ ( walk_parts\"a#{1}z\"            )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__20 = -> [ ( walk_parts\"a#{1}z#{2}\"        )..., ] ), [ { chunk: 'a', isa: 'chunk', }, { value: 1, isa: 'value', }, { chunk: 'z', isa: 'chunk', }, { value: 2, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__21 = -> [ ( walk_parts \"a#{1}z#{2}\"       )..., ] ), [ { chunk: 'a1z2', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__22 = -> [ ( walk_parts 12                 )..., ] ), [ { chunk: '', isa: 'chunk', }, { value: 12, isa: 'value', }, { chunk: '', isa: 'chunk', }, ]\n    @eq ( Ωbbsfm__23 = -> [ ( walk_nonempty_parts 12        )..., ] ), [ { value: 12, isa: 'value', }, ]\n    #.........................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_next_free_filename: ->\n    { get_next_free_filename,\n      get_next_filename,\n      exists,\n      cache_filename_re,      } = SFMODULES.require_next_free_filename()\n    PATH                        = require 'node:path'\n    #.......................................................................................................\n    @throws ( Ωbbsfm__24 = -> get_next_free_filename null        ), /expected a text/\n    @throws ( Ωbbsfm__25 = -> get_next_free_filename undefined   ), /expected a text/\n    @throws ( Ωbbsfm__26 = -> get_next_free_filename true        ), /expected a text/\n    @throws ( Ωbbsfm__27 = -> get_next_free_filename ''          ), /expected a nonempty text/\n    #.......................................................................................................\n    probes_and_matchers = [\n      [ 'a',                                  [ false, '~.a.0001.bricabrac-cache',         '~.a.0001.bricabrac-cache', ], ]\n      [ 'README.md',                          [ true,  '~.README.md.0001.bricabrac-cache', '~.README.md.0004.bricabrac-cache', ], ]\n      [ '~.README.md.0001.bricabrac-cache',   [ true,  '~.README.md.0002.bricabrac-cache', '~.README.md.0004.bricabrac-cache', ], ]\n      [ '~.README.md.0002.bricabrac-cache',   [ true,  '~.README.md.0003.bricabrac-cache', '~.README.md.0004.bricabrac-cache', ], ]\n      [ '~.README.md.0003.bricabrac-cache',   [ true,  '~.README.md.0004.bricabrac-cache', '~.README.md.0004.bricabrac-cache', ], ]\n      [ '~.README.md.0004.bricabrac-cache',   [ false, '~.README.md.0005.bricabrac-cache', '~.README.md.0005.bricabrac-cache', ], ]\n      ]\n    path_prefix = PATH.resolve PATH.join __dirname, '../../../assets/bricabrac/find-free-filename'\n    #.......................................................................................................\n    do =>\n      for [ path, [ matcher_1, matcher_2, matcher_3, ], ] in probes_and_matchers\n        abs_path      = PATH.join path_prefix, path\n        abs_matcher_2 = PATH.join path_prefix, matcher_2\n        abs_matcher_3 = PATH.join path_prefix, matcher_3\n        @eq ( Ωbbsfm__28 = -> exists abs_path                    ), matcher_1\n        @eq ( Ωbbsfm__29 = -> get_next_filename       abs_path   ), abs_matcher_2\n        @eq ( Ωbbsfm__30 = -> get_next_free_filename  abs_path   ), abs_matcher_3\n      return null\n    #.......................................................................................................\n    do =>\n      for [ path, [ matcher_1, matcher_2, matcher_3, ], ] in probes_and_matchers\n        rel_path      = PATH.relative process.cwd(), PATH.join path_prefix, path\n        rel_matcher_2 = PATH.relative process.cwd(), PATH.join path_prefix, matcher_2\n        rel_matcher_3 = PATH.relative process.cwd(), PATH.join path_prefix, matcher_3\n        @eq ( Ωbbsfm__31 = -> exists rel_path                    ), matcher_1\n        @eq ( Ωbbsfm__32 = -> get_next_filename       rel_path   ), rel_matcher_2\n        @eq ( Ωbbsfm__33 = -> get_next_free_filename  rel_path   ), rel_matcher_3\n      return null\n    #.......................................................................................................\n    do =>\n      current_cwd = PATH.resolve process.cwd()\n      process.chdir path_prefix\n      try\n        for [ path, [ matcher_1, matcher_2, matcher_3, ], ] in probes_and_matchers\n          @eq ( Ωbbsfm__34 = -> exists path                    ), matcher_1\n          @eq ( Ωbbsfm__35 = -> get_next_filename       path   ), matcher_2\n          @eq ( Ωbbsfm__36 = -> get_next_free_filename  path   ), matcher_3\n      finally\n        process.chdir current_cwd\n      return null\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  ANSI: ->\n    { ANSI, } = SFMODULES.require_ansi()\n    @eq     ( Ωbbsfm__37 = -> ANSI.fg_from_hex '#a0a1a2'           ), '\\x1B[38:2::160:161:162m'\n    @eq     ( Ωbbsfm__38 = -> ANSI.bg_from_hex '#a0a1a2'           ), '\\x1B[48:2::160:161:162m'\n    @eq     ( Ωbbsfm__39 = -> ANSI.fg_from_dec [ 160, 161, 162 ]   ), '\\x1B[38:2::160:161:162m'\n    @eq     ( Ωbbsfm__40 = -> ANSI.bg_from_dec [ 160, 161, 162 ]   ), '\\x1B[48:2::160:161:162m'\n    @eq     ( Ωbbsfm__41 = -> ANSI.dec_from_hex '#a0a1a2'          ), [ 160, 161, 162 ]\n    @throws ( Ωbbsfm__42 = -> ANSI.dec_from_hex '#xxxxxx'          ), /not a proper hexadecimal RGB code: '#xxxxxx'/\n    @throws ( Ωbbsfm__43 = -> ANSI.dec_from_hex '#aaaaa'           ), /not a proper hexadecimal RGB code: '#aaaaa'/\n    @throws ( Ωbbsfm__44 = -> ANSI.dec_from_hex '#aaaaabb'         ), /not a proper hexadecimal RGB code: '#aaaaabb'/\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  require_ansi_colors_and_effects: ->\n    { ansi_colors_and_effects: C, } = SFMODULES.require_ansi_colors_and_effects()\n    @eq     ( Ωbbsfm__45 = -> C.red              ), '\\x1B[38:2::255:0:16m'\n    @eq     ( Ωbbsfm__46 = -> C.bg_red           ), '\\x1B[48:2::255:0:16m'\n    @eq     ( Ωbbsfm__47 = -> C.overline1        ), '\\x1b[53m'\n    @eq     ( Ωbbsfm__48 = -> C.overline0        ), '\\x1b[55m'\n    @eq     ( Ωbbsfm__49 = -> C.default          ), '\\x1b[39m'\n    @eq     ( Ωbbsfm__50 = -> C.bg_default       ), '\\x1b[49m'\n    @eq     ( Ωbbsfm__51 = -> C.reset            ), '\\x1b[0m'\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  require_ansi_chunker: ->\n    { ansi_colors_and_effects: C, } = SFMODULES.require_ansi_colors_and_effects()\n    { Ansi_chunker,               } = SFMODULES.require_ansi_chunker()\n    do =>\n      echo '—————————————————————————————————————————————'\n      text  = \"ABC#{ C.black + C.bg_red + C.bold + 'DEF' + C.bold0 + C.default + C.bg_default }XYZ\"\n      ac    = new Ansi_chunker()\n      urge 'Ωbbsfm__52',                ac.chunkify text\n      # info 'Ωbbsfm__53', d for d from ( ac.chunkify text ).chunks\n      info 'Ωbbsfm__54', d for d from ac\n      info 'Ωbbsfm__55', ac.width\n      info 'Ωbbsfm__56', ac.length\n      info 'Ωbbsfm__57', ac.has_ansi\n      info 'Ωbbsfm__58', ac.text\n    do =>\n      echo '—————————————————————————————————————————————'\n      text  = 'ABCDEFXYZ'\n      ac    = new Ansi_chunker()\n      urge 'Ωbbsfm__59',                ac.chunkify text\n      # info 'Ωbbsfm__60', d for d from ( ac.chunkify text ).chunks\n      info 'Ωbbsfm__61', d for d from ac\n      info 'Ωbbsfm__62', ac.width\n      info 'Ωbbsfm__63', ac.length\n      info 'Ωbbsfm__64', ac.has_ansi\n      info 'Ωbbsfm__65', ac.text\n    do =>\n      echo '—————————————————————————————————————————————'\n      text  = \"#{ C.black + C.bg_red + C.bold + C.bold0 + C.default + C.bg_default }\"\n      ac    = new Ansi_chunker()\n      urge 'Ωbbsfm__66',                ac.chunkify text\n      # info 'Ωbbsfm__67', d for d from ( ac.chunkify text ).chunks\n      info 'Ωbbsfm__68', d for d from ac\n      info 'Ωbbsfm__69', ac.width\n      info 'Ωbbsfm__70', ac.length\n      info 'Ωbbsfm__71', ac.has_ansi\n      info 'Ωbbsfm__72', ac.text\n    do =>\n      echo '—————————————————————————————————————————————'\n      text  = ''\n      ac    = new Ansi_chunker()\n      urge 'Ωbbsfm__73',                ac.chunkify text\n      # info 'Ωbbsfm__74', d for d from ( ac.chunkify text ).chunks\n      info 'Ωbbsfm__75', d for d from ac\n      info 'Ωbbsfm__76', ac.width\n      info 'Ωbbsfm__77', ac.length\n      info 'Ωbbsfm__78', ac.has_ansi\n      info 'Ωbbsfm__79', ac.text\n    #.......................................................................................................\n    return null\n\n\n\n#===========================================================================================================\nif module is require.main then await do =>\n  # demo_infinite_proxy()\n  # demo_colorful_proxy()\n  guytest_cfg = { throw_on_error: false,  show_passes: false, report_checks: false, }\n  guytest_cfg = { throw_on_error: true,   show_passes: false, report_checks: false, }\n  ( new Test guytest_cfg ).test { tests, }\n\n  # f = ( ctx ) -> debug 'Ωbbsfm__80', ctx.arguments\n  # g = ( P... ) -> debug 'Ωbbsfm__81', f { arguments, }\n  # g 5, 'd'\n"
  ]
}